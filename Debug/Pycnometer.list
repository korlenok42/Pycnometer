
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d0  080038d0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080038d0  080038d0  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d0  080038d0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d4  080038d4  000138d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080038d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200000cc  080039a4  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080039a4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c36c  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3b  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002ed10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000110ba  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc81  00000000  00000000  00040742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066210  00000000  00000000  0004d3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b35d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002850  00000000  00000000  000b3628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003850 	.word	0x08003850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08003850 	.word	0x08003850

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <ADC_AverageMean>:

int ADC_Buf[ADC_Operations + 1];  		// get ADC val
//======================================================================
// ADC average value calculation
void ADC_AverageMean (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

	// ADC_chN - global value [0..17]
	// ADC_Buf_j - global value, [0..3]

	ADC_BufMean = 0;
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <ADC_AverageMean+0x44>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]

	for (int i = 0; i <= ADC_Operations; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	e00b      	b.n	8000432 <ADC_AverageMean+0x2a>
	{
		ADC_BufMean = ADC_BufMean + ADC_Buf[i];
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <ADC_AverageMean+0x48>)
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	0092      	lsls	r2, r2, #2
 8000420:	58d2      	ldr	r2, [r2, r3]
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <ADC_AverageMean+0x44>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	18d2      	adds	r2, r2, r3
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <ADC_AverageMean+0x44>)
 800042a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= ADC_Operations; i++)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3301      	adds	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b0f      	cmp	r3, #15
 8000436:	ddf0      	ble.n	800041a <ADC_AverageMean+0x12>
	} // for i

	ADC_BufMean = ADC_BufMean >> 4;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <ADC_AverageMean+0x44>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	111a      	asrs	r2, r3, #4
 800043e:	4b03      	ldr	r3, [pc, #12]	; (800044c <ADC_AverageMean+0x44>)
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	200000f4 	.word	0x200000f4
 8000450:	20000110 	.word	0x20000110

08000454 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ReadADCvalue;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	0002      	movs	r2, r0
 800045c:	1dbb      	adds	r3, r7, #6
 800045e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 8000460:	1dbb      	adds	r3, r7, #6
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2b02      	cmp	r3, #2
 8000466:	d103      	bne.n	8000470 <HAL_GPIO_EXTI_Callback+0x1c>
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800046a:	2201      	movs	r2, #1
 800046c:	601a      	str	r2, [r3, #0]

    __NOP();

  }

}
 800046e:	e013      	b.n	8000498 <HAL_GPIO_EXTI_Callback+0x44>
  else if(GPIO_Pin == Stop_Pin) {
 8000470:	1dbb      	adds	r3, r7, #6
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10e      	bne.n	8000496 <HAL_GPIO_EXTI_Callback+0x42>
	  TimerFlag = 0;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
	  TimerCounter = TimStart;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000480:	220f      	movs	r2, #15
 8000482:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	00d9      	lsls	r1, r3, #3
 8000488:	2390      	movs	r3, #144	; 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2200      	movs	r2, #0
 800048e:	0018      	movs	r0, r3
 8000490:	f001 fcc6 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8000494:	e000      	b.n	8000498 <HAL_GPIO_EXTI_Callback+0x44>
    __NOP();
 8000496:	46c0      	nop			; (mov r8, r8)
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000e8 	.word	0x200000e8
 80004a4:	20000058 	.word	0x20000058

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fd77 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f8a3 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f99b 	bl	80007f0 <MX_GPIO_Init>
  MX_ADC_Init();
 80004ba:	f000 f8e5 	bl	8000688 <MX_ADC_Init>
  MX_TIM3_Init();
 80004be:	f000 f93f 	bl	8000740 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  uint16_t StartValue = 5;
 80004c2:	1dbb      	adds	r3, r7, #6
 80004c4:	2205      	movs	r2, #5
 80004c6:	801a      	strh	r2, [r3, #0]
  uint16_t pos, neg;

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc);
 80004c8:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <main+0x12c>)
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f9ba 	bl	8001844 <HAL_ADCEx_Calibration_Start>
  // Start ADC Conversion
  HAL_ADC_Start(&hadc);
 80004d0:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <main+0x12c>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 ff2c 	bl	8001330 <HAL_ADC_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 80004d8:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <main+0x130>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f976 	bl	80027cc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 80004e0:	4b3e      	ldr	r3, [pc, #248]	; (80005dc <main+0x134>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fc9a 	bl	8001e20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 80004ec:	4b3b      	ldr	r3, [pc, #236]	; (80005dc <main+0x134>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	2102      	movs	r1, #2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fc94 	bl	8001e20 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	SEG_LCD_Process();
 80004f8:	f000 fb92 	bl	8000c20 <SEG_LCD_Process>
	HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f000 fdb3 	bl	8001068 <HAL_Delay>

	if(!TimerFlag) {
 8000502:	4b37      	ldr	r3, [pc, #220]	; (80005e0 <main+0x138>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d13e      	bne.n	8000588 <main+0xe0>

		// Poll ADC1 Perihperal & TimeOut = 10mSec
		HAL_ADC_PollForConversion(ADC, 1000);
 800050a:	23fa      	movs	r3, #250	; 0xfa
 800050c:	009a      	lsls	r2, r3, #2
 800050e:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <main+0x12c>)
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 ff60 	bl	80013d8 <HAL_ADC_PollForConversion>

		// Read The ADC Conversion Result
		for(int i = 0; i <= ADC_Operations; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	e00c      	b.n	8000538 <main+0x90>
		{
			ADC_Buf[i] = HAL_ADC_GetValue(ADC);
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <main+0x12c>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fff1 	bl	8001508 <HAL_ADC_GetValue>
 8000526:	0003      	movs	r3, r0
 8000528:	0019      	movs	r1, r3
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <main+0x13c>)
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	0092      	lsls	r2, r2, #2
 8000530:	50d1      	str	r1, [r2, r3]
		for(int i = 0; i <= ADC_Operations; i++)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b0f      	cmp	r3, #15
 800053c:	ddef      	ble.n	800051e <main+0x76>
		}

		ADC_AverageMean();
 800053e:	f7ff ff63 	bl	8000408 <ADC_AverageMean>

		// start = 10 ; stop = 20
		//StartValue = (uint32_t) 10 + ( ADC_BufMean / 400);

		// start = 5 ; stop = 20
		GlobalTempValue = (uint32_t) 5 + ( ADC_BufMean / 270);
 8000542:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <main+0x140>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2287      	movs	r2, #135	; 0x87
 8000548:	0051      	lsls	r1, r2, #1
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff fe70 	bl	8000230 <__divsi3>
 8000550:	0003      	movs	r3, r0
 8000552:	b29b      	uxth	r3, r3
 8000554:	3305      	adds	r3, #5
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <main+0x144>)
 800055a:	801a      	strh	r2, [r3, #0]

		if (LEDsFlag)
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <main+0x148>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0c9      	beq.n	80004f8 <main+0x50>
		{
			StartValue = SumValue/16;
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0x14c>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	0912      	lsrs	r2, r2, #4
 800056c:	801a      	strh	r2, [r3, #0]
			TimerCounter = StartValue;
 800056e:	1dbb      	adds	r3, r7, #6
 8000570:	881a      	ldrh	r2, [r3, #0]
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0x150>)
 8000574:	601a      	str	r2, [r3, #0]
			SEG_LCD_WriteNumber(TimerCounter);
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <main+0x150>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fae0 	bl	8000b40 <SEG_LCD_WriteNumber>
			LEDsFlag = 0;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <main+0x148>)
 8000582:	2200      	movs	r2, #0
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	e7b7      	b.n	80004f8 <main+0x50>

	}

	else
	{
		if (TimerCounter == StartValue) HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, SET);
 8000588:	1dbb      	adds	r3, r7, #6
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <main+0x150>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	429a      	cmp	r2, r3
 8000592:	d107      	bne.n	80005a4 <main+0xfc>
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	00d9      	lsls	r1, r3, #3
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2201      	movs	r2, #1
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fc3e 	bl	8001e20 <HAL_GPIO_WritePin>

		if (TimerCounter == 0) {
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <main+0x150>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10d      	bne.n	80005c8 <main+0x120>

	  			TimerCounter = TimStart;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <main+0x150>)
 80005ae:	220f      	movs	r2, #15
 80005b0:	601a      	str	r2, [r3, #0]
	  			TimerFlag = 0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0x138>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
	  			HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	00d9      	lsls	r1, r3, #3
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	2200      	movs	r2, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fc2c 	bl	8001e20 <HAL_GPIO_WritePin>
	  		}

	  	SEG_LCD_WriteNumber(TimerCounter);
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <main+0x150>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fab7 	bl	8000b40 <SEG_LCD_WriteNumber>
	SEG_LCD_Process();
 80005d2:	e791      	b.n	80004f8 <main+0x50>
 80005d4:	20000150 	.word	0x20000150
 80005d8:	20000190 	.word	0x20000190
 80005dc:	48001400 	.word	0x48001400
 80005e0:	200000e8 	.word	0x200000e8
 80005e4:	20000110 	.word	0x20000110
 80005e8:	200000f4 	.word	0x200000f4
 80005ec:	200000ec 	.word	0x200000ec
 80005f0:	200000ee 	.word	0x200000ee
 80005f4:	200000f0 	.word	0x200000f0
 80005f8:	20000058 	.word	0x20000058

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b091      	sub	sp, #68	; 0x44
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	2410      	movs	r4, #16
 8000604:	193b      	adds	r3, r7, r4
 8000606:	0018      	movs	r0, r3
 8000608:	2330      	movs	r3, #48	; 0x30
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f002 fcdd 	bl	8002fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	003b      	movs	r3, r7
 8000614:	0018      	movs	r0, r3
 8000616:	2310      	movs	r3, #16
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f002 fcd6 	bl	8002fcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000620:	0021      	movs	r1, r4
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2212      	movs	r2, #18
 8000626:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2210      	movs	r2, #16
 8000638:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2210      	movs	r2, #16
 800063e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	187b      	adds	r3, r7, r1
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fc23 	bl	8001e94 <HAL_RCC_OscConfig>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000652:	f000 f969 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	003b      	movs	r3, r7
 8000658:	2207      	movs	r2, #7
 800065a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	003b      	movs	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	003b      	movs	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	003b      	movs	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066e:	003b      	movs	r3, r7
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 ff28 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800067c:	f000 f954 	bl	8000928 <Error_Handler>
  }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b011      	add	sp, #68	; 0x44
 8000686:	bd90      	pop	{r4, r7, pc}

08000688 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	0018      	movs	r0, r3
 8000692:	230c      	movs	r3, #12
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 fc98 	bl	8002fcc <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <MX_ADC_Init+0xb0>)
 800069e:	4a27      	ldr	r2, [pc, #156]	; (800073c <MX_ADC_Init+0xb4>)
 80006a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_ADC_Init+0xb0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_ADC_Init+0xb0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_ADC_Init+0xb0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_ADC_Init+0xb0>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ADC_Init+0xb0>)
 80006bc:	2204      	movs	r2, #4
 80006be:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_ADC_Init+0xb0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC_Init+0xb0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_ADC_Init+0xb0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_ADC_Init+0xb0>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_ADC_Init+0xb0>)
 80006da:	22c2      	movs	r2, #194	; 0xc2
 80006dc:	32ff      	adds	r2, #255	; 0xff
 80006de:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ADC_Init+0xb0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_ADC_Init+0xb0>)
 80006e8:	2224      	movs	r2, #36	; 0x24
 80006ea:	2100      	movs	r1, #0
 80006ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_ADC_Init+0xb0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ADC_Init+0xb0>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fcda 	bl	80010b0 <HAL_ADC_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 f912 	bl	8000928 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2209      	movs	r2, #9
 8000708:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0152      	lsls	r2, r2, #5
 8000710:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0552      	lsls	r2, r2, #21
 8000718:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800071a:	1d3a      	adds	r2, r7, #4
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_ADC_Init+0xb0>)
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fefd 	bl	8001520 <HAL_ADC_ConfigChannel>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800072a:	f000 f8fd 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b004      	add	sp, #16
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000150 	.word	0x20000150
 800073c:	40012400 	.word	0x40012400

08000740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	2308      	movs	r3, #8
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f002 fc3b 	bl	8002fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	003b      	movs	r3, r7
 8000758:	0018      	movs	r0, r3
 800075a:	2308      	movs	r3, #8
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f002 fc34 	bl	8002fcc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM3_Init+0xa0>)
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <MX_TIM3_Init+0xa4>)
 8000768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM3_Init+0xa0>)
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <MX_TIM3_Init+0xa8>)
 800076e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM3_Init+0xa0>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_TIM3_Init+0xa0>)
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_TIM3_Init+0xac>)
 800077a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_TIM3_Init+0xa0>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_TIM3_Init+0xa0>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_TIM3_Init+0xa0>)
 800078a:	0018      	movs	r0, r3
 800078c:	f001 ffce 	bl	800272c <HAL_TIM_Base_Init>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f8c8 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	2108      	movs	r1, #8
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0152      	lsls	r2, r2, #5
 80007a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a2:	187a      	adds	r2, r7, r1
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_TIM3_Init+0xa0>)
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f971 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 f8b9 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c2:	003a      	movs	r2, r7
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_TIM3_Init+0xa0>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 fb6d 	bl	8002ea8 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80007d2:	f000 f8a9 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b006      	add	sp, #24
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000190 	.word	0x20000190
 80007e4:	40000400 	.word	0x40000400
 80007e8:	00001f3f 	.word	0x00001f3f
 80007ec:	000003e7 	.word	0x000003e7

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	240c      	movs	r4, #12
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2314      	movs	r3, #20
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f002 fbe3 	bl	8002fcc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b45      	ldr	r3, [pc, #276]	; (800091c <MX_GPIO_Init+0x12c>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b44      	ldr	r3, [pc, #272]	; (800091c <MX_GPIO_Init+0x12c>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	03c9      	lsls	r1, r1, #15
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b41      	ldr	r3, [pc, #260]	; (800091c <MX_GPIO_Init+0x12c>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	03db      	lsls	r3, r3, #15
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <MX_GPIO_Init+0x12c>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_GPIO_Init+0x12c>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0289      	lsls	r1, r1, #10
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <MX_GPIO_Init+0x12c>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	029b      	lsls	r3, r3, #10
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <MX_GPIO_Init+0x12c>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b36      	ldr	r3, [pc, #216]	; (800091c <MX_GPIO_Init+0x12c>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b33      	ldr	r3, [pc, #204]	; (800091c <MX_GPIO_Init+0x12c>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	02db      	lsls	r3, r3, #11
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800085a:	4b31      	ldr	r3, [pc, #196]	; (8000920 <MX_GPIO_Init+0x130>)
 800085c:	2200      	movs	r2, #0
 800085e:	2103      	movs	r1, #3
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fadd 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_Pin|B_Pin|C_Pin|E_Pin
 8000866:	492f      	ldr	r1, [pc, #188]	; (8000924 <MX_GPIO_Init+0x134>)
 8000868:	2390      	movs	r3, #144	; 0x90
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2200      	movs	r2, #0
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fad6 	bl	8001e20 <HAL_GPIO_WritePin>
                          |D_Pin|F_Pin|G_Pin|OUTPUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2203      	movs	r2, #3
 8000878:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088c:	193b      	adds	r3, r7, r4
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <MX_GPIO_Init+0x130>)
 8000890:	0019      	movs	r1, r3
 8000892:	0010      	movs	r0, r2
 8000894:	f001 f95c 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2284      	movs	r2, #132	; 0x84
 80008a2:	0392      	lsls	r2, r2, #14
 80008a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	2202      	movs	r2, #2
 80008aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80008ac:	193a      	adds	r2, r7, r4
 80008ae:	2390      	movs	r3, #144	; 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	0011      	movs	r1, r2
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f94b 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Pin */
  GPIO_InitStruct.Pin = Start_Pin;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2202      	movs	r2, #2
 80008be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2288      	movs	r2, #136	; 0x88
 80008c4:	0352      	lsls	r2, r2, #13
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2202      	movs	r2, #2
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Start_GPIO_Port, &GPIO_InitStruct);
 80008ce:	193a      	adds	r2, r7, r4
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 f93a 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin E_Pin
                           D_Pin F_Pin G_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|E_Pin
 80008dc:	0021      	movs	r1, r4
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <MX_GPIO_Init+0x134>)
 80008e2:	601a      	str	r2, [r3, #0]
                          |D_Pin|F_Pin|G_Pin|OUTPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2201      	movs	r2, #1
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	187a      	adds	r2, r7, r1
 80008f8:	2390      	movs	r3, #144	; 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f926 	bl	8001b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2005      	movs	r0, #5
 800090a:	f001 f8ef 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 f901 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b009      	add	sp, #36	; 0x24
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48001400 	.word	0x48001400
 8000924:	000006fc 	.word	0x000006fc

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <SEG_LCD_WriteString>:
static uint8_t currentDots[DIGITS_NUM] = {0, 0};
static uint8_t currentDigitIndex = 0;
/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteString(char* str)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint8_t currentDigitIndex = 0;
 800093c:	230f      	movs	r3, #15
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000944:	230e      	movs	r3, #14
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e00f      	b.n	800096e <SEG_LCD_WriteString+0x3a>
  {
    currentCharacters[i] = 0x00;
 800094e:	200e      	movs	r0, #14
 8000950:	183b      	adds	r3, r7, r0
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4a76      	ldr	r2, [pc, #472]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 8000956:	2100      	movs	r1, #0
 8000958:	54d1      	strb	r1, [r2, r3]
    currentDots[i] = 0;
 800095a:	183b      	adds	r3, r7, r0
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4a75      	ldr	r2, [pc, #468]	; (8000b34 <SEG_LCD_WriteString+0x200>)
 8000960:	2100      	movs	r1, #0
 8000962:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000964:	183b      	adds	r3, r7, r0
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	183b      	adds	r3, r7, r0
 800096a:	3201      	adds	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	230e      	movs	r3, #14
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d9ea      	bls.n	800094e <SEG_LCD_WriteString+0x1a>
  }
  while(*str != '\0')
 8000978:	e076      	b.n	8000a68 <SEG_LCD_WriteString+0x134>
  {
    if (*str == ASCII_DOT_CODE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b2e      	cmp	r3, #46	; 0x2e
 8000980:	d10b      	bne.n	800099a <SEG_LCD_WriteString+0x66>
    {
      if (currentDigitIndex > 0)
 8000982:	220f      	movs	r2, #15
 8000984:	18bb      	adds	r3, r7, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d065      	beq.n	8000a58 <SEG_LCD_WriteString+0x124>
      {
        currentDots[currentDigitIndex - 1] = 1;
 800098c:	18bb      	adds	r3, r7, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3b01      	subs	r3, #1
 8000992:	4a68      	ldr	r2, [pc, #416]	; (8000b34 <SEG_LCD_WriteString+0x200>)
 8000994:	2101      	movs	r1, #1
 8000996:	54d1      	strb	r1, [r2, r3]
 8000998:	e05e      	b.n	8000a58 <SEG_LCD_WriteString+0x124>
      }
    }
    else
    {
      if ((*str >= ASCII_NUMBER_FIRST_CODE) && (*str <= ASCII_NUMBER_LAST_CODE))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b2f      	cmp	r3, #47	; 0x2f
 80009a0:	d918      	bls.n	80009d4 <SEG_LCD_WriteString+0xa0>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b39      	cmp	r3, #57	; 0x39
 80009a8:	d814      	bhi.n	80009d4 <SEG_LCD_WriteString+0xa0>
      {
        uint8_t currentCharacterIndex = (*str - ASCII_NUMBER_FIRST_CODE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	2109      	movs	r1, #9
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	3a30      	subs	r2, #48	; 0x30
 80009b4:	701a      	strb	r2, [r3, #0]
        currentCharacters[currentDigitIndex] = charactersTable[currentCharacterIndex];
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	200f      	movs	r0, #15
 80009bc:	183b      	adds	r3, r7, r0
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	495d      	ldr	r1, [pc, #372]	; (8000b38 <SEG_LCD_WriteString+0x204>)
 80009c2:	5c89      	ldrb	r1, [r1, r2]
 80009c4:	4a5a      	ldr	r2, [pc, #360]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 80009c6:	54d1      	strb	r1, [r2, r3]
        currentDigitIndex++;
 80009c8:	183b      	adds	r3, r7, r0
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	183b      	adds	r3, r7, r0
 80009ce:	3201      	adds	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
      {
 80009d2:	e041      	b.n	8000a58 <SEG_LCD_WriteString+0x124>
      }
      else
      {
        uint8_t found = 0;
 80009d4:	230d      	movs	r3, #13
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < EXTRA_CHARACTERS_NUM; i++)
 80009dc:	230c      	movs	r3, #12
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e02c      	b.n	8000a40 <SEG_LCD_WriteString+0x10c>
        {
          if (*str == extraCharacters[i].asciiCode)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	200c      	movs	r0, #12
 80009ec:	183b      	adds	r3, r7, r0
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <SEG_LCD_WriteString+0x208>)
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	5ccb      	ldrb	r3, [r1, r3]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d11c      	bne.n	8000a34 <SEG_LCD_WriteString+0x100>
          {
            uint8_t currentCharacterIndex = extraCharacters[i].symbolsTableOffset;
 80009fa:	183b      	adds	r3, r7, r0
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	2008      	movs	r0, #8
 8000a00:	183b      	adds	r3, r7, r0
 8000a02:	494e      	ldr	r1, [pc, #312]	; (8000b3c <SEG_LCD_WriteString+0x208>)
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	188a      	adds	r2, r1, r2
 8000a08:	3201      	adds	r2, #1
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	701a      	strb	r2, [r3, #0]
            currentCharacters[currentDigitIndex] = charactersTable[currentCharacterIndex];
 8000a0e:	183b      	adds	r3, r7, r0
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	200f      	movs	r0, #15
 8000a14:	183b      	adds	r3, r7, r0
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4947      	ldr	r1, [pc, #284]	; (8000b38 <SEG_LCD_WriteString+0x204>)
 8000a1a:	5c89      	ldrb	r1, [r1, r2]
 8000a1c:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 8000a1e:	54d1      	strb	r1, [r2, r3]
            found = 1;
 8000a20:	230d      	movs	r3, #13
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
            currentDigitIndex++;
 8000a28:	183b      	adds	r3, r7, r0
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	183b      	adds	r3, r7, r0
 8000a2e:	3201      	adds	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
            break;
 8000a32:	e00a      	b.n	8000a4a <SEG_LCD_WriteString+0x116>
        for (uint8_t i = 0; i < EXTRA_CHARACTERS_NUM; i++)
 8000a34:	210c      	movs	r1, #12
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	3201      	adds	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	230c      	movs	r3, #12
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d9cd      	bls.n	80009e6 <SEG_LCD_WriteString+0xb2>
          }
        }
        if (found == 0)
 8000a4a:	230d      	movs	r3, #13
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <SEG_LCD_WriteString+0x124>
        {
          return SEG_LCD_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e067      	b.n	8000b28 <SEG_LCD_WriteString+0x1f4>
        }
      }
    }
    if (currentDigitIndex == DIGITS_NUM)
 8000a58:	230f      	movs	r3, #15
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d007      	beq.n	8000a72 <SEG_LCD_WriteString+0x13e>
    {
      break;
    }
    str++;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d184      	bne.n	800097a <SEG_LCD_WriteString+0x46>
 8000a70:	e000      	b.n	8000a74 <SEG_LCD_WriteString+0x140>
      break;
 8000a72:	46c0      	nop			; (mov r8, r8)
  }
  if (currentDigitIndex < DIGITS_NUM)
 8000a74:	220f      	movs	r2, #15
 8000a76:	18bb      	adds	r3, r7, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d853      	bhi.n	8000b26 <SEG_LCD_WriteString+0x1f2>
  {
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 8000a7e:	18bb      	adds	r3, r7, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	230b      	movs	r3, #11
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e027      	b.n	8000ade <SEG_LCD_WriteString+0x1aa>
    {
      currentCharacters[i + (DIGITS_NUM - currentDigitIndex)] = currentCharacters[i];
 8000a8e:	240b      	movs	r4, #11
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	569a      	ldrsb	r2, [r3, r2]
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2100      	movs	r1, #0
 8000a9a:	5659      	ldrsb	r1, [r3, r1]
 8000a9c:	250f      	movs	r5, #15
 8000a9e:	197b      	adds	r3, r7, r5
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	1ac3      	subs	r3, r0, r3
 8000aa6:	18cb      	adds	r3, r1, r3
 8000aa8:	4921      	ldr	r1, [pc, #132]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 8000aaa:	5c89      	ldrb	r1, [r1, r2]
 8000aac:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 8000aae:	54d1      	strb	r1, [r2, r3]
      currentDots[i + (DIGITS_NUM - currentDigitIndex)] = currentDots[i];
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	569a      	ldrsb	r2, [r3, r2]
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5659      	ldrsb	r1, [r3, r1]
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	1ac3      	subs	r3, r0, r3
 8000ac4:	18cb      	adds	r3, r1, r3
 8000ac6:	491b      	ldr	r1, [pc, #108]	; (8000b34 <SEG_LCD_WriteString+0x200>)
 8000ac8:	5c89      	ldrb	r1, [r1, r2]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <SEG_LCD_WriteString+0x200>)
 8000acc:	54d1      	strb	r1, [r2, r3]
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	230b      	movs	r3, #11
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae6:	d9d2      	bls.n	8000a8e <SEG_LCD_WriteString+0x15a>
    }
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 8000ae8:	230a      	movs	r3, #10
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e00f      	b.n	8000b12 <SEG_LCD_WriteString+0x1de>
    {
      currentCharacters[i] = 0x00;
 8000af2:	200a      	movs	r0, #10
 8000af4:	183b      	adds	r3, r7, r0
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <SEG_LCD_WriteString+0x1fc>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	54d1      	strb	r1, [r2, r3]
      currentDots[i] = 0;
 8000afe:	183b      	adds	r3, r7, r0
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <SEG_LCD_WriteString+0x200>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	3201      	adds	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	230a      	movs	r3, #10
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2102      	movs	r1, #2
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbe5      	blt.n	8000af2 <SEG_LCD_WriteString+0x1be>
    }
  }
  return SEG_LCD_OK;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b30:	200000f8 	.word	0x200000f8
 8000b34:	200000fc 	.word	0x200000fc
 8000b38:	20000048 	.word	0x20000048
 8000b3c:	20000054 	.word	0x20000054

08000b40 <SEG_LCD_WriteNumber>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteNumber(uint32_t number)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  char temp[DIGITS_NUM+2];
  snprintf(temp, DIGITS_NUM+2, "%d", number);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <SEG_LCD_WriteNumber+0x28>)
 8000b4c:	240c      	movs	r4, #12
 8000b4e:	1938      	adds	r0, r7, r4
 8000b50:	2104      	movs	r1, #4
 8000b52:	f002 fa43 	bl	8002fdc <sniprintf>



  SEG_LCD_WriteString(temp);
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff feeb 	bl	8000934 <SEG_LCD_WriteString>

  return SEG_LCD_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b005      	add	sp, #20
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	08003868 	.word	0x08003868

08000b6c <SetOutput>:
/*----------------------------------------------------------------------------*/
static void SetOutput(McuPin output, uint8_t state)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	2408      	movs	r4, #8
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	6018      	str	r0, [r3, #0]
 8000b78:	6059      	str	r1, [r3, #4]
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(output.port, output.pin, (GPIO_PinState)state);
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	8899      	ldrh	r1, [r3, #4]
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	f001 f948 	bl	8001e20 <HAL_GPIO_WritePin>
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b005      	add	sp, #20
 8000b96:	bd90      	pop	{r4, r7, pc}

08000b98 <SetSegmentPins>:
/*----------------------------------------------------------------------------*/
static void SetSegmentPins(uint8_t characterCode)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < SEGMENTS_NUM; i++)
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e02c      	b.n	8000c08 <SetSegmentPins+0x70>
  {
    uint8_t bit = (characterCode >> i) & 0x01;
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	183b      	adds	r3, r7, r0
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	411a      	asrs	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	240e      	movs	r4, #14
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
    if (bit == 1)
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10a      	bne.n	8000be6 <SetSegmentPins+0x4e>
    {
      SetOutput(segmentPins[i], SEGMENT_PIN_ACTIVE);
 8000bd0:	183b      	adds	r3, r7, r0
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4911      	ldr	r1, [pc, #68]	; (8000c1c <SetSegmentPins+0x84>)
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	5858      	ldr	r0, [r3, r1]
 8000bdc:	18cb      	adds	r3, r1, r3
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	f7ff ffc4 	bl	8000b6c <SetOutput>
 8000be4:	e00a      	b.n	8000bfc <SetSegmentPins+0x64>
    }
    else
    {
      SetOutput(segmentPins[i], !SEGMENT_PIN_ACTIVE);
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	490b      	ldr	r1, [pc, #44]	; (8000c1c <SetSegmentPins+0x84>)
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	5858      	ldr	r0, [r3, r1]
 8000bf4:	18cb      	adds	r3, r1, r3
 8000bf6:	6859      	ldr	r1, [r3, #4]
 8000bf8:	f7ff ffb8 	bl	8000b6c <SetOutput>
  for (uint8_t i = 0; i < SEGMENTS_NUM; i++)
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	3201      	adds	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d9cd      	bls.n	8000bae <SetSegmentPins+0x16>
    }
  }
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b005      	add	sp, #20
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	20000010 	.word	0x20000010

08000c20 <SEG_LCD_Process>:
/*----------------------------------------------------------------------------*/
void SEG_LCD_Process()
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  // выбор земленного пина (на землю)
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	e00e      	b.n	8000c4c <SEG_LCD_Process+0x2c>
  {
    SetOutput(digitPins[i], !DIGIT_PIN_ACTIVE);
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	491a      	ldr	r1, [pc, #104]	; (8000c9c <SEG_LCD_Process+0x7c>)
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	2201      	movs	r2, #1
 8000c38:	5858      	ldr	r0, [r3, r1]
 8000c3a:	18cb      	adds	r3, r1, r3
 8000c3c:	6859      	ldr	r1, [r3, #4]
 8000c3e:	f7ff ff95 	bl	8000b6c <SetOutput>
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	3201      	adds	r2, #1
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d9ec      	bls.n	8000c2e <SEG_LCD_Process+0xe>
  }

  // выбор значения на индикаторе
  SetSegmentPins(currentCharacters[currentDigitIndex]);
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SEG_LCD_Process+0x84>)
 8000c5c:	5c9b      	ldrb	r3, [r3, r2]
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff9a 	bl	8000b98 <SetSegmentPins>
  else
  {
    SetOutput(dotPin, !SEGMENT_PIN_ACTIVE);
  }*/

  SetOutput(digitPins[currentDigitIndex], DIGIT_PIN_ACTIVE);
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	490c      	ldr	r1, [pc, #48]	; (8000c9c <SEG_LCD_Process+0x7c>)
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	5858      	ldr	r0, [r3, r1]
 8000c70:	18cb      	adds	r3, r1, r3
 8000c72:	6859      	ldr	r1, [r3, #4]
 8000c74:	f7ff ff7a 	bl	8000b6c <SetOutput>
  currentDigitIndex++;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c82:	701a      	strb	r2, [r3, #0]
  if (currentDigitIndex == DIGITS_NUM)
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d102      	bne.n	8000c92 <SEG_LCD_Process+0x72>
  {
    currentDigitIndex = 0;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SEG_LCD_Process+0x80>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  }
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200000fe 	.word	0x200000fe
 8000ca4:	200000f8 	.word	0x200000f8

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x44>)
 8000cb0:	699a      	ldr	r2, [r3, #24]
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_MspInit+0x44>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	619a      	str	r2, [r3, #24]
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x44>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x44>)
 8000cc8:	69da      	ldr	r2, [r3, #28]
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_MspInit+0x44>)
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	0549      	lsls	r1, r1, #21
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	61da      	str	r2, [r3, #28]
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_MspInit+0x44>)
 8000cd6:	69da      	ldr	r2, [r3, #28]
 8000cd8:	2380      	movs	r3, #128	; 0x80
 8000cda:	055b      	lsls	r3, r3, #21
 8000cdc:	4013      	ands	r3, r2
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	2414      	movs	r4, #20
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2314      	movs	r3, #20
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f002 f962 	bl	8002fcc <memset>
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0x80>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12a      	bne.n	8000d68 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d14:	699a      	ldr	r2, [r3, #24]
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0089      	lsls	r1, r1, #2
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	619a      	str	r2, [r3, #24]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	02c9      	lsls	r1, r1, #11
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_ADC_MspInit+0x84>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	02db      	lsls	r3, r3, #11
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2203      	movs	r2, #3
 8000d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_ADC_MspInit+0x88>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f000 fef4 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b00b      	add	sp, #44	; 0x2c
 8000d6e:	bd90      	pop	{r4, r7, pc}
 8000d70:	40012400 	.word	0x40012400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <HAL_TIM_Base_MspInit+0x44>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d113      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d94:	2102      	movs	r1, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	61da      	str	r2, [r3, #28]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_TIM_Base_MspInit+0x48>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2010      	movs	r0, #16
 8000dac:	f000 fe9e 	bl	8001aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000db0:	2010      	movs	r0, #16
 8000db2:	f000 feb0 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f920 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  // проверка значения
  if (!TimerFlag)
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <SysTick_Handler+0x70>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12c      	bne.n	8000e52 <SysTick_Handler+0x6a>
  {
	  // Набор 16ти значений
	  if(CheckLEDsCounter <= ADC_Operations)
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <SysTick_Handler+0x74>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d811      	bhi.n	8000e24 <SysTick_Handler+0x3c>
	  {
		  // набор данных
		  LEDsFlag = 0;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <SysTick_Handler+0x78>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	801a      	strh	r2, [r3, #0]
		  SumValue += GlobalTempValue;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <SysTick_Handler+0x7c>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <SysTick_Handler+0x80>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <SysTick_Handler+0x7c>)
 8000e14:	801a      	strh	r2, [r3, #0]
		  CheckLEDsCounter++;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <SysTick_Handler+0x74>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <SysTick_Handler+0x74>)
 8000e20:	801a      	strh	r2, [r3, #0]

	  }
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	e016      	b.n	8000e52 <SysTick_Handler+0x6a>
		  LEDsFlag = 1;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <SysTick_Handler+0x78>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	801a      	strh	r2, [r3, #0]
		  if(CheckLEDsCounter <= 166) // ожидание 150мс между измерениями
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <SysTick_Handler+0x74>)
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	2ba6      	cmp	r3, #166	; 0xa6
 8000e30:	d806      	bhi.n	8000e40 <SysTick_Handler+0x58>
			  CheckLEDsCounter++;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <SysTick_Handler+0x74>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <SysTick_Handler+0x74>)
 8000e3c:	801a      	strh	r2, [r3, #0]
}
 8000e3e:	e008      	b.n	8000e52 <SysTick_Handler+0x6a>
			  SumValue = 0;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SysTick_Handler+0x7c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
			  LEDsFlag = 0;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SysTick_Handler+0x78>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	801a      	strh	r2, [r3, #0]
			  CheckLEDsCounter = 0;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <SysTick_Handler+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200000e8 	.word	0x200000e8
 8000e5c:	200000f2 	.word	0x200000f2
 8000e60:	200000ee 	.word	0x200000ee
 8000e64:	200000f0 	.word	0x200000f0
 8000e68:	200000ec 	.word	0x200000ec

08000e6c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f000 fff3 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 fff0 	bl	8001e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <TIM3_IRQHandler+0x40>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 fcea 	bl	8002864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (TimerFlag){
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <TIM3_IRQHandler+0x44>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d011      	beq.n	8000ebc <TIM3_IRQHandler+0x38>

	  _localCounter++;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000ea2:	801a      	strh	r2, [r3, #0]

	  if (_localCounter > 60) {
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	2b3c      	cmp	r3, #60	; 0x3c
 8000eaa:	d907      	bls.n	8000ebc <TIM3_IRQHandler+0x38>
		  TimerCounter = TimerCounter - 1;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <TIM3_IRQHandler+0x4c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <TIM3_IRQHandler+0x4c>)
 8000eb4:	601a      	str	r2, [r3, #0]
		  _localCounter = 0;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <TIM3_IRQHandler+0x48>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	801a      	strh	r2, [r3, #0]
	  }
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	20000190 	.word	0x20000190
 8000ec8:	200000e8 	.word	0x200000e8
 8000ecc:	20000100 	.word	0x20000100
 8000ed0:	20000058 	.word	0x20000058

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	18d3      	adds	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f002 f838 	bl	8002f78 <__errno>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	425b      	negs	r3, r3
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	18d2      	adds	r2, r2, r3
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b006      	add	sp, #24
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20001000 	.word	0x20001000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20000104 	.word	0x20000104
 8000f3c:	200001f0 	.word	0x200001f0

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f76:	f7ff ffe3 	bl	8000f40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f7a:	f002 f803 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f7e:	f7ff fa93 	bl	80004a8 <main>

08000f82 <LoopForever>:

LoopForever:
    b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000f90:	080038d8 	.word	0x080038d8
  ldr r2, =_sbss
 8000f94:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000f98:	200001f0 	.word	0x200001f0

08000f9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <HAL_Init+0x24>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_Init+0x24>)
 8000faa:	2110      	movs	r1, #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f809 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb6:	f7ff fe77 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_InitTick+0x5c>)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_InitTick+0x60>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	0019      	movs	r1, r3
 8000fda:	23fa      	movs	r3, #250	; 0xfa
 8000fdc:	0098      	lsls	r0, r3, #2
 8000fde:	f7ff f89d 	bl	800011c <__udivsi3>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff f898 	bl	800011c <__udivsi3>
 8000fec:	0003      	movs	r3, r0
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fda1 	bl	8001b36 <HAL_SYSTICK_Config>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e00f      	b.n	800101c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d80b      	bhi.n	800101a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	2301      	movs	r3, #1
 8001006:	425b      	negs	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	0018      	movs	r0, r3
 800100c:	f000 fd6e 	bl	8001aec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_InitTick+0x64>)
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	2000005c 	.word	0x2000005c
 8001028:	20000064 	.word	0x20000064
 800102c:	20000060 	.word	0x20000060

08001030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	18d2      	adds	r2, r2, r3
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <HAL_IncTick+0x20>)
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	20000064 	.word	0x20000064
 8001050:	200001dc 	.word	0x200001dc

08001054 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <HAL_GetTick+0x10>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	200001dc 	.word	0x200001dc

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff fff0 	bl	8001054 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3301      	adds	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	001a      	movs	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	189b      	adds	r3, r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	f7ff ffe0 	bl	8001054 <HAL_GetTick>
 8001094:	0002      	movs	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b004      	add	sp, #16
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000064 	.word	0x20000064

080010b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	230f      	movs	r3, #15
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e125      	b.n	800131a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10a      	bne.n	80010ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2234      	movs	r2, #52	; 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fe02 	bl	8000cf0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	2210      	movs	r2, #16
 80010f2:	4013      	ands	r3, r2
 80010f4:	d000      	beq.n	80010f8 <HAL_ADC_Init+0x48>
 80010f6:	e103      	b.n	8001300 <HAL_ADC_Init+0x250>
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d000      	beq.n	8001104 <HAL_ADC_Init+0x54>
 8001102:	e0fd      	b.n	8001300 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800110e:	d000      	beq.n	8001112 <HAL_ADC_Init+0x62>
 8001110:	e0f6      	b.n	8001300 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	4a83      	ldr	r2, [pc, #524]	; (8001324 <HAL_ADC_Init+0x274>)
 8001118:	4013      	ands	r3, r2
 800111a:	2202      	movs	r2, #2
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
 800112c:	2b01      	cmp	r3, #1
 800112e:	d112      	bne.n	8001156 <HAL_ADC_Init+0xa6>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2201      	movs	r2, #1
 8001138:	4013      	ands	r3, r2
 800113a:	2b01      	cmp	r3, #1
 800113c:	d009      	beq.n	8001152 <HAL_ADC_Init+0xa2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	401a      	ands	r2, r3
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	429a      	cmp	r2, r3
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Init+0xa6>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_ADC_Init+0xa8>
 8001156:	2300      	movs	r3, #0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d116      	bne.n	800118a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2218      	movs	r2, #24
 8001164:	4393      	bics	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	0899      	lsrs	r1, r3, #2
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4964      	ldr	r1, [pc, #400]	; (8001328 <HAL_ADC_Init+0x278>)
 8001196:	400a      	ands	r2, r1
 8001198:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e1b      	ldrb	r3, [r3, #24]
 800119e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e5b      	ldrb	r3, [r3, #25]
 80011a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7e9b      	ldrb	r3, [r3, #26]
 80011ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80011ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d002      	beq.n	80011be <HAL_ADC_Init+0x10e>
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	e000      	b.n	80011c0 <HAL_ADC_Init+0x110>
 80011be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80011c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_Init+0x124>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e000      	b.n	80011d6 <HAL_ADC_Init+0x126>
 80011d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80011d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2124      	movs	r1, #36	; 0x24
 80011dc:	5c5b      	ldrb	r3, [r3, r1]
 80011de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80011e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7edb      	ldrb	r3, [r3, #27]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d115      	bne.n	800121c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7e9b      	ldrb	r3, [r3, #26]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	0252      	lsls	r2, r2, #9
 80011fe:	4313      	orrs	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	e00b      	b.n	800121c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	2220      	movs	r2, #32
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	2201      	movs	r2, #1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69da      	ldr	r2, [r3, #28]
 8001220:	23c2      	movs	r3, #194	; 0xc2
 8001222:	33ff      	adds	r3, #255	; 0xff
 8001224:	429a      	cmp	r2, r3
 8001226:	d007      	beq.n	8001238 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001230:	4313      	orrs	r3, r2
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	4313      	orrs	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68d9      	ldr	r1, [r3, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	430a      	orrs	r2, r1
 8001246:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	055b      	lsls	r3, r3, #21
 8001250:	429a      	cmp	r2, r3
 8001252:	d01b      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d017      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001260:	2b02      	cmp	r3, #2
 8001262:	d013      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b03      	cmp	r3, #3
 800126a:	d00f      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00b      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	2b05      	cmp	r3, #5
 800127a:	d007      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	2b06      	cmp	r3, #6
 8001282:	d003      	beq.n	800128c <HAL_ADC_Init+0x1dc>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b07      	cmp	r3, #7
 800128a:	d112      	bne.n	80012b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2107      	movs	r1, #7
 8001298:	438a      	bics	r2, r1
 800129a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6959      	ldr	r1, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	2207      	movs	r2, #7
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a1c      	ldr	r2, [pc, #112]	; (800132c <HAL_ADC_Init+0x27c>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10b      	bne.n	80012da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012cc:	2203      	movs	r2, #3
 80012ce:	4393      	bics	r3, r2
 80012d0:	2201      	movs	r2, #1
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012d8:	e01c      	b.n	8001314 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	2212      	movs	r2, #18
 80012e0:	4393      	bics	r3, r2
 80012e2:	2210      	movs	r2, #16
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ee:	2201      	movs	r2, #1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012fe:	e009      	b.n	8001314 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001304:	2210      	movs	r2, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001314:	230f      	movs	r3, #15
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	fffffefd 	.word	0xfffffefd
 8001328:	fffe0219 	.word	0xfffe0219
 800132c:	833fffe7 	.word	0x833fffe7

08001330 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2204      	movs	r2, #4
 8001348:	4013      	ands	r3, r2
 800134a:	d138      	bne.n	80013be <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2234      	movs	r2, #52	; 0x34
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_ADC_Start+0x2a>
 8001356:	2302      	movs	r3, #2
 8001358:	e038      	b.n	80013cc <HAL_ADC_Start+0x9c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2234      	movs	r2, #52	; 0x34
 800135e:	2101      	movs	r1, #1
 8001360:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d007      	beq.n	800137a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800136a:	230f      	movs	r3, #15
 800136c:	18fc      	adds	r4, r7, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	0018      	movs	r0, r3
 8001372:	f000 f9e3 	bl	800173c <ADC_Enable>
 8001376:	0003      	movs	r3, r0
 8001378:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800137a:	230f      	movs	r3, #15
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d120      	bne.n	80013c6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_ADC_Start+0xa4>)
 800138a:	4013      	ands	r3, r2
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0052      	lsls	r2, r2, #1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2234      	movs	r2, #52	; 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	221c      	movs	r2, #28
 80013aa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2104      	movs	r1, #4
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	e003      	b.n	80013c6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013be:	230f      	movs	r3, #15
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	2202      	movs	r2, #2
 80013c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013c6:	230f      	movs	r3, #15
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b005      	add	sp, #20
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	fffff0fe 	.word	0xfffff0fe

080013d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d102      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013ea:	2308      	movs	r3, #8
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e014      	b.n	800141a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10b      	bne.n	8001416 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	2220      	movs	r2, #32
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e071      	b.n	80014fa <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001416:	230c      	movs	r3, #12
 8001418:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800141a:	f7ff fe1b 	bl	8001054 <HAL_GetTick>
 800141e:	0003      	movs	r3, r0
 8001420:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001422:	e01f      	b.n	8001464 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	d01c      	beq.n	8001464 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_ADC_PollForConversion+0x68>
 8001430:	f7ff fe10 	bl	8001054 <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d211      	bcs.n	8001464 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	2204      	movs	r2, #4
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2234      	movs	r2, #52	; 0x34
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e04a      	b.n	80014fa <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	d0d9      	beq.n	8001424 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	23c0      	movs	r3, #192	; 0xc0
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4013      	ands	r3, r2
 800148a:	d12d      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001490:	2b00      	cmp	r3, #0
 8001492:	d129      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2208      	movs	r2, #8
 800149c:	4013      	ands	r3, r2
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d122      	bne.n	80014e8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2204      	movs	r2, #4
 80014aa:	4013      	ands	r3, r2
 80014ac:	d110      	bne.n	80014d0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	210c      	movs	r1, #12
 80014ba:	438a      	bics	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_ADC_PollForConversion+0x12c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	2201      	movs	r2, #1
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	639a      	str	r2, [r3, #56]	; 0x38
 80014ce:	e00b      	b.n	80014e8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	2220      	movs	r2, #32
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	2201      	movs	r2, #1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d103      	bne.n	80014f8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	220c      	movs	r2, #12
 80014f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b004      	add	sp, #16
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	fffffefe 	.word	0xfffffefe

08001508 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152a:	230f      	movs	r3, #15
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	055b      	lsls	r3, r3, #21
 800153e:	429a      	cmp	r2, r3
 8001540:	d011      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x46>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00d      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x46>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	2b02      	cmp	r3, #2
 8001550:	d009      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x46>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	2b03      	cmp	r3, #3
 8001558:	d005      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x46>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	2b04      	cmp	r3, #4
 8001560:	d001      	beq.n	8001566 <HAL_ADC_ConfigChannel+0x46>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2234      	movs	r2, #52	; 0x34
 800156a:	5c9b      	ldrb	r3, [r3, r2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x54>
 8001570:	2302      	movs	r3, #2
 8001572:	e0d0      	b.n	8001716 <HAL_ADC_ConfigChannel+0x1f6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2234      	movs	r2, #52	; 0x34
 8001578:	2101      	movs	r1, #1
 800157a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2204      	movs	r2, #4
 8001584:	4013      	ands	r3, r2
 8001586:	d000      	beq.n	800158a <HAL_ADC_ConfigChannel+0x6a>
 8001588:	e0b4      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a64      	ldr	r2, [pc, #400]	; (8001720 <HAL_ADC_ConfigChannel+0x200>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d100      	bne.n	8001596 <HAL_ADC_ConfigChannel+0x76>
 8001594:	e082      	b.n	800169c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	409a      	lsls	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	055b      	lsls	r3, r3, #21
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d037      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d033      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d02f      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d02b      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d027      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d023      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d01f      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	d01b      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2107      	movs	r1, #7
 80015fc:	400b      	ands	r3, r1
 80015fe:	429a      	cmp	r2, r3
 8001600:	d012      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2107      	movs	r1, #7
 800160e:	438a      	bics	r2, r1
 8001610:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6959      	ldr	r1, [r3, #20]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2207      	movs	r2, #7
 800161e:	401a      	ands	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d007      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x120>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b11      	cmp	r3, #17
 8001636:	d003      	beq.n	8001640 <HAL_ADC_ConfigChannel+0x120>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b12      	cmp	r3, #18
 800163e:	d163      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_ADC_ConfigChannel+0x204>)
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d009      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x140>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b11      	cmp	r3, #17
 8001652:	d102      	bne.n	800165a <HAL_ADC_ConfigChannel+0x13a>
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	03db      	lsls	r3, r3, #15
 8001658:	e004      	b.n	8001664 <HAL_ADC_ConfigChannel+0x144>
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	045b      	lsls	r3, r3, #17
 800165e:	e001      	b.n	8001664 <HAL_ADC_ConfigChannel+0x144>
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <HAL_ADC_ConfigChannel+0x204>)
 8001666:	430b      	orrs	r3, r1
 8001668:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d14a      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_ADC_ConfigChannel+0x208>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	492d      	ldr	r1, [pc, #180]	; (800172c <HAL_ADC_ConfigChannel+0x20c>)
 8001678:	0018      	movs	r0, r3
 800167a:	f7fe fd4f 	bl	800011c <__udivsi3>
 800167e:	0003      	movs	r3, r0
 8001680:	001a      	movs	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	189b      	adds	r3, r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800168c:	e002      	b.n	8001694 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3b01      	subs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f9      	bne.n	800168e <HAL_ADC_ConfigChannel+0x16e>
 800169a:	e035      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	4099      	lsls	r1, r3
 80016aa:	000b      	movs	r3, r1
 80016ac:	43d9      	mvns	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	400a      	ands	r2, r1
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d007      	beq.n	80016ce <HAL_ADC_ConfigChannel+0x1ae>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b11      	cmp	r3, #17
 80016c4:	d003      	beq.n	80016ce <HAL_ADC_ConfigChannel+0x1ae>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d11c      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_ADC_ConfigChannel+0x204>)
 80016d0:	6819      	ldr	r1, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d007      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1ca>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x1c6>
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_ConfigChannel+0x210>)
 80016e4:	e002      	b.n	80016ec <HAL_ADC_ConfigChannel+0x1cc>
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_ADC_ConfigChannel+0x214>)
 80016e8:	e000      	b.n	80016ec <HAL_ADC_ConfigChannel+0x1cc>
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_ADC_ConfigChannel+0x218>)
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_ADC_ConfigChannel+0x204>)
 80016ee:	400b      	ands	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e009      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f8:	2220      	movs	r2, #32
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001700:	230f      	movs	r3, #15
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2234      	movs	r2, #52	; 0x34
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001710:	230f      	movs	r3, #15
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	781b      	ldrb	r3, [r3, #0]
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	00001001 	.word	0x00001001
 8001724:	40012708 	.word	0x40012708
 8001728:	2000005c 	.word	0x2000005c
 800172c:	000f4240 	.word	0x000f4240
 8001730:	ffbfffff 	.word	0xffbfffff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	ff7fffff 	.word	0xff7fffff

0800173c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2203      	movs	r2, #3
 8001754:	4013      	ands	r3, r2
 8001756:	2b01      	cmp	r3, #1
 8001758:	d112      	bne.n	8001780 <ADC_Enable+0x44>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	2b01      	cmp	r3, #1
 8001766:	d009      	beq.n	800177c <ADC_Enable+0x40>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	401a      	ands	r2, r3
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	429a      	cmp	r2, r3
 800177a:	d101      	bne.n	8001780 <ADC_Enable+0x44>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <ADC_Enable+0x46>
 8001780:	2300      	movs	r3, #0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d152      	bne.n	800182c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <ADC_Enable+0xfc>)
 800178e:	4013      	ands	r3, r2
 8001790:	d00d      	beq.n	80017ae <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	2210      	movs	r2, #16
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a2:	2201      	movs	r2, #1
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e03f      	b.n	800182e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <ADC_Enable+0x100>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	491f      	ldr	r1, [pc, #124]	; (8001840 <ADC_Enable+0x104>)
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7fe fca9 	bl	800011c <__udivsi3>
 80017ca:	0003      	movs	r3, r0
 80017cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ce:	e002      	b.n	80017d6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fc3a 	bl	8001054 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e4:	e01b      	b.n	800181e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e6:	f7ff fc35 	bl	8001054 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d914      	bls.n	800181e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d00d      	beq.n	800181e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	2210      	movs	r2, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001812:	2201      	movs	r2, #1
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e007      	b.n	800182e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d1dc      	bne.n	80017e6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	80000017 	.word	0x80000017
 800183c:	2000005c 	.word	0x2000005c
 8001840:	000f4240 	.word	0x000f4240

08001844 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2234      	movs	r2, #52	; 0x34
 8001860:	5c9b      	ldrb	r3, [r3, r2]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_ADCEx_Calibration_Start+0x26>
 8001866:	2302      	movs	r3, #2
 8001868:	e08d      	b.n	8001986 <HAL_ADCEx_Calibration_Start+0x142>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2234      	movs	r2, #52	; 0x34
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	2b01      	cmp	r3, #1
 800187e:	d112      	bne.n	80018a6 <HAL_ADCEx_Calibration_Start+0x62>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	4013      	ands	r3, r2
 800188a:	2b01      	cmp	r3, #1
 800188c:	d009      	beq.n	80018a2 <HAL_ADCEx_Calibration_Start+0x5e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	401a      	ands	r2, r3
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	429a      	cmp	r2, r3
 80018a0:	d101      	bne.n	80018a6 <HAL_ADCEx_Calibration_Start+0x62>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_ADCEx_Calibration_Start+0x64>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d15b      	bne.n	8001964 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	4a37      	ldr	r2, [pc, #220]	; (8001990 <HAL_ADCEx_Calibration_Start+0x14c>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	2202      	movs	r2, #2
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2103      	movs	r1, #3
 80018d4:	438a      	bics	r2, r1
 80018d6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	0609      	lsls	r1, r1, #24
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80018ea:	f7ff fbb3 	bl	8001054 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80018f2:	e01d      	b.n	8001930 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80018f4:	f7ff fbae 	bl	8001054 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d916      	bls.n	8001930 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	0fdb      	lsrs	r3, r3, #31
 800190a:	07da      	lsls	r2, r3, #31
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	061b      	lsls	r3, r3, #24
 8001910:	429a      	cmp	r2, r3
 8001912:	d10d      	bne.n	8001930 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	2212      	movs	r2, #18
 800191a:	4393      	bics	r3, r2
 800191c:	2210      	movs	r2, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e02a      	b.n	8001986 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0fdb      	lsrs	r3, r3, #31
 8001938:	07da      	lsls	r2, r3, #31
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	429a      	cmp	r2, r3
 8001940:	d0d8      	beq.n	80018f4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68d9      	ldr	r1, [r3, #12]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001956:	2203      	movs	r2, #3
 8001958:	4393      	bics	r3, r2
 800195a:	2201      	movs	r2, #1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
 8001962:	e009      	b.n	8001978 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	2220      	movs	r2, #32
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001970:	2317      	movs	r3, #23
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2234      	movs	r2, #52	; 0x34
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001980:	2317      	movs	r3, #23
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	781b      	ldrb	r3, [r3, #0]
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b006      	add	sp, #24
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	fffffefd 	.word	0xfffffefd

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	0002      	movs	r2, r0
 800199c:	1dfb      	adds	r3, r7, #7
 800199e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b7f      	cmp	r3, #127	; 0x7f
 80019a6:	d809      	bhi.n	80019bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	001a      	movs	r2, r3
 80019ae:	231f      	movs	r3, #31
 80019b0:	401a      	ands	r2, r3
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_EnableIRQ+0x30>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	4091      	lsls	r1, r2
 80019b8:	000a      	movs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
  }
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	0002      	movs	r2, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	1dfb      	adds	r3, r7, #7
 80019d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b7f      	cmp	r3, #127	; 0x7f
 80019dc:	d828      	bhi.n	8001a30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <__NVIC_SetPriority+0xd4>)
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	33c0      	adds	r3, #192	; 0xc0
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	589b      	ldr	r3, [r3, r2]
 80019ee:	1dfa      	adds	r2, r7, #7
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	0011      	movs	r1, r2
 80019f4:	2203      	movs	r2, #3
 80019f6:	400a      	ands	r2, r1
 80019f8:	00d2      	lsls	r2, r2, #3
 80019fa:	21ff      	movs	r1, #255	; 0xff
 80019fc:	4091      	lsls	r1, r2
 80019fe:	000a      	movs	r2, r1
 8001a00:	43d2      	mvns	r2, r2
 8001a02:	401a      	ands	r2, r3
 8001a04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	22ff      	movs	r2, #255	; 0xff
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	0018      	movs	r0, r3
 8001a14:	2303      	movs	r3, #3
 8001a16:	4003      	ands	r3, r0
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a1c:	481f      	ldr	r0, [pc, #124]	; (8001a9c <__NVIC_SetPriority+0xd4>)
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	430a      	orrs	r2, r1
 8001a28:	33c0      	adds	r3, #192	; 0xc0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a2e:	e031      	b.n	8001a94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <__NVIC_SetPriority+0xd8>)
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	0019      	movs	r1, r3
 8001a38:	230f      	movs	r3, #15
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	3b08      	subs	r3, #8
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3306      	adds	r3, #6
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	3304      	adds	r3, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1dfa      	adds	r2, r7, #7
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	0011      	movs	r1, r2
 8001a50:	2203      	movs	r2, #3
 8001a52:	400a      	ands	r2, r1
 8001a54:	00d2      	lsls	r2, r2, #3
 8001a56:	21ff      	movs	r1, #255	; 0xff
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	401a      	ands	r2, r3
 8001a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	019b      	lsls	r3, r3, #6
 8001a66:	22ff      	movs	r2, #255	; 0xff
 8001a68:	401a      	ands	r2, r3
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	2303      	movs	r3, #3
 8001a72:	4003      	ands	r3, r0
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a78:	4809      	ldr	r0, [pc, #36]	; (8001aa0 <__NVIC_SetPriority+0xd8>)
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	001c      	movs	r4, r3
 8001a80:	230f      	movs	r3, #15
 8001a82:	4023      	ands	r3, r4
 8001a84:	3b08      	subs	r3, #8
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	3306      	adds	r3, #6
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	18c3      	adds	r3, r0, r3
 8001a90:	3304      	adds	r3, #4
 8001a92:	601a      	str	r2, [r3, #0]
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd90      	pop	{r4, r7, pc}
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1e5a      	subs	r2, r3, #1
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	045b      	lsls	r3, r3, #17
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d301      	bcc.n	8001abc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e010      	b.n	8001ade <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <SysTick_Config+0x44>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	2103      	movs	r1, #3
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff ff7c 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x44>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x44>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	0018      	movs	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b002      	add	sp, #8
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	210f      	movs	r1, #15
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	1c02      	adds	r2, r0, #0
 8001afc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b22:	1dfb      	adds	r3, r7, #7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff ff33 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ffaf 	bl	8001aa4 <SysTick_Config>
 8001b46:	0003      	movs	r3, r0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b002      	add	sp, #8
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e149      	b.n	8001df4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4091      	lsls	r1, r2
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x28>
 8001b76:	e13a      	b.n	8001dee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d005      	beq.n	8001b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d130      	bne.n	8001bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	2201      	movs	r2, #1
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d017      	beq.n	8001c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d123      	bne.n	8001c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	58d3      	ldr	r3, [r2, r3]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	409a      	lsls	r2, r3
 8001c54:	0013      	movs	r3, r2
 8001c56:	43da      	mvns	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2107      	movs	r1, #7
 8001c66:	400b      	ands	r3, r1
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	08da      	lsrs	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	6939      	ldr	r1, [r7, #16]
 8001c80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d100      	bne.n	8001cc4 <HAL_GPIO_Init+0x174>
 8001cc2:	e094      	b.n	8001dee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc4:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
 8001cd0:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <HAL_GPIO_Init+0x2bc>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cdc:	4a4c      	ldr	r2, [pc, #304]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	589b      	ldr	r3, [r3, r2]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2203      	movs	r2, #3
 8001cee:	4013      	ands	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	2390      	movs	r3, #144	; 0x90
 8001d04:	05db      	lsls	r3, r3, #23
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1d6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_GPIO_Init+0x2c4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1d2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a40      	ldr	r2, [pc, #256]	; (8001e18 <HAL_GPIO_Init+0x2c8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1ce>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x1d8>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x1d8>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x1d8>
 8001d26:	2300      	movs	r3, #0
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_GPIO_Init+0x2c0>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	025b      	lsls	r3, r3, #9
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43da      	mvns	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	035b      	lsls	r3, r3, #13
 8001db2:	4013      	ands	r3, r2
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	039b      	lsls	r3, r3, #14
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_GPIO_Init+0x2cc>)
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	40da      	lsrs	r2, r3
 8001dfc:	1e13      	subs	r3, r2, #0
 8001dfe:	d000      	beq.n	8001e02 <HAL_GPIO_Init+0x2b2>
 8001e00:	e6ae      	b.n	8001b60 <HAL_GPIO_Init+0x10>
  } 
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b006      	add	sp, #24
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	48000800 	.word	0x48000800
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	0008      	movs	r0, r1
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	1cbb      	adds	r3, r7, #2
 8001e2e:	1c02      	adds	r2, r0, #0
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	1c7b      	adds	r3, r7, #1
 8001e34:	1c0a      	adds	r2, r1, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e38:	1c7b      	adds	r3, r7, #1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d004      	beq.n	8001e4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e40:	1cbb      	adds	r3, r7, #2
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e48:	e003      	b.n	8001e52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e4a:	1cbb      	adds	r3, r7, #2
 8001e4c:	881a      	ldrh	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	0002      	movs	r2, r0
 8001e64:	1dbb      	adds	r3, r7, #6
 8001e66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	1dba      	adds	r2, r7, #6
 8001e6e:	8812      	ldrh	r2, [r2, #0]
 8001e70:	4013      	ands	r3, r2
 8001e72:	d008      	beq.n	8001e86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e76:	1dba      	adds	r2, r7, #6
 8001e78:	8812      	ldrh	r2, [r2, #0]
 8001e7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe fae7 	bl	8000454 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e301      	b.n	80024aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x1e>
 8001eb0:	e08d      	b.n	8001fce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb2:	4bc3      	ldr	r3, [pc, #780]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d00e      	beq.n	8001edc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ebe:	4bc0      	ldr	r3, [pc, #768]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x64>
 8001eca:	4bbd      	ldr	r3, [pc, #756]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	025b      	lsls	r3, r3, #9
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4bb8      	ldr	r3, [pc, #736]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d100      	bne.n	8001eea <HAL_RCC_OscConfig+0x56>
 8001ee8:	e070      	b.n	8001fcc <HAL_RCC_OscConfig+0x138>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d000      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x60>
 8001ef2:	e06b      	b.n	8001fcc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e2d8      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x7c>
 8001f00:	4baf      	ldr	r3, [pc, #700]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4bae      	ldr	r3, [pc, #696]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	2180      	movs	r1, #128	; 0x80
 8001f08:	0249      	lsls	r1, r1, #9
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e02f      	b.n	8001f70 <HAL_RCC_OscConfig+0xdc>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x9e>
 8001f18:	4ba9      	ldr	r3, [pc, #676]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4ba8      	ldr	r3, [pc, #672]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	49a9      	ldr	r1, [pc, #676]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	4ba6      	ldr	r3, [pc, #664]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4ba5      	ldr	r3, [pc, #660]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f2a:	49a7      	ldr	r1, [pc, #668]	; (80021c8 <HAL_RCC_OscConfig+0x334>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e01e      	b.n	8001f70 <HAL_RCC_OscConfig+0xdc>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10e      	bne.n	8001f58 <HAL_RCC_OscConfig+0xc4>
 8001f3a:	4ba1      	ldr	r3, [pc, #644]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4ba0      	ldr	r3, [pc, #640]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	02c9      	lsls	r1, r1, #11
 8001f44:	430a      	orrs	r2, r1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	4b9d      	ldr	r3, [pc, #628]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b9c      	ldr	r3, [pc, #624]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0249      	lsls	r1, r1, #9
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xdc>
 8001f58:	4b99      	ldr	r3, [pc, #612]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b98      	ldr	r3, [pc, #608]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	4999      	ldr	r1, [pc, #612]	; (80021c4 <HAL_RCC_OscConfig+0x330>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	4b96      	ldr	r3, [pc, #600]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b95      	ldr	r3, [pc, #596]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	4997      	ldr	r1, [pc, #604]	; (80021c8 <HAL_RCC_OscConfig+0x334>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d014      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f86c 	bl	8001054 <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f82:	f7ff f867 	bl	8001054 <HAL_GetTick>
 8001f86:	0002      	movs	r2, r0
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e28a      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	4b8a      	ldr	r3, [pc, #552]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0xee>
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f857 	bl	8001054 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f852 	bl	8001054 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e275      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fbe:	4b80      	ldr	r3, [pc, #512]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x118>
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d100      	bne.n	8001fda <HAL_RCC_OscConfig+0x146>
 8001fd8:	e069      	b.n	80020ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	220c      	movs	r2, #12
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	220c      	movs	r2, #12
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d11c      	bne.n	800202a <HAL_RCC_OscConfig+0x196>
 8001ff0:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d116      	bne.n	800202a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x17e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e24b      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	22f8      	movs	r2, #248	; 0xf8
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00da      	lsls	r2, r3, #3
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002028:	e041      	b.n	80020ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d024      	beq.n	800207c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f809 	bl	8001054 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002048:	f7ff f804 	bl	8001054 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e227      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205a:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2202      	movs	r2, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d0f1      	beq.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002064:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	22f8      	movs	r2, #248	; 0xf8
 800206a:	4393      	bics	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00da      	lsls	r2, r3, #3
 8002074:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe ffe4 	bl	8001054 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002092:	f7fe ffdf 	bl	8001054 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e202      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d1f1      	bne.n	8002092 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	4013      	ands	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d019      	beq.n	80020f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7fe ffc2 	bl	8001054 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe ffbd 	bl	8001054 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1e0      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	2202      	movs	r2, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	d0f1      	beq.n	80020d6 <HAL_RCC_OscConfig+0x242>
 80020f2:	e018      	b.n	8002126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe ffa8 	bl	8001054 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210a:	f7fe ffa3 	bl	8001054 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1c6      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <HAL_RCC_OscConfig+0x29e>
 8002130:	e0b4      	b.n	800229c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	201f      	movs	r0, #31
 8002134:	183b      	adds	r3, r7, r0
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	055b      	lsls	r3, r3, #21
 8002142:	4013      	ands	r3, r2
 8002144:	d110      	bne.n	8002168 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	0549      	lsls	r1, r1, #21
 8002150:	430a      	orrs	r2, r1
 8002152:	61da      	str	r2, [r3, #28]
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002162:	183b      	adds	r3, r7, r0
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_OscConfig+0x338>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d11a      	bne.n	80021aa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_RCC_OscConfig+0x338>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_RCC_OscConfig+0x338>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0049      	lsls	r1, r1, #1
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe ff67 	bl	8001054 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe ff62 	bl	8001054 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e185      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x338>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4013      	ands	r3, r2
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10e      	bne.n	80021d0 <HAL_RCC_OscConfig+0x33c>
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	621a      	str	r2, [r3, #32]
 80021be:	e035      	b.n	800222c <HAL_RCC_OscConfig+0x398>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	fffeffff 	.word	0xfffeffff
 80021c8:	fffbffff 	.word	0xfffbffff
 80021cc:	40007000 	.word	0x40007000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x35e>
 80021d8:	4bb6      	ldr	r3, [pc, #728]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4bb5      	ldr	r3, [pc, #724]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	621a      	str	r2, [r3, #32]
 80021e4:	4bb3      	ldr	r3, [pc, #716]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	4bb2      	ldr	r3, [pc, #712]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80021ea:	2104      	movs	r1, #4
 80021ec:	438a      	bics	r2, r1
 80021ee:	621a      	str	r2, [r3, #32]
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x398>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x380>
 80021fa:	4bae      	ldr	r3, [pc, #696]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	4bad      	ldr	r3, [pc, #692]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	621a      	str	r2, [r3, #32]
 8002206:	4bab      	ldr	r3, [pc, #684]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	4baa      	ldr	r3, [pc, #680]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	621a      	str	r2, [r3, #32]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x398>
 8002214:	4ba7      	ldr	r3, [pc, #668]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800221a:	2101      	movs	r1, #1
 800221c:	438a      	bics	r2, r1
 800221e:	621a      	str	r2, [r3, #32]
 8002220:	4ba4      	ldr	r3, [pc, #656]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	4ba3      	ldr	r3, [pc, #652]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002226:	2104      	movs	r1, #4
 8002228:	438a      	bics	r2, r1
 800222a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d014      	beq.n	800225e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002234:	f7fe ff0e 	bl	8001054 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	e009      	b.n	8002252 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe ff09 	bl	8001054 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a9b      	ldr	r2, [pc, #620]	; (80024b8 <HAL_RCC_OscConfig+0x624>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e12b      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4b98      	ldr	r3, [pc, #608]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x3aa>
 800225c:	e013      	b.n	8002286 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7fe fef9 	bl	8001054 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	e009      	b.n	800227c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fef4 	bl	8001054 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4a91      	ldr	r2, [pc, #580]	; (80024b8 <HAL_RCC_OscConfig+0x624>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e116      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002286:	231f      	movs	r3, #31
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b88      	ldr	r3, [pc, #544]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002292:	69da      	ldr	r2, [r3, #28]
 8002294:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002296:	4989      	ldr	r1, [pc, #548]	; (80024bc <HAL_RCC_OscConfig+0x628>)
 8002298:	400a      	ands	r2, r1
 800229a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d063      	beq.n	800236e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d12a      	bne.n	8002304 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022ae:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b2:	4b80      	ldr	r3, [pc, #512]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022b4:	2104      	movs	r1, #4
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022ba:	4b7e      	ldr	r3, [pc, #504]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	4b7d      	ldr	r3, [pc, #500]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	430a      	orrs	r2, r1
 80022c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fec5 	bl	8001054 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022d0:	f7fe fec0 	bl	8001054 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0e3      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022e2:	4b74      	ldr	r3, [pc, #464]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022ec:	4b71      	ldr	r3, [pc, #452]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f0:	22f8      	movs	r2, #248	; 0xf8
 80022f2:	4393      	bics	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	00da      	lsls	r2, r3, #3
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
 8002302:	e034      	b.n	800236e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	3305      	adds	r3, #5
 800230a:	d111      	bne.n	8002330 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800230e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002312:	2104      	movs	r1, #4
 8002314:	438a      	bics	r2, r1
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	22f8      	movs	r2, #248	; 0xf8
 800231e:	4393      	bics	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	00da      	lsls	r2, r3, #3
 8002328:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800232a:	430a      	orrs	r2, r1
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002330:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002334:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002336:	2104      	movs	r1, #4
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800233c:	4b5d      	ldr	r3, [pc, #372]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800233e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002342:	2101      	movs	r1, #1
 8002344:	438a      	bics	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe fe84 	bl	8001054 <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002352:	f7fe fe7f 	bl	8001054 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0a2      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002364:	4b53      	ldr	r3, [pc, #332]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d1f1      	bne.n	8002352 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d100      	bne.n	8002378 <HAL_RCC_OscConfig+0x4e4>
 8002376:	e097      	b.n	80024a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002378:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	220c      	movs	r2, #12
 800237e:	4013      	ands	r3, r2
 8002380:	2b08      	cmp	r3, #8
 8002382:	d100      	bne.n	8002386 <HAL_RCC_OscConfig+0x4f2>
 8002384:	e06b      	b.n	800245e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d14c      	bne.n	8002428 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	4b49      	ldr	r3, [pc, #292]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002394:	494a      	ldr	r1, [pc, #296]	; (80024c0 <HAL_RCC_OscConfig+0x62c>)
 8002396:	400a      	ands	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fe5b 	bl	8001054 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fe56 	bl	8001054 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e079      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	049b      	lsls	r3, r3, #18
 80023be:	4013      	ands	r3, r2
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	220f      	movs	r2, #15
 80023c8:	4393      	bics	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_RCC_OscConfig+0x630>)
 80023dc:	4013      	ands	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	431a      	orrs	r2, r3
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0449      	lsls	r1, r1, #17
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7fe fe29 	bl	8001054 <HAL_GetTick>
 8002402:	0003      	movs	r3, r0
 8002404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fe24 	bl	8001054 <HAL_GetTick>
 800240c:	0002      	movs	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e047      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	049b      	lsls	r3, r3, #18
 8002422:	4013      	ands	r3, r2
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x574>
 8002426:	e03f      	b.n	80024a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800242e:	4924      	ldr	r1, [pc, #144]	; (80024c0 <HAL_RCC_OscConfig+0x62c>)
 8002430:	400a      	ands	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fe0e 	bl	8001054 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fe09 	bl	8001054 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e02c      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	049b      	lsls	r3, r3, #18
 8002458:	4013      	ands	r3, r2
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x5aa>
 800245c:	e024      	b.n	80024a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e01f      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_RCC_OscConfig+0x620>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	429a      	cmp	r2, r3
 8002484:	d10e      	bne.n	80024a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	220f      	movs	r2, #15
 800248a:	401a      	ands	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	23f0      	movs	r3, #240	; 0xf0
 8002498:	039b      	lsls	r3, r3, #14
 800249a:	401a      	ands	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b008      	add	sp, #32
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	00001388 	.word	0x00001388
 80024bc:	efffffff 	.word	0xefffffff
 80024c0:	feffffff 	.word	0xfeffffff
 80024c4:	ffc2ffff 	.word	0xffc2ffff

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b3      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b5b      	ldr	r3, [pc, #364]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d911      	bls.n	800250e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b58      	ldr	r3, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	4b55      	ldr	r3, [pc, #340]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	4013      	ands	r3, r2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d001      	beq.n	800250e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e09a      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2202      	movs	r2, #2
 8002514:	4013      	ands	r3, r2
 8002516:	d015      	beq.n	8002544 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	d006      	beq.n	8002530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002528:	21e0      	movs	r1, #224	; 0xe0
 800252a:	00c9      	lsls	r1, r1, #3
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	22f0      	movs	r2, #240	; 0xf0
 8002536:	4393      	bics	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b44      	ldr	r3, [pc, #272]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002540:	430a      	orrs	r2, r1
 8002542:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d040      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	029b      	lsls	r3, r3, #10
 800255e:	4013      	ands	r3, r2
 8002560:	d114      	bne.n	800258c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e06e      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b38      	ldr	r3, [pc, #224]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	049b      	lsls	r3, r3, #18
 8002576:	4013      	ands	r3, r2
 8002578:	d108      	bne.n	800258c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e062      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e05b      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	4393      	bics	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fd58 	bl	8001054 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a8:	e009      	b.n	80025be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fd53 	bl	8001054 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <HAL_RCC_ClockConfig+0x18c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e042      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	220c      	movs	r2, #12
 80025c4:	401a      	ands	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d1ec      	bne.n	80025aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d0:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d211      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f0:	4b16      	ldr	r3, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x184>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	4013      	ands	r3, r2
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e020      	b.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_RCC_ClockConfig+0x190>)
 8002612:	4013      	ands	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002620:	f000 f820 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002624:	0001      	movs	r1, r0
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x188>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	220f      	movs	r2, #15
 800262e:	4013      	ands	r3, r2
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x194>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	000a      	movs	r2, r1
 8002636:	40da      	lsrs	r2, r3
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x198>)
 800263a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fcc3 	bl	8000fc8 <HAL_InitTick>
  
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
 8002654:	00001388 	.word	0x00001388
 8002658:	fffff8ff 	.word	0xfffff8ff
 800265c:	0800388c 	.word	0x0800388c
 8002660:	2000005c 	.word	0x2000005c

08002664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b08f      	sub	sp, #60	; 0x3c
 8002668:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800266a:	2314      	movs	r3, #20
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002672:	c313      	stmia	r3!, {r0, r1, r4}
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4a29      	ldr	r2, [pc, #164]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 800267c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800267e:	c313      	stmia	r3!, {r0, r1, r4}
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
 800268c:	2300      	movs	r3, #0
 800268e:	637b      	str	r3, [r7, #52]	; 0x34
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a0:	220c      	movs	r2, #12
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d002      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x4a>
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d003      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x50>
 80026ac:	e02d      	b.n	800270a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026b2:	e02d      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	0c9b      	lsrs	r3, r3, #18
 80026b8:	220f      	movs	r2, #15
 80026ba:	4013      	ands	r3, r2
 80026bc:	2214      	movs	r2, #20
 80026be:	18ba      	adds	r2, r7, r2
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	220f      	movs	r2, #15
 80026ca:	4013      	ands	r3, r2
 80026cc:	1d3a      	adds	r2, r7, #4
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	025b      	lsls	r3, r3, #9
 80026d8:	4013      	ands	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026de:	4812      	ldr	r0, [pc, #72]	; (8002728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026e0:	f7fd fd1c 	bl	800011c <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	001a      	movs	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	4353      	muls	r3, r2
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	e009      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f2:	000a      	movs	r2, r1
 80026f4:	0152      	lsls	r2, r2, #5
 80026f6:	1a52      	subs	r2, r2, r1
 80026f8:	0193      	lsls	r3, r2, #6
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	185b      	adds	r3, r3, r1
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002708:	e002      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetSysClockFreq+0xc4>)
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800270e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b00f      	add	sp, #60	; 0x3c
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	0800386c 	.word	0x0800386c
 8002720:	0800387c 	.word	0x0800387c
 8002724:	40021000 	.word	0x40021000
 8002728:	007a1200 	.word	0x007a1200

0800272c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e042      	b.n	80027c4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	223d      	movs	r2, #61	; 0x3d
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	223c      	movs	r2, #60	; 0x3c
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7fe fb11 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	223d      	movs	r2, #61	; 0x3d
 800275e:	2102      	movs	r1, #2
 8002760:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	0019      	movs	r1, r3
 800276c:	0010      	movs	r0, r2
 800276e:	f000 fa8b 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2246      	movs	r2, #70	; 0x46
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223e      	movs	r2, #62	; 0x3e
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	2101      	movs	r1, #1
 8002788:	5499      	strb	r1, [r3, r2]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2240      	movs	r2, #64	; 0x40
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2241      	movs	r2, #65	; 0x41
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2242      	movs	r2, #66	; 0x42
 800279e:	2101      	movs	r1, #1
 80027a0:	5499      	strb	r1, [r3, r2]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2243      	movs	r2, #67	; 0x43
 80027a6:	2101      	movs	r1, #1
 80027a8:	5499      	strb	r1, [r3, r2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2244      	movs	r2, #68	; 0x44
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2245      	movs	r2, #69	; 0x45
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223d      	movs	r2, #61	; 0x3d
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	223d      	movs	r2, #61	; 0x3d
 80027d8:	5c9b      	ldrb	r3, [r3, r2]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e036      	b.n	8002852 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223d      	movs	r2, #61	; 0x3d
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2101      	movs	r1, #1
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a16      	ldr	r2, [pc, #88]	; (800285c <HAL_TIM_Base_Start_IT+0x90>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00a      	beq.n	800281c <HAL_TIM_Base_Start_IT+0x50>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	05db      	lsls	r3, r3, #23
 800280e:	429a      	cmp	r2, r3
 8002810:	d004      	beq.n	800281c <HAL_TIM_Base_Start_IT+0x50>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_TIM_Base_Start_IT+0x94>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2207      	movs	r2, #7
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b06      	cmp	r3, #6
 800282c:	d010      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283e:	e007      	b.n	8002850 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400

08002864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d124      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	4013      	ands	r3, r2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d11d      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2203      	movs	r2, #3
 800288e:	4252      	negs	r2, r2
 8002890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2203      	movs	r2, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	d004      	beq.n	80028ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 f9d6 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e007      	b.n	80028be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f9c9 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 f9d5 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2204      	movs	r2, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d125      	bne.n	800291e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d11e      	bne.n	800291e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2205      	movs	r2, #5
 80028e6:	4252      	negs	r2, r2
 80028e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	23c0      	movs	r3, #192	; 0xc0
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0018      	movs	r0, r3
 8002902:	f000 f9a9 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 8002906:	e007      	b.n	8002918 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f99c 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 f9a8 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2208      	movs	r2, #8
 8002926:	4013      	ands	r3, r2
 8002928:	2b08      	cmp	r3, #8
 800292a:	d124      	bne.n	8002976 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2208      	movs	r2, #8
 8002934:	4013      	ands	r3, r2
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11d      	bne.n	8002976 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2209      	movs	r2, #9
 8002940:	4252      	negs	r2, r2
 8002942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2204      	movs	r2, #4
 8002948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2203      	movs	r2, #3
 8002952:	4013      	ands	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f000 f97d 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 800295e:	e007      	b.n	8002970 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f970 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f97c 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2210      	movs	r2, #16
 800297e:	4013      	ands	r3, r2
 8002980:	2b10      	cmp	r3, #16
 8002982:	d125      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2210      	movs	r2, #16
 800298c:	4013      	ands	r3, r2
 800298e:	2b10      	cmp	r3, #16
 8002990:	d11e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2211      	movs	r2, #17
 8002998:	4252      	negs	r2, r2
 800299a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2208      	movs	r2, #8
 80029a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4013      	ands	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f950 	bl	8002c58 <HAL_TIM_IC_CaptureCallback>
 80029b8:	e007      	b.n	80029ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f943 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 f94f 	bl	8002c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d10f      	bne.n	80029fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d108      	bne.n	80029fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2202      	movs	r2, #2
 80029f2:	4252      	negs	r2, r2
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f91d 	bl	8002c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d10f      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b80      	cmp	r3, #128	; 0x80
 8002a18:	d108      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2281      	movs	r2, #129	; 0x81
 8002a20:	4252      	negs	r2, r2
 8002a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fa9e 	bl	8002f68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d10f      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d108      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2241      	movs	r2, #65	; 0x41
 8002a4e:	4252      	negs	r2, r2
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 f90f 	bl	8002c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2220      	movs	r2, #32
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b20      	cmp	r3, #32
 8002a66:	d10f      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d108      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2221      	movs	r2, #33	; 0x21
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fa68 	bl	8002f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	230f      	movs	r3, #15
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	; 0x3c
 8002aa6:	5c9b      	ldrb	r3, [r3, r2]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x20>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0bc      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x19a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223c      	movs	r2, #60	; 0x3c
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223d      	movs	r2, #61	; 0x3d
 8002abc:	2102      	movs	r1, #2
 8002abe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2277      	movs	r2, #119	; 0x77
 8002acc:	4393      	bics	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4a58      	ldr	r2, [pc, #352]	; (8002c34 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0192      	lsls	r2, r2, #6
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d040      	beq.n	8002b6e <HAL_TIM_ConfigClockSource+0xde>
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	0192      	lsls	r2, r2, #6
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d900      	bls.n	8002af6 <HAL_TIM_ConfigClockSource+0x66>
 8002af4:	e088      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	0152      	lsls	r2, r2, #5
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d100      	bne.n	8002b00 <HAL_TIM_ConfigClockSource+0x70>
 8002afe:	e088      	b.n	8002c12 <HAL_TIM_ConfigClockSource+0x182>
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0152      	lsls	r2, r2, #5
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d900      	bls.n	8002b0a <HAL_TIM_ConfigClockSource+0x7a>
 8002b08:	e07e      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b0a:	2b70      	cmp	r3, #112	; 0x70
 8002b0c:	d018      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0xb0>
 8002b0e:	d900      	bls.n	8002b12 <HAL_TIM_ConfigClockSource+0x82>
 8002b10:	e07a      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b12:	2b60      	cmp	r3, #96	; 0x60
 8002b14:	d04f      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x126>
 8002b16:	d900      	bls.n	8002b1a <HAL_TIM_ConfigClockSource+0x8a>
 8002b18:	e076      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b1a:	2b50      	cmp	r3, #80	; 0x50
 8002b1c:	d03b      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x106>
 8002b1e:	d900      	bls.n	8002b22 <HAL_TIM_ConfigClockSource+0x92>
 8002b20:	e072      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d057      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0x146>
 8002b26:	d900      	bls.n	8002b2a <HAL_TIM_ConfigClockSource+0x9a>
 8002b28:	e06e      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b2a:	2b30      	cmp	r3, #48	; 0x30
 8002b2c:	d063      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x166>
 8002b2e:	d86b      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d060      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x166>
 8002b34:	d868      	bhi.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d05d      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x166>
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d05b      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0x166>
 8002b3e:	e063      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f000 f98a 	bl	8002e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2277      	movs	r2, #119	; 0x77
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
      break;
 8002b6c:	e052      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f000 f973 	bl	8002e68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	01c9      	lsls	r1, r1, #7
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
      break;
 8002b94:	e03e      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	f000 f8e6 	bl	8002d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2150      	movs	r1, #80	; 0x50
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f940 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e02e      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	f000 f904 	bl	8002dd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2160      	movs	r1, #96	; 0x60
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 f930 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002bd4:	e01e      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	001a      	movs	r2, r3
 8002be4:	f000 f8c6 	bl	8002d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2140      	movs	r1, #64	; 0x40
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 f920 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002bf4:	e00e      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0019      	movs	r1, r3
 8002c00:	0010      	movs	r0, r2
 8002c02:	f000 f917 	bl	8002e34 <TIM_ITRx_SetConfig>
      break;
 8002c06:	e005      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
      break;
 8002c10:	e000      	b.n	8002c14 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c12:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	223d      	movs	r2, #61	; 0x3d
 8002c18:	2101      	movs	r1, #1
 8002c1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223c      	movs	r2, #60	; 0x3c
 8002c20:	2100      	movs	r1, #0
 8002c22:	5499      	strb	r1, [r3, r2]

  return status;
 8002c24:	230f      	movs	r3, #15
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	781b      	ldrb	r3, [r3, #0]
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	ffff00ff 	.word	0xffff00ff

08002c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b002      	add	sp, #8
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <TIM_Base_SetConfig+0xd4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d008      	beq.n	8002cb2 <TIM_Base_SetConfig+0x2a>
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d003      	beq.n	8002cb2 <TIM_Base_SetConfig+0x2a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_Base_SetConfig+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2270      	movs	r2, #112	; 0x70
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <TIM_Base_SetConfig+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d014      	beq.n	8002cf6 <TIM_Base_SetConfig+0x6e>
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d00f      	beq.n	8002cf6 <TIM_Base_SetConfig+0x6e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <TIM_Base_SetConfig+0xd8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00b      	beq.n	8002cf6 <TIM_Base_SetConfig+0x6e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <TIM_Base_SetConfig+0xdc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x6e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <TIM_Base_SetConfig+0xe0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x6e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <TIM_Base_SetConfig+0xe4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <TIM_Base_SetConfig+0xe8>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	001a      	movs	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <TIM_Base_SetConfig+0xd4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d007      	beq.n	8002d46 <TIM_Base_SetConfig+0xbe>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <TIM_Base_SetConfig+0xe0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_Base_SetConfig+0xbe>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <TIM_Base_SetConfig+0xe4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d103      	bne.n	8002d4e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40002000 	.word	0x40002000
 8002d68:	40014400 	.word	0x40014400
 8002d6c:	40014800 	.word	0x40014800
 8002d70:	fffffcff 	.word	0xfffffcff

08002d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	001a      	movs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	22f0      	movs	r2, #240	; 0xf0
 8002d9e:	4393      	bics	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	220a      	movs	r2, #10
 8002db0:	4393      	bics	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b006      	add	sp, #24
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	2210      	movs	r2, #16
 8002de2:	4393      	bics	r3, r2
 8002de4:	001a      	movs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <TIM_TI2_ConfigInputStage+0x60>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	031b      	lsls	r3, r3, #12
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	22a0      	movs	r2, #160	; 0xa0
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b006      	add	sp, #24
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	ffff0fff 	.word	0xffff0fff

08002e34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2270      	movs	r2, #112	; 0x70
 8002e48:	4393      	bics	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	2207      	movs	r2, #7
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <TIM_ETR_SetConfig+0x3c>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	021a      	lsls	r2, r3, #8
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b006      	add	sp, #24
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	ffff00ff 	.word	0xffff00ff

08002ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	223c      	movs	r2, #60	; 0x3c
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e042      	b.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	223c      	movs	r2, #60	; 0x3c
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	223d      	movs	r2, #61	; 0x3d
 8002ecc:	2102      	movs	r1, #2
 8002ece:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2270      	movs	r2, #112	; 0x70
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00a      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d004      	beq.n	8002f1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10c      	bne.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	4393      	bics	r3, r2
 8002f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	223d      	movs	r2, #61	; 0x3d
 8002f38:	2101      	movs	r1, #1
 8002f3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	223c      	movs	r2, #60	; 0x3c
 8002f40:	2100      	movs	r1, #0
 8002f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400

08002f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000068 	.word	0x20000068

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2600      	movs	r6, #0
 8002f88:	4d0c      	ldr	r5, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1b64      	subs	r4, r4, r5
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	2600      	movs	r6, #0
 8002f96:	f000 fc5b 	bl	8003850 <_init>
 8002f9a:	4d0a      	ldr	r5, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	00b3      	lsls	r3, r6, #2
 8002faa:	58eb      	ldr	r3, [r5, r3]
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	00b3      	lsls	r3, r6, #2
 8002fb4:	58eb      	ldr	r3, [r5, r3]
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	080038d0 	.word	0x080038d0
 8002fc0:	080038d0 	.word	0x080038d0
 8002fc4:	080038d0 	.word	0x080038d0
 8002fc8:	080038d4 	.word	0x080038d4

08002fcc <memset>:
 8002fcc:	0003      	movs	r3, r0
 8002fce:	1882      	adds	r2, r0, r2
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	7019      	strb	r1, [r3, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <sniprintf>:
 8002fdc:	b40c      	push	{r2, r3}
 8002fde:	b530      	push	{r4, r5, lr}
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <sniprintf+0x64>)
 8002fe2:	000c      	movs	r4, r1
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	b09d      	sub	sp, #116	; 0x74
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	da08      	bge.n	8002ffe <sniprintf+0x22>
 8002fec:	238b      	movs	r3, #139	; 0x8b
 8002fee:	2001      	movs	r0, #1
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	4240      	negs	r0, r0
 8002ff4:	b01d      	add	sp, #116	; 0x74
 8002ff6:	bc30      	pop	{r4, r5}
 8002ff8:	bc08      	pop	{r3}
 8002ffa:	b002      	add	sp, #8
 8002ffc:	4718      	bx	r3
 8002ffe:	2382      	movs	r3, #130	; 0x82
 8003000:	466a      	mov	r2, sp
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	8293      	strh	r3, [r2, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	9002      	str	r0, [sp, #8]
 800300a:	9006      	str	r0, [sp, #24]
 800300c:	4299      	cmp	r1, r3
 800300e:	d000      	beq.n	8003012 <sniprintf+0x36>
 8003010:	1e4b      	subs	r3, r1, #1
 8003012:	9304      	str	r3, [sp, #16]
 8003014:	9307      	str	r3, [sp, #28]
 8003016:	2301      	movs	r3, #1
 8003018:	466a      	mov	r2, sp
 800301a:	425b      	negs	r3, r3
 800301c:	82d3      	strh	r3, [r2, #22]
 800301e:	0028      	movs	r0, r5
 8003020:	ab21      	add	r3, sp, #132	; 0x84
 8003022:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003024:	a902      	add	r1, sp, #8
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	f000 f86e 	bl	8003108 <_svfiprintf_r>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	da01      	bge.n	8003034 <sniprintf+0x58>
 8003030:	238b      	movs	r3, #139	; 0x8b
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	2c00      	cmp	r4, #0
 8003036:	d0dd      	beq.n	8002ff4 <sniprintf+0x18>
 8003038:	2300      	movs	r3, #0
 800303a:	9a02      	ldr	r2, [sp, #8]
 800303c:	7013      	strb	r3, [r2, #0]
 800303e:	e7d9      	b.n	8002ff4 <sniprintf+0x18>
 8003040:	20000068 	.word	0x20000068

08003044 <__ssputs_r>:
 8003044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003046:	688e      	ldr	r6, [r1, #8]
 8003048:	b085      	sub	sp, #20
 800304a:	0007      	movs	r7, r0
 800304c:	000c      	movs	r4, r1
 800304e:	9203      	str	r2, [sp, #12]
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	429e      	cmp	r6, r3
 8003054:	d83c      	bhi.n	80030d0 <__ssputs_r+0x8c>
 8003056:	2390      	movs	r3, #144	; 0x90
 8003058:	898a      	ldrh	r2, [r1, #12]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	421a      	tst	r2, r3
 800305e:	d034      	beq.n	80030ca <__ssputs_r+0x86>
 8003060:	2503      	movs	r5, #3
 8003062:	6909      	ldr	r1, [r1, #16]
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	1a5b      	subs	r3, r3, r1
 8003068:	9302      	str	r3, [sp, #8]
 800306a:	6963      	ldr	r3, [r4, #20]
 800306c:	9802      	ldr	r0, [sp, #8]
 800306e:	435d      	muls	r5, r3
 8003070:	0feb      	lsrs	r3, r5, #31
 8003072:	195d      	adds	r5, r3, r5
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	106d      	asrs	r5, r5, #1
 8003078:	3301      	adds	r3, #1
 800307a:	181b      	adds	r3, r3, r0
 800307c:	42ab      	cmp	r3, r5
 800307e:	d900      	bls.n	8003082 <__ssputs_r+0x3e>
 8003080:	001d      	movs	r5, r3
 8003082:	0553      	lsls	r3, r2, #21
 8003084:	d532      	bpl.n	80030ec <__ssputs_r+0xa8>
 8003086:	0029      	movs	r1, r5
 8003088:	0038      	movs	r0, r7
 800308a:	f000 fb31 	bl	80036f0 <_malloc_r>
 800308e:	1e06      	subs	r6, r0, #0
 8003090:	d109      	bne.n	80030a6 <__ssputs_r+0x62>
 8003092:	230c      	movs	r3, #12
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	2340      	movs	r3, #64	; 0x40
 8003098:	2001      	movs	r0, #1
 800309a:	89a2      	ldrh	r2, [r4, #12]
 800309c:	4240      	negs	r0, r0
 800309e:	4313      	orrs	r3, r2
 80030a0:	81a3      	strh	r3, [r4, #12]
 80030a2:	b005      	add	sp, #20
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	9a02      	ldr	r2, [sp, #8]
 80030a8:	6921      	ldr	r1, [r4, #16]
 80030aa:	f000 faba 	bl	8003622 <memcpy>
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <__ssputs_r+0xc0>)
 80030b2:	401a      	ands	r2, r3
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	4313      	orrs	r3, r2
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	6126      	str	r6, [r4, #16]
 80030be:	18f6      	adds	r6, r6, r3
 80030c0:	6026      	str	r6, [r4, #0]
 80030c2:	6165      	str	r5, [r4, #20]
 80030c4:	9e01      	ldr	r6, [sp, #4]
 80030c6:	1aed      	subs	r5, r5, r3
 80030c8:	60a5      	str	r5, [r4, #8]
 80030ca:	9b01      	ldr	r3, [sp, #4]
 80030cc:	429e      	cmp	r6, r3
 80030ce:	d900      	bls.n	80030d2 <__ssputs_r+0x8e>
 80030d0:	9e01      	ldr	r6, [sp, #4]
 80030d2:	0032      	movs	r2, r6
 80030d4:	9903      	ldr	r1, [sp, #12]
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	f000 faac 	bl	8003634 <memmove>
 80030dc:	68a3      	ldr	r3, [r4, #8]
 80030de:	2000      	movs	r0, #0
 80030e0:	1b9b      	subs	r3, r3, r6
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	199e      	adds	r6, r3, r6
 80030e8:	6026      	str	r6, [r4, #0]
 80030ea:	e7da      	b.n	80030a2 <__ssputs_r+0x5e>
 80030ec:	002a      	movs	r2, r5
 80030ee:	0038      	movs	r0, r7
 80030f0:	f000 fb5c 	bl	80037ac <_realloc_r>
 80030f4:	1e06      	subs	r6, r0, #0
 80030f6:	d1e0      	bne.n	80030ba <__ssputs_r+0x76>
 80030f8:	0038      	movs	r0, r7
 80030fa:	6921      	ldr	r1, [r4, #16]
 80030fc:	f000 faae 	bl	800365c <_free_r>
 8003100:	e7c7      	b.n	8003092 <__ssputs_r+0x4e>
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	fffffb7f 	.word	0xfffffb7f

08003108 <_svfiprintf_r>:
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b0a1      	sub	sp, #132	; 0x84
 800310c:	9003      	str	r0, [sp, #12]
 800310e:	001d      	movs	r5, r3
 8003110:	898b      	ldrh	r3, [r1, #12]
 8003112:	000f      	movs	r7, r1
 8003114:	0016      	movs	r6, r2
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	d511      	bpl.n	800313e <_svfiprintf_r+0x36>
 800311a:	690b      	ldr	r3, [r1, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10e      	bne.n	800313e <_svfiprintf_r+0x36>
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	f000 fae5 	bl	80036f0 <_malloc_r>
 8003126:	6038      	str	r0, [r7, #0]
 8003128:	6138      	str	r0, [r7, #16]
 800312a:	2800      	cmp	r0, #0
 800312c:	d105      	bne.n	800313a <_svfiprintf_r+0x32>
 800312e:	230c      	movs	r3, #12
 8003130:	9a03      	ldr	r2, [sp, #12]
 8003132:	3801      	subs	r0, #1
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	b021      	add	sp, #132	; 0x84
 8003138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313a:	2340      	movs	r3, #64	; 0x40
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	2300      	movs	r3, #0
 8003140:	ac08      	add	r4, sp, #32
 8003142:	6163      	str	r3, [r4, #20]
 8003144:	3320      	adds	r3, #32
 8003146:	7663      	strb	r3, [r4, #25]
 8003148:	3310      	adds	r3, #16
 800314a:	76a3      	strb	r3, [r4, #26]
 800314c:	9507      	str	r5, [sp, #28]
 800314e:	0035      	movs	r5, r6
 8003150:	782b      	ldrb	r3, [r5, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <_svfiprintf_r+0x52>
 8003156:	2b25      	cmp	r3, #37	; 0x25
 8003158:	d147      	bne.n	80031ea <_svfiprintf_r+0xe2>
 800315a:	1bab      	subs	r3, r5, r6
 800315c:	9305      	str	r3, [sp, #20]
 800315e:	42b5      	cmp	r5, r6
 8003160:	d00c      	beq.n	800317c <_svfiprintf_r+0x74>
 8003162:	0032      	movs	r2, r6
 8003164:	0039      	movs	r1, r7
 8003166:	9803      	ldr	r0, [sp, #12]
 8003168:	f7ff ff6c 	bl	8003044 <__ssputs_r>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d100      	bne.n	8003172 <_svfiprintf_r+0x6a>
 8003170:	e0ae      	b.n	80032d0 <_svfiprintf_r+0x1c8>
 8003172:	6962      	ldr	r2, [r4, #20]
 8003174:	9b05      	ldr	r3, [sp, #20]
 8003176:	4694      	mov	ip, r2
 8003178:	4463      	add	r3, ip
 800317a:	6163      	str	r3, [r4, #20]
 800317c:	782b      	ldrb	r3, [r5, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d100      	bne.n	8003184 <_svfiprintf_r+0x7c>
 8003182:	e0a5      	b.n	80032d0 <_svfiprintf_r+0x1c8>
 8003184:	2201      	movs	r2, #1
 8003186:	2300      	movs	r3, #0
 8003188:	4252      	negs	r2, r2
 800318a:	6062      	str	r2, [r4, #4]
 800318c:	a904      	add	r1, sp, #16
 800318e:	3254      	adds	r2, #84	; 0x54
 8003190:	1852      	adds	r2, r2, r1
 8003192:	1c6e      	adds	r6, r5, #1
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	60e3      	str	r3, [r4, #12]
 8003198:	60a3      	str	r3, [r4, #8]
 800319a:	7013      	strb	r3, [r2, #0]
 800319c:	65a3      	str	r3, [r4, #88]	; 0x58
 800319e:	2205      	movs	r2, #5
 80031a0:	7831      	ldrb	r1, [r6, #0]
 80031a2:	4854      	ldr	r0, [pc, #336]	; (80032f4 <_svfiprintf_r+0x1ec>)
 80031a4:	f000 fa32 	bl	800360c <memchr>
 80031a8:	1c75      	adds	r5, r6, #1
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d11f      	bne.n	80031ee <_svfiprintf_r+0xe6>
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	06d3      	lsls	r3, r2, #27
 80031b2:	d504      	bpl.n	80031be <_svfiprintf_r+0xb6>
 80031b4:	2353      	movs	r3, #83	; 0x53
 80031b6:	a904      	add	r1, sp, #16
 80031b8:	185b      	adds	r3, r3, r1
 80031ba:	2120      	movs	r1, #32
 80031bc:	7019      	strb	r1, [r3, #0]
 80031be:	0713      	lsls	r3, r2, #28
 80031c0:	d504      	bpl.n	80031cc <_svfiprintf_r+0xc4>
 80031c2:	2353      	movs	r3, #83	; 0x53
 80031c4:	a904      	add	r1, sp, #16
 80031c6:	185b      	adds	r3, r3, r1
 80031c8:	212b      	movs	r1, #43	; 0x2b
 80031ca:	7019      	strb	r1, [r3, #0]
 80031cc:	7833      	ldrb	r3, [r6, #0]
 80031ce:	2b2a      	cmp	r3, #42	; 0x2a
 80031d0:	d016      	beq.n	8003200 <_svfiprintf_r+0xf8>
 80031d2:	0035      	movs	r5, r6
 80031d4:	2100      	movs	r1, #0
 80031d6:	200a      	movs	r0, #10
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	782a      	ldrb	r2, [r5, #0]
 80031dc:	1c6e      	adds	r6, r5, #1
 80031de:	3a30      	subs	r2, #48	; 0x30
 80031e0:	2a09      	cmp	r2, #9
 80031e2:	d94e      	bls.n	8003282 <_svfiprintf_r+0x17a>
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d111      	bne.n	800320c <_svfiprintf_r+0x104>
 80031e8:	e017      	b.n	800321a <_svfiprintf_r+0x112>
 80031ea:	3501      	adds	r5, #1
 80031ec:	e7b0      	b.n	8003150 <_svfiprintf_r+0x48>
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <_svfiprintf_r+0x1ec>)
 80031f0:	6822      	ldr	r2, [r4, #0]
 80031f2:	1ac0      	subs	r0, r0, r3
 80031f4:	2301      	movs	r3, #1
 80031f6:	4083      	lsls	r3, r0
 80031f8:	4313      	orrs	r3, r2
 80031fa:	002e      	movs	r6, r5
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	e7ce      	b.n	800319e <_svfiprintf_r+0x96>
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	1d19      	adds	r1, r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	9107      	str	r1, [sp, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db01      	blt.n	8003210 <_svfiprintf_r+0x108>
 800320c:	930b      	str	r3, [sp, #44]	; 0x2c
 800320e:	e004      	b.n	800321a <_svfiprintf_r+0x112>
 8003210:	425b      	negs	r3, r3
 8003212:	60e3      	str	r3, [r4, #12]
 8003214:	2302      	movs	r3, #2
 8003216:	4313      	orrs	r3, r2
 8003218:	6023      	str	r3, [r4, #0]
 800321a:	782b      	ldrb	r3, [r5, #0]
 800321c:	2b2e      	cmp	r3, #46	; 0x2e
 800321e:	d10a      	bne.n	8003236 <_svfiprintf_r+0x12e>
 8003220:	786b      	ldrb	r3, [r5, #1]
 8003222:	2b2a      	cmp	r3, #42	; 0x2a
 8003224:	d135      	bne.n	8003292 <_svfiprintf_r+0x18a>
 8003226:	9b07      	ldr	r3, [sp, #28]
 8003228:	3502      	adds	r5, #2
 800322a:	1d1a      	adds	r2, r3, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9207      	str	r2, [sp, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db2b      	blt.n	800328c <_svfiprintf_r+0x184>
 8003234:	9309      	str	r3, [sp, #36]	; 0x24
 8003236:	4e30      	ldr	r6, [pc, #192]	; (80032f8 <_svfiprintf_r+0x1f0>)
 8003238:	2203      	movs	r2, #3
 800323a:	0030      	movs	r0, r6
 800323c:	7829      	ldrb	r1, [r5, #0]
 800323e:	f000 f9e5 	bl	800360c <memchr>
 8003242:	2800      	cmp	r0, #0
 8003244:	d006      	beq.n	8003254 <_svfiprintf_r+0x14c>
 8003246:	2340      	movs	r3, #64	; 0x40
 8003248:	1b80      	subs	r0, r0, r6
 800324a:	4083      	lsls	r3, r0
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	3501      	adds	r5, #1
 8003250:	4313      	orrs	r3, r2
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	7829      	ldrb	r1, [r5, #0]
 8003256:	2206      	movs	r2, #6
 8003258:	4828      	ldr	r0, [pc, #160]	; (80032fc <_svfiprintf_r+0x1f4>)
 800325a:	1c6e      	adds	r6, r5, #1
 800325c:	7621      	strb	r1, [r4, #24]
 800325e:	f000 f9d5 	bl	800360c <memchr>
 8003262:	2800      	cmp	r0, #0
 8003264:	d03c      	beq.n	80032e0 <_svfiprintf_r+0x1d8>
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <_svfiprintf_r+0x1f8>)
 8003268:	2b00      	cmp	r3, #0
 800326a:	d125      	bne.n	80032b8 <_svfiprintf_r+0x1b0>
 800326c:	2207      	movs	r2, #7
 800326e:	9b07      	ldr	r3, [sp, #28]
 8003270:	3307      	adds	r3, #7
 8003272:	4393      	bics	r3, r2
 8003274:	3308      	adds	r3, #8
 8003276:	9307      	str	r3, [sp, #28]
 8003278:	6963      	ldr	r3, [r4, #20]
 800327a:	9a04      	ldr	r2, [sp, #16]
 800327c:	189b      	adds	r3, r3, r2
 800327e:	6163      	str	r3, [r4, #20]
 8003280:	e765      	b.n	800314e <_svfiprintf_r+0x46>
 8003282:	4343      	muls	r3, r0
 8003284:	0035      	movs	r5, r6
 8003286:	2101      	movs	r1, #1
 8003288:	189b      	adds	r3, r3, r2
 800328a:	e7a6      	b.n	80031da <_svfiprintf_r+0xd2>
 800328c:	2301      	movs	r3, #1
 800328e:	425b      	negs	r3, r3
 8003290:	e7d0      	b.n	8003234 <_svfiprintf_r+0x12c>
 8003292:	2300      	movs	r3, #0
 8003294:	200a      	movs	r0, #10
 8003296:	001a      	movs	r2, r3
 8003298:	3501      	adds	r5, #1
 800329a:	6063      	str	r3, [r4, #4]
 800329c:	7829      	ldrb	r1, [r5, #0]
 800329e:	1c6e      	adds	r6, r5, #1
 80032a0:	3930      	subs	r1, #48	; 0x30
 80032a2:	2909      	cmp	r1, #9
 80032a4:	d903      	bls.n	80032ae <_svfiprintf_r+0x1a6>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0c5      	beq.n	8003236 <_svfiprintf_r+0x12e>
 80032aa:	9209      	str	r2, [sp, #36]	; 0x24
 80032ac:	e7c3      	b.n	8003236 <_svfiprintf_r+0x12e>
 80032ae:	4342      	muls	r2, r0
 80032b0:	0035      	movs	r5, r6
 80032b2:	2301      	movs	r3, #1
 80032b4:	1852      	adds	r2, r2, r1
 80032b6:	e7f1      	b.n	800329c <_svfiprintf_r+0x194>
 80032b8:	ab07      	add	r3, sp, #28
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	003a      	movs	r2, r7
 80032be:	0021      	movs	r1, r4
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <_svfiprintf_r+0x1fc>)
 80032c2:	9803      	ldr	r0, [sp, #12]
 80032c4:	e000      	b.n	80032c8 <_svfiprintf_r+0x1c0>
 80032c6:	bf00      	nop
 80032c8:	9004      	str	r0, [sp, #16]
 80032ca:	9b04      	ldr	r3, [sp, #16]
 80032cc:	3301      	adds	r3, #1
 80032ce:	d1d3      	bne.n	8003278 <_svfiprintf_r+0x170>
 80032d0:	89bb      	ldrh	r3, [r7, #12]
 80032d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032d4:	065b      	lsls	r3, r3, #25
 80032d6:	d400      	bmi.n	80032da <_svfiprintf_r+0x1d2>
 80032d8:	e72d      	b.n	8003136 <_svfiprintf_r+0x2e>
 80032da:	2001      	movs	r0, #1
 80032dc:	4240      	negs	r0, r0
 80032de:	e72a      	b.n	8003136 <_svfiprintf_r+0x2e>
 80032e0:	ab07      	add	r3, sp, #28
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	003a      	movs	r2, r7
 80032e6:	0021      	movs	r1, r4
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <_svfiprintf_r+0x1fc>)
 80032ea:	9803      	ldr	r0, [sp, #12]
 80032ec:	f000 f87c 	bl	80033e8 <_printf_i>
 80032f0:	e7ea      	b.n	80032c8 <_svfiprintf_r+0x1c0>
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	0800389c 	.word	0x0800389c
 80032f8:	080038a2 	.word	0x080038a2
 80032fc:	080038a6 	.word	0x080038a6
 8003300:	00000000 	.word	0x00000000
 8003304:	08003045 	.word	0x08003045

08003308 <_printf_common>:
 8003308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800330a:	0015      	movs	r5, r2
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	688a      	ldr	r2, [r1, #8]
 8003310:	690b      	ldr	r3, [r1, #16]
 8003312:	000c      	movs	r4, r1
 8003314:	9000      	str	r0, [sp, #0]
 8003316:	4293      	cmp	r3, r2
 8003318:	da00      	bge.n	800331c <_printf_common+0x14>
 800331a:	0013      	movs	r3, r2
 800331c:	0022      	movs	r2, r4
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	3243      	adds	r2, #67	; 0x43
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	2a00      	cmp	r2, #0
 8003326:	d001      	beq.n	800332c <_printf_common+0x24>
 8003328:	3301      	adds	r3, #1
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	069b      	lsls	r3, r3, #26
 8003330:	d502      	bpl.n	8003338 <_printf_common+0x30>
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	3302      	adds	r3, #2
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	2306      	movs	r3, #6
 800333c:	0017      	movs	r7, r2
 800333e:	401f      	ands	r7, r3
 8003340:	421a      	tst	r2, r3
 8003342:	d027      	beq.n	8003394 <_printf_common+0x8c>
 8003344:	0023      	movs	r3, r4
 8003346:	3343      	adds	r3, #67	; 0x43
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	1e5a      	subs	r2, r3, #1
 800334c:	4193      	sbcs	r3, r2
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	0692      	lsls	r2, r2, #26
 8003352:	d430      	bmi.n	80033b6 <_printf_common+0xae>
 8003354:	0022      	movs	r2, r4
 8003356:	9901      	ldr	r1, [sp, #4]
 8003358:	9800      	ldr	r0, [sp, #0]
 800335a:	9e08      	ldr	r6, [sp, #32]
 800335c:	3243      	adds	r2, #67	; 0x43
 800335e:	47b0      	blx	r6
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d025      	beq.n	80033b0 <_printf_common+0xa8>
 8003364:	2306      	movs	r3, #6
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	682a      	ldr	r2, [r5, #0]
 800336a:	68e1      	ldr	r1, [r4, #12]
 800336c:	2500      	movs	r5, #0
 800336e:	4003      	ands	r3, r0
 8003370:	2b04      	cmp	r3, #4
 8003372:	d103      	bne.n	800337c <_printf_common+0x74>
 8003374:	1a8d      	subs	r5, r1, r2
 8003376:	43eb      	mvns	r3, r5
 8003378:	17db      	asrs	r3, r3, #31
 800337a:	401d      	ands	r5, r3
 800337c:	68a3      	ldr	r3, [r4, #8]
 800337e:	6922      	ldr	r2, [r4, #16]
 8003380:	4293      	cmp	r3, r2
 8003382:	dd01      	ble.n	8003388 <_printf_common+0x80>
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	18ed      	adds	r5, r5, r3
 8003388:	2700      	movs	r7, #0
 800338a:	42bd      	cmp	r5, r7
 800338c:	d120      	bne.n	80033d0 <_printf_common+0xc8>
 800338e:	2000      	movs	r0, #0
 8003390:	e010      	b.n	80033b4 <_printf_common+0xac>
 8003392:	3701      	adds	r7, #1
 8003394:	68e3      	ldr	r3, [r4, #12]
 8003396:	682a      	ldr	r2, [r5, #0]
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	42bb      	cmp	r3, r7
 800339c:	ddd2      	ble.n	8003344 <_printf_common+0x3c>
 800339e:	0022      	movs	r2, r4
 80033a0:	2301      	movs	r3, #1
 80033a2:	9901      	ldr	r1, [sp, #4]
 80033a4:	9800      	ldr	r0, [sp, #0]
 80033a6:	9e08      	ldr	r6, [sp, #32]
 80033a8:	3219      	adds	r2, #25
 80033aa:	47b0      	blx	r6
 80033ac:	1c43      	adds	r3, r0, #1
 80033ae:	d1f0      	bne.n	8003392 <_printf_common+0x8a>
 80033b0:	2001      	movs	r0, #1
 80033b2:	4240      	negs	r0, r0
 80033b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033b6:	2030      	movs	r0, #48	; 0x30
 80033b8:	18e1      	adds	r1, r4, r3
 80033ba:	3143      	adds	r1, #67	; 0x43
 80033bc:	7008      	strb	r0, [r1, #0]
 80033be:	0021      	movs	r1, r4
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	3145      	adds	r1, #69	; 0x45
 80033c4:	7809      	ldrb	r1, [r1, #0]
 80033c6:	18a2      	adds	r2, r4, r2
 80033c8:	3243      	adds	r2, #67	; 0x43
 80033ca:	3302      	adds	r3, #2
 80033cc:	7011      	strb	r1, [r2, #0]
 80033ce:	e7c1      	b.n	8003354 <_printf_common+0x4c>
 80033d0:	0022      	movs	r2, r4
 80033d2:	2301      	movs	r3, #1
 80033d4:	9901      	ldr	r1, [sp, #4]
 80033d6:	9800      	ldr	r0, [sp, #0]
 80033d8:	9e08      	ldr	r6, [sp, #32]
 80033da:	321a      	adds	r2, #26
 80033dc:	47b0      	blx	r6
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d0e6      	beq.n	80033b0 <_printf_common+0xa8>
 80033e2:	3701      	adds	r7, #1
 80033e4:	e7d1      	b.n	800338a <_printf_common+0x82>
	...

080033e8 <_printf_i>:
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	b08b      	sub	sp, #44	; 0x2c
 80033ec:	9206      	str	r2, [sp, #24]
 80033ee:	000a      	movs	r2, r1
 80033f0:	3243      	adds	r2, #67	; 0x43
 80033f2:	9307      	str	r3, [sp, #28]
 80033f4:	9005      	str	r0, [sp, #20]
 80033f6:	9204      	str	r2, [sp, #16]
 80033f8:	7e0a      	ldrb	r2, [r1, #24]
 80033fa:	000c      	movs	r4, r1
 80033fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80033fe:	2a78      	cmp	r2, #120	; 0x78
 8003400:	d806      	bhi.n	8003410 <_printf_i+0x28>
 8003402:	2a62      	cmp	r2, #98	; 0x62
 8003404:	d808      	bhi.n	8003418 <_printf_i+0x30>
 8003406:	2a00      	cmp	r2, #0
 8003408:	d100      	bne.n	800340c <_printf_i+0x24>
 800340a:	e0c0      	b.n	800358e <_printf_i+0x1a6>
 800340c:	2a58      	cmp	r2, #88	; 0x58
 800340e:	d052      	beq.n	80034b6 <_printf_i+0xce>
 8003410:	0026      	movs	r6, r4
 8003412:	3642      	adds	r6, #66	; 0x42
 8003414:	7032      	strb	r2, [r6, #0]
 8003416:	e022      	b.n	800345e <_printf_i+0x76>
 8003418:	0010      	movs	r0, r2
 800341a:	3863      	subs	r0, #99	; 0x63
 800341c:	2815      	cmp	r0, #21
 800341e:	d8f7      	bhi.n	8003410 <_printf_i+0x28>
 8003420:	f7fc fe72 	bl	8000108 <__gnu_thumb1_case_shi>
 8003424:	001f0016 	.word	0x001f0016
 8003428:	fff6fff6 	.word	0xfff6fff6
 800342c:	fff6fff6 	.word	0xfff6fff6
 8003430:	fff6001f 	.word	0xfff6001f
 8003434:	fff6fff6 	.word	0xfff6fff6
 8003438:	00a8fff6 	.word	0x00a8fff6
 800343c:	009a0036 	.word	0x009a0036
 8003440:	fff6fff6 	.word	0xfff6fff6
 8003444:	fff600b9 	.word	0xfff600b9
 8003448:	fff60036 	.word	0xfff60036
 800344c:	009efff6 	.word	0x009efff6
 8003450:	0026      	movs	r6, r4
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	3642      	adds	r6, #66	; 0x42
 8003456:	1d11      	adds	r1, r2, #4
 8003458:	6019      	str	r1, [r3, #0]
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	7033      	strb	r3, [r6, #0]
 800345e:	2301      	movs	r3, #1
 8003460:	e0a7      	b.n	80035b2 <_printf_i+0x1ca>
 8003462:	6808      	ldr	r0, [r1, #0]
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	1d0a      	adds	r2, r1, #4
 8003468:	0605      	lsls	r5, r0, #24
 800346a:	d50b      	bpl.n	8003484 <_printf_i+0x9c>
 800346c:	680d      	ldr	r5, [r1, #0]
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	2d00      	cmp	r5, #0
 8003472:	da03      	bge.n	800347c <_printf_i+0x94>
 8003474:	232d      	movs	r3, #45	; 0x2d
 8003476:	9a04      	ldr	r2, [sp, #16]
 8003478:	426d      	negs	r5, r5
 800347a:	7013      	strb	r3, [r2, #0]
 800347c:	4b61      	ldr	r3, [pc, #388]	; (8003604 <_printf_i+0x21c>)
 800347e:	270a      	movs	r7, #10
 8003480:	9303      	str	r3, [sp, #12]
 8003482:	e032      	b.n	80034ea <_printf_i+0x102>
 8003484:	680d      	ldr	r5, [r1, #0]
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	0641      	lsls	r1, r0, #25
 800348a:	d5f1      	bpl.n	8003470 <_printf_i+0x88>
 800348c:	b22d      	sxth	r5, r5
 800348e:	e7ef      	b.n	8003470 <_printf_i+0x88>
 8003490:	680d      	ldr	r5, [r1, #0]
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	1d08      	adds	r0, r1, #4
 8003496:	6018      	str	r0, [r3, #0]
 8003498:	062e      	lsls	r6, r5, #24
 800349a:	d501      	bpl.n	80034a0 <_printf_i+0xb8>
 800349c:	680d      	ldr	r5, [r1, #0]
 800349e:	e003      	b.n	80034a8 <_printf_i+0xc0>
 80034a0:	066d      	lsls	r5, r5, #25
 80034a2:	d5fb      	bpl.n	800349c <_printf_i+0xb4>
 80034a4:	680d      	ldr	r5, [r1, #0]
 80034a6:	b2ad      	uxth	r5, r5
 80034a8:	4b56      	ldr	r3, [pc, #344]	; (8003604 <_printf_i+0x21c>)
 80034aa:	270a      	movs	r7, #10
 80034ac:	9303      	str	r3, [sp, #12]
 80034ae:	2a6f      	cmp	r2, #111	; 0x6f
 80034b0:	d117      	bne.n	80034e2 <_printf_i+0xfa>
 80034b2:	2708      	movs	r7, #8
 80034b4:	e015      	b.n	80034e2 <_printf_i+0xfa>
 80034b6:	3145      	adds	r1, #69	; 0x45
 80034b8:	700a      	strb	r2, [r1, #0]
 80034ba:	4a52      	ldr	r2, [pc, #328]	; (8003604 <_printf_i+0x21c>)
 80034bc:	9203      	str	r2, [sp, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6821      	ldr	r1, [r4, #0]
 80034c2:	ca20      	ldmia	r2!, {r5}
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	0608      	lsls	r0, r1, #24
 80034c8:	d550      	bpl.n	800356c <_printf_i+0x184>
 80034ca:	07cb      	lsls	r3, r1, #31
 80034cc:	d502      	bpl.n	80034d4 <_printf_i+0xec>
 80034ce:	2320      	movs	r3, #32
 80034d0:	4319      	orrs	r1, r3
 80034d2:	6021      	str	r1, [r4, #0]
 80034d4:	2710      	movs	r7, #16
 80034d6:	2d00      	cmp	r5, #0
 80034d8:	d103      	bne.n	80034e2 <_printf_i+0xfa>
 80034da:	2320      	movs	r3, #32
 80034dc:	6822      	ldr	r2, [r4, #0]
 80034de:	439a      	bics	r2, r3
 80034e0:	6022      	str	r2, [r4, #0]
 80034e2:	0023      	movs	r3, r4
 80034e4:	2200      	movs	r2, #0
 80034e6:	3343      	adds	r3, #67	; 0x43
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	6863      	ldr	r3, [r4, #4]
 80034ec:	60a3      	str	r3, [r4, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	db03      	blt.n	80034fa <_printf_i+0x112>
 80034f2:	2204      	movs	r2, #4
 80034f4:	6821      	ldr	r1, [r4, #0]
 80034f6:	4391      	bics	r1, r2
 80034f8:	6021      	str	r1, [r4, #0]
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	d102      	bne.n	8003504 <_printf_i+0x11c>
 80034fe:	9e04      	ldr	r6, [sp, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <_printf_i+0x136>
 8003504:	9e04      	ldr	r6, [sp, #16]
 8003506:	0028      	movs	r0, r5
 8003508:	0039      	movs	r1, r7
 800350a:	f7fc fe8d 	bl	8000228 <__aeabi_uidivmod>
 800350e:	9b03      	ldr	r3, [sp, #12]
 8003510:	3e01      	subs	r6, #1
 8003512:	5c5b      	ldrb	r3, [r3, r1]
 8003514:	7033      	strb	r3, [r6, #0]
 8003516:	002b      	movs	r3, r5
 8003518:	0005      	movs	r5, r0
 800351a:	429f      	cmp	r7, r3
 800351c:	d9f3      	bls.n	8003506 <_printf_i+0x11e>
 800351e:	2f08      	cmp	r7, #8
 8003520:	d109      	bne.n	8003536 <_printf_i+0x14e>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	07db      	lsls	r3, r3, #31
 8003526:	d506      	bpl.n	8003536 <_printf_i+0x14e>
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	6922      	ldr	r2, [r4, #16]
 800352c:	4293      	cmp	r3, r2
 800352e:	dc02      	bgt.n	8003536 <_printf_i+0x14e>
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	3e01      	subs	r6, #1
 8003534:	7033      	strb	r3, [r6, #0]
 8003536:	9b04      	ldr	r3, [sp, #16]
 8003538:	1b9b      	subs	r3, r3, r6
 800353a:	6123      	str	r3, [r4, #16]
 800353c:	9b07      	ldr	r3, [sp, #28]
 800353e:	0021      	movs	r1, r4
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	9805      	ldr	r0, [sp, #20]
 8003544:	9b06      	ldr	r3, [sp, #24]
 8003546:	aa09      	add	r2, sp, #36	; 0x24
 8003548:	f7ff fede 	bl	8003308 <_printf_common>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d135      	bne.n	80035bc <_printf_i+0x1d4>
 8003550:	2001      	movs	r0, #1
 8003552:	4240      	negs	r0, r0
 8003554:	b00b      	add	sp, #44	; 0x2c
 8003556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003558:	2220      	movs	r2, #32
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	6022      	str	r2, [r4, #0]
 8003560:	0022      	movs	r2, r4
 8003562:	2178      	movs	r1, #120	; 0x78
 8003564:	3245      	adds	r2, #69	; 0x45
 8003566:	7011      	strb	r1, [r2, #0]
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <_printf_i+0x220>)
 800356a:	e7a7      	b.n	80034bc <_printf_i+0xd4>
 800356c:	0648      	lsls	r0, r1, #25
 800356e:	d5ac      	bpl.n	80034ca <_printf_i+0xe2>
 8003570:	b2ad      	uxth	r5, r5
 8003572:	e7aa      	b.n	80034ca <_printf_i+0xe2>
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	680d      	ldr	r5, [r1, #0]
 8003578:	1d10      	adds	r0, r2, #4
 800357a:	6949      	ldr	r1, [r1, #20]
 800357c:	6018      	str	r0, [r3, #0]
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	062e      	lsls	r6, r5, #24
 8003582:	d501      	bpl.n	8003588 <_printf_i+0x1a0>
 8003584:	6019      	str	r1, [r3, #0]
 8003586:	e002      	b.n	800358e <_printf_i+0x1a6>
 8003588:	066d      	lsls	r5, r5, #25
 800358a:	d5fb      	bpl.n	8003584 <_printf_i+0x19c>
 800358c:	8019      	strh	r1, [r3, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	9e04      	ldr	r6, [sp, #16]
 8003592:	6123      	str	r3, [r4, #16]
 8003594:	e7d2      	b.n	800353c <_printf_i+0x154>
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	1d11      	adds	r1, r2, #4
 800359a:	6019      	str	r1, [r3, #0]
 800359c:	6816      	ldr	r6, [r2, #0]
 800359e:	2100      	movs	r1, #0
 80035a0:	0030      	movs	r0, r6
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	f000 f832 	bl	800360c <memchr>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d001      	beq.n	80035b0 <_printf_i+0x1c8>
 80035ac:	1b80      	subs	r0, r0, r6
 80035ae:	6060      	str	r0, [r4, #4]
 80035b0:	6863      	ldr	r3, [r4, #4]
 80035b2:	6123      	str	r3, [r4, #16]
 80035b4:	2300      	movs	r3, #0
 80035b6:	9a04      	ldr	r2, [sp, #16]
 80035b8:	7013      	strb	r3, [r2, #0]
 80035ba:	e7bf      	b.n	800353c <_printf_i+0x154>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	0032      	movs	r2, r6
 80035c0:	9906      	ldr	r1, [sp, #24]
 80035c2:	9805      	ldr	r0, [sp, #20]
 80035c4:	9d07      	ldr	r5, [sp, #28]
 80035c6:	47a8      	blx	r5
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d0c1      	beq.n	8003550 <_printf_i+0x168>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	079b      	lsls	r3, r3, #30
 80035d0:	d415      	bmi.n	80035fe <_printf_i+0x216>
 80035d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035d4:	68e0      	ldr	r0, [r4, #12]
 80035d6:	4298      	cmp	r0, r3
 80035d8:	dabc      	bge.n	8003554 <_printf_i+0x16c>
 80035da:	0018      	movs	r0, r3
 80035dc:	e7ba      	b.n	8003554 <_printf_i+0x16c>
 80035de:	0022      	movs	r2, r4
 80035e0:	2301      	movs	r3, #1
 80035e2:	9906      	ldr	r1, [sp, #24]
 80035e4:	9805      	ldr	r0, [sp, #20]
 80035e6:	9e07      	ldr	r6, [sp, #28]
 80035e8:	3219      	adds	r2, #25
 80035ea:	47b0      	blx	r6
 80035ec:	1c43      	adds	r3, r0, #1
 80035ee:	d0af      	beq.n	8003550 <_printf_i+0x168>
 80035f0:	3501      	adds	r5, #1
 80035f2:	68e3      	ldr	r3, [r4, #12]
 80035f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	42ab      	cmp	r3, r5
 80035fa:	dcf0      	bgt.n	80035de <_printf_i+0x1f6>
 80035fc:	e7e9      	b.n	80035d2 <_printf_i+0x1ea>
 80035fe:	2500      	movs	r5, #0
 8003600:	e7f7      	b.n	80035f2 <_printf_i+0x20a>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	080038ad 	.word	0x080038ad
 8003608:	080038be 	.word	0x080038be

0800360c <memchr>:
 800360c:	b2c9      	uxtb	r1, r1
 800360e:	1882      	adds	r2, r0, r2
 8003610:	4290      	cmp	r0, r2
 8003612:	d101      	bne.n	8003618 <memchr+0xc>
 8003614:	2000      	movs	r0, #0
 8003616:	4770      	bx	lr
 8003618:	7803      	ldrb	r3, [r0, #0]
 800361a:	428b      	cmp	r3, r1
 800361c:	d0fb      	beq.n	8003616 <memchr+0xa>
 800361e:	3001      	adds	r0, #1
 8003620:	e7f6      	b.n	8003610 <memchr+0x4>

08003622 <memcpy>:
 8003622:	2300      	movs	r3, #0
 8003624:	b510      	push	{r4, lr}
 8003626:	429a      	cmp	r2, r3
 8003628:	d100      	bne.n	800362c <memcpy+0xa>
 800362a:	bd10      	pop	{r4, pc}
 800362c:	5ccc      	ldrb	r4, [r1, r3]
 800362e:	54c4      	strb	r4, [r0, r3]
 8003630:	3301      	adds	r3, #1
 8003632:	e7f8      	b.n	8003626 <memcpy+0x4>

08003634 <memmove>:
 8003634:	b510      	push	{r4, lr}
 8003636:	4288      	cmp	r0, r1
 8003638:	d902      	bls.n	8003640 <memmove+0xc>
 800363a:	188b      	adds	r3, r1, r2
 800363c:	4298      	cmp	r0, r3
 800363e:	d303      	bcc.n	8003648 <memmove+0x14>
 8003640:	2300      	movs	r3, #0
 8003642:	e007      	b.n	8003654 <memmove+0x20>
 8003644:	5c8b      	ldrb	r3, [r1, r2]
 8003646:	5483      	strb	r3, [r0, r2]
 8003648:	3a01      	subs	r2, #1
 800364a:	d2fb      	bcs.n	8003644 <memmove+0x10>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	5ccc      	ldrb	r4, [r1, r3]
 8003650:	54c4      	strb	r4, [r0, r3]
 8003652:	3301      	adds	r3, #1
 8003654:	429a      	cmp	r2, r3
 8003656:	d1fa      	bne.n	800364e <memmove+0x1a>
 8003658:	e7f8      	b.n	800364c <memmove+0x18>
	...

0800365c <_free_r>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	0005      	movs	r5, r0
 8003660:	2900      	cmp	r1, #0
 8003662:	d010      	beq.n	8003686 <_free_r+0x2a>
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da00      	bge.n	800366e <_free_r+0x12>
 800366c:	18e4      	adds	r4, r4, r3
 800366e:	0028      	movs	r0, r5
 8003670:	f000 f8d4 	bl	800381c <__malloc_lock>
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <_free_r+0x90>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <_free_r+0x2c>
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	6014      	str	r4, [r2, #0]
 8003680:	0028      	movs	r0, r5
 8003682:	f000 f8d3 	bl	800382c <__malloc_unlock>
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	42a3      	cmp	r3, r4
 800368a:	d908      	bls.n	800369e <_free_r+0x42>
 800368c:	6821      	ldr	r1, [r4, #0]
 800368e:	1860      	adds	r0, r4, r1
 8003690:	4283      	cmp	r3, r0
 8003692:	d1f3      	bne.n	800367c <_free_r+0x20>
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	1841      	adds	r1, r0, r1
 800369a:	6021      	str	r1, [r4, #0]
 800369c:	e7ee      	b.n	800367c <_free_r+0x20>
 800369e:	001a      	movs	r2, r3
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_free_r+0x4e>
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d9f9      	bls.n	800369e <_free_r+0x42>
 80036aa:	6811      	ldr	r1, [r2, #0]
 80036ac:	1850      	adds	r0, r2, r1
 80036ae:	42a0      	cmp	r0, r4
 80036b0:	d10b      	bne.n	80036ca <_free_r+0x6e>
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	1809      	adds	r1, r1, r0
 80036b6:	1850      	adds	r0, r2, r1
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	4283      	cmp	r3, r0
 80036bc:	d1e0      	bne.n	8003680 <_free_r+0x24>
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	1841      	adds	r1, r0, r1
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e7da      	b.n	8003680 <_free_r+0x24>
 80036ca:	42a0      	cmp	r0, r4
 80036cc:	d902      	bls.n	80036d4 <_free_r+0x78>
 80036ce:	230c      	movs	r3, #12
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	e7d5      	b.n	8003680 <_free_r+0x24>
 80036d4:	6821      	ldr	r1, [r4, #0]
 80036d6:	1860      	adds	r0, r4, r1
 80036d8:	4283      	cmp	r3, r0
 80036da:	d103      	bne.n	80036e4 <_free_r+0x88>
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	1841      	adds	r1, r0, r1
 80036e2:	6021      	str	r1, [r4, #0]
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	6054      	str	r4, [r2, #4]
 80036e8:	e7ca      	b.n	8003680 <_free_r+0x24>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	20000108 	.word	0x20000108

080036f0 <_malloc_r>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	2303      	movs	r3, #3
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	439d      	bics	r5, r3
 80036f8:	3508      	adds	r5, #8
 80036fa:	0006      	movs	r6, r0
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	d21f      	bcs.n	8003740 <_malloc_r+0x50>
 8003700:	250c      	movs	r5, #12
 8003702:	42a9      	cmp	r1, r5
 8003704:	d81e      	bhi.n	8003744 <_malloc_r+0x54>
 8003706:	0030      	movs	r0, r6
 8003708:	f000 f888 	bl	800381c <__malloc_lock>
 800370c:	4925      	ldr	r1, [pc, #148]	; (80037a4 <_malloc_r+0xb4>)
 800370e:	680a      	ldr	r2, [r1, #0]
 8003710:	0014      	movs	r4, r2
 8003712:	2c00      	cmp	r4, #0
 8003714:	d11a      	bne.n	800374c <_malloc_r+0x5c>
 8003716:	4f24      	ldr	r7, [pc, #144]	; (80037a8 <_malloc_r+0xb8>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <_malloc_r+0x38>
 800371e:	0021      	movs	r1, r4
 8003720:	0030      	movs	r0, r6
 8003722:	f000 f869 	bl	80037f8 <_sbrk_r>
 8003726:	6038      	str	r0, [r7, #0]
 8003728:	0029      	movs	r1, r5
 800372a:	0030      	movs	r0, r6
 800372c:	f000 f864 	bl	80037f8 <_sbrk_r>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d12b      	bne.n	800378c <_malloc_r+0x9c>
 8003734:	230c      	movs	r3, #12
 8003736:	0030      	movs	r0, r6
 8003738:	6033      	str	r3, [r6, #0]
 800373a:	f000 f877 	bl	800382c <__malloc_unlock>
 800373e:	e003      	b.n	8003748 <_malloc_r+0x58>
 8003740:	2d00      	cmp	r5, #0
 8003742:	dade      	bge.n	8003702 <_malloc_r+0x12>
 8003744:	230c      	movs	r3, #12
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	2000      	movs	r0, #0
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	1b5b      	subs	r3, r3, r5
 8003750:	d419      	bmi.n	8003786 <_malloc_r+0x96>
 8003752:	2b0b      	cmp	r3, #11
 8003754:	d903      	bls.n	800375e <_malloc_r+0x6e>
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	18e4      	adds	r4, r4, r3
 800375a:	6025      	str	r5, [r4, #0]
 800375c:	e003      	b.n	8003766 <_malloc_r+0x76>
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	42a2      	cmp	r2, r4
 8003762:	d10e      	bne.n	8003782 <_malloc_r+0x92>
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	0030      	movs	r0, r6
 8003768:	f000 f860 	bl	800382c <__malloc_unlock>
 800376c:	0020      	movs	r0, r4
 800376e:	2207      	movs	r2, #7
 8003770:	300b      	adds	r0, #11
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	4390      	bics	r0, r2
 8003776:	1ac2      	subs	r2, r0, r3
 8003778:	4298      	cmp	r0, r3
 800377a:	d0e6      	beq.n	800374a <_malloc_r+0x5a>
 800377c:	1a1b      	subs	r3, r3, r0
 800377e:	50a3      	str	r3, [r4, r2]
 8003780:	e7e3      	b.n	800374a <_malloc_r+0x5a>
 8003782:	6053      	str	r3, [r2, #4]
 8003784:	e7ef      	b.n	8003766 <_malloc_r+0x76>
 8003786:	0022      	movs	r2, r4
 8003788:	6864      	ldr	r4, [r4, #4]
 800378a:	e7c2      	b.n	8003712 <_malloc_r+0x22>
 800378c:	2303      	movs	r3, #3
 800378e:	1cc4      	adds	r4, r0, #3
 8003790:	439c      	bics	r4, r3
 8003792:	42a0      	cmp	r0, r4
 8003794:	d0e1      	beq.n	800375a <_malloc_r+0x6a>
 8003796:	1a21      	subs	r1, r4, r0
 8003798:	0030      	movs	r0, r6
 800379a:	f000 f82d 	bl	80037f8 <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d1db      	bne.n	800375a <_malloc_r+0x6a>
 80037a2:	e7c7      	b.n	8003734 <_malloc_r+0x44>
 80037a4:	20000108 	.word	0x20000108
 80037a8:	2000010c 	.word	0x2000010c

080037ac <_realloc_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	0007      	movs	r7, r0
 80037b0:	000d      	movs	r5, r1
 80037b2:	0016      	movs	r6, r2
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d105      	bne.n	80037c4 <_realloc_r+0x18>
 80037b8:	0011      	movs	r1, r2
 80037ba:	f7ff ff99 	bl	80036f0 <_malloc_r>
 80037be:	0004      	movs	r4, r0
 80037c0:	0020      	movs	r0, r4
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d103      	bne.n	80037d0 <_realloc_r+0x24>
 80037c8:	f7ff ff48 	bl	800365c <_free_r>
 80037cc:	0034      	movs	r4, r6
 80037ce:	e7f7      	b.n	80037c0 <_realloc_r+0x14>
 80037d0:	f000 f834 	bl	800383c <_malloc_usable_size_r>
 80037d4:	002c      	movs	r4, r5
 80037d6:	42b0      	cmp	r0, r6
 80037d8:	d2f2      	bcs.n	80037c0 <_realloc_r+0x14>
 80037da:	0031      	movs	r1, r6
 80037dc:	0038      	movs	r0, r7
 80037de:	f7ff ff87 	bl	80036f0 <_malloc_r>
 80037e2:	1e04      	subs	r4, r0, #0
 80037e4:	d0ec      	beq.n	80037c0 <_realloc_r+0x14>
 80037e6:	0029      	movs	r1, r5
 80037e8:	0032      	movs	r2, r6
 80037ea:	f7ff ff1a 	bl	8003622 <memcpy>
 80037ee:	0029      	movs	r1, r5
 80037f0:	0038      	movs	r0, r7
 80037f2:	f7ff ff33 	bl	800365c <_free_r>
 80037f6:	e7e3      	b.n	80037c0 <_realloc_r+0x14>

080037f8 <_sbrk_r>:
 80037f8:	2300      	movs	r3, #0
 80037fa:	b570      	push	{r4, r5, r6, lr}
 80037fc:	4d06      	ldr	r5, [pc, #24]	; (8003818 <_sbrk_r+0x20>)
 80037fe:	0004      	movs	r4, r0
 8003800:	0008      	movs	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd fb66 	bl	8000ed4 <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d103      	bne.n	8003814 <_sbrk_r+0x1c>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d000      	beq.n	8003814 <_sbrk_r+0x1c>
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	200001e0 	.word	0x200001e0

0800381c <__malloc_lock>:
 800381c:	b510      	push	{r4, lr}
 800381e:	4802      	ldr	r0, [pc, #8]	; (8003828 <__malloc_lock+0xc>)
 8003820:	f000 f814 	bl	800384c <__retarget_lock_acquire_recursive>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	200001e8 	.word	0x200001e8

0800382c <__malloc_unlock>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4802      	ldr	r0, [pc, #8]	; (8003838 <__malloc_unlock+0xc>)
 8003830:	f000 f80d 	bl	800384e <__retarget_lock_release_recursive>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	200001e8 	.word	0x200001e8

0800383c <_malloc_usable_size_r>:
 800383c:	1f0b      	subs	r3, r1, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1f18      	subs	r0, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	da01      	bge.n	800384a <_malloc_usable_size_r+0xe>
 8003846:	580b      	ldr	r3, [r1, r0]
 8003848:	18c0      	adds	r0, r0, r3
 800384a:	4770      	bx	lr

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
