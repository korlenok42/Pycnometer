
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe8  08002fe8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe8  08002fe8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000080  08003070  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003070  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009390  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d9  00000000  00000000  00029438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f96a  00000000  00000000  0002bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a757  00000000  00000000  0003b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060ecc  00000000  00000000  00045f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6e4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002428  00000000  00000000  000a6ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f5c 	.word	0x08002f5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08002f5c 	.word	0x08002f5c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	801a      	strh	r2, [r3, #0]
  // Start button "on" - start timer
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2b02      	cmp	r3, #2
 8000246:	d103      	bne.n	8000250 <HAL_GPIO_EXTI_Callback+0x1c>
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <HAL_GPIO_EXTI_Callback+0x5c>)
 800024a:	2201      	movs	r2, #1
 800024c:	701a      	strb	r2, [r3, #0]

    __NOP();

  }

}
 800024e:	e01b      	b.n	8000288 <HAL_GPIO_EXTI_Callback+0x54>
  else if(GPIO_Pin == Stop_Pin) {
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d10b      	bne.n	8000270 <HAL_GPIO_EXTI_Callback+0x3c>
	  TimerFlag = 0;
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <HAL_GPIO_EXTI_Callback+0x5c>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	00d9      	lsls	r1, r3, #3
 8000262:	2390      	movs	r3, #144	; 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2200      	movs	r2, #0
 8000268:	0018      	movs	r0, r3
 800026a:	f000 ffef 	bl	800124c <HAL_GPIO_WritePin>
}
 800026e:	e00b      	b.n	8000288 <HAL_GPIO_EXTI_Callback+0x54>
  else if(GPIO_Pin == ENC_BUT_Pin){
 8000270:	1dbb      	adds	r3, r7, #6
 8000272:	881a      	ldrh	r2, [r3, #0]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	429a      	cmp	r2, r3
 800027a:	d104      	bne.n	8000286 <HAL_GPIO_EXTI_Callback+0x52>
	  __HAL_TIM_SET_COUNTER(&htim3, 30);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <HAL_GPIO_EXTI_Callback+0x60>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	221e      	movs	r2, #30
 8000282:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000284:	e000      	b.n	8000288 <HAL_GPIO_EXTI_Callback+0x54>
    __NOP();
 8000286:	46c0      	nop			; (mov r8, r8)
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000a0 	.word	0x200000a0
 8000294:	200000bc 	.word	0x200000bc

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029e:	f000 fd2b 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a2:	f000 f89f 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a6:	f000 f991 	bl	80005cc <MX_GPIO_Init>
  MX_TIM3_Init();
 80002aa:	f000 f92d 	bl	8000508 <MX_TIM3_Init>
  MX_TIM2_Init();
 80002ae:	f000 f8d9 	bl	8000464 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t _StartValue = 0;
 80002b2:	1dfb      	adds	r3, r7, #7
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
  uint8_t _Enc_Counter = 0;
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002be:	4b3f      	ldr	r3, [pc, #252]	; (80003bc <main+0x124>)
 80002c0:	213c      	movs	r1, #60	; 0x3c
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 fd8c 	bl	8001de0 <HAL_TIM_Encoder_Start>

  /* Sent data to HC595 and show number on LEDs*/
  HAL_TIM_Base_Start_IT(&htim2);
 80002c8:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <main+0x128>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fc94 	bl	8001bf8 <HAL_TIM_Base_Start_IT>

  // Reset LEDs
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 80002d0:	4b3c      	ldr	r3, [pc, #240]	; (80003c4 <main+0x12c>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	2102      	movs	r1, #2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 ffb8 	bl	800124c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 80002dc:	4b39      	ldr	r3, [pc, #228]	; (80003c4 <main+0x12c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	2101      	movs	r1, #1
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 ffb2 	bl	800124c <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(!LEDsFlag && (LED_Counter < DIGITS_NUM))
 80002e8:	4b37      	ldr	r3, [pc, #220]	; (80003c8 <main+0x130>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d116      	bne.n	800031e <main+0x86>
 80002f0:	4b36      	ldr	r3, [pc, #216]	; (80003cc <main+0x134>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d812      	bhi.n	800031e <main+0x86>
	  {
	  	  LEDsFlag = 1;
 80002f8:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <main+0x130>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]

	  	  if(StartFlag) SEG_LCD_Process(LED_Counter);
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <main+0x138>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d004      	beq.n	8000310 <main+0x78>
 8000306:	4b31      	ldr	r3, [pc, #196]	; (80003cc <main+0x134>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	0018      	movs	r0, r3
 800030c:	f000 faf8 	bl	8000900 <SEG_LCD_Process>
	  	  if(!StartFlag) StartFlag = 1;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <main+0x138>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <main+0x86>
 8000318:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <main+0x138>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
	  }

	  if(IndicatorsFlag && !TimerFlag)
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <main+0x13c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d019      	beq.n	800035a <main+0xc2>
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <main+0x140>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d115      	bne.n	800035a <main+0xc2>
	  {
		  // Read encoder data
		  _Enc_Counter = TIM3->CNT;
 800032e:	4b2b      	ldr	r3, [pc, #172]	; (80003dc <main+0x144>)
 8000330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000332:	1dbb      	adds	r3, r7, #6
 8000334:	701a      	strb	r2, [r3, #0]
		  _StartValue = _Enc_Counter/2;
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	1dba      	adds	r2, r7, #6
 800033a:	7812      	ldrb	r2, [r2, #0]
 800033c:	0852      	lsrs	r2, r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		  TimerCounter = _StartValue;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <main+0x148>)
 8000342:	1dfa      	adds	r2, r7, #7
 8000344:	7812      	ldrb	r2, [r2, #0]
 8000346:	701a      	strb	r2, [r3, #0]
	  	  SEG_LCD_WriteNumber(_StartValue);
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	0018      	movs	r0, r3
 800034e:	f000 fac1 	bl	80008d4 <SEG_LCD_WriteNumber>
	  	  IndicatorsFlag = 0;
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <main+0x13c>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
 8000358:	e02e      	b.n	80003b8 <main+0x120>
	  }

	  else if (IndicatorsFlag && TimerFlag)
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <main+0x13c>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d029      	beq.n	80003b6 <main+0x11e>
 8000362:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <main+0x140>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d025      	beq.n	80003b6 <main+0x11e>
	  {
		  if (TimerCounter == _StartValue) HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, SET);
 800036a:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <main+0x148>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	1dfa      	adds	r2, r7, #7
 8000370:	7812      	ldrb	r2, [r2, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d107      	bne.n	8000386 <main+0xee>
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	00d9      	lsls	r1, r3, #3
 800037a:	2390      	movs	r3, #144	; 0x90
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2201      	movs	r2, #1
 8000380:	0018      	movs	r0, r3
 8000382:	f000 ff63 	bl	800124c <HAL_GPIO_WritePin>

		  if (TimerCounter == 0)
 8000386:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <main+0x148>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10a      	bne.n	80003a4 <main+0x10c>
		  {
		  		TimerFlag = 0;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <main+0x140>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
		  		HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	00d9      	lsls	r1, r3, #3
 8000398:	2390      	movs	r3, #144	; 0x90
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	2200      	movs	r2, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 ff54 	bl	800124c <HAL_GPIO_WritePin>
		  }

		  SEG_LCD_WriteNumber(TimerCounter);
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <main+0x148>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 fa93 	bl	80008d4 <SEG_LCD_WriteNumber>
		  IndicatorsFlag = 0;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0x13c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
 80003b4:	e000      	b.n	80003b8 <main+0x120>

	  }

	  else {__NOP();}
 80003b6:	46c0      	nop			; (mov r8, r8)
	  if(!LEDsFlag && (LED_Counter < DIGITS_NUM))
 80003b8:	e796      	b.n	80002e8 <main+0x50>
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	200000bc 	.word	0x200000bc
 80003c0:	20000104 	.word	0x20000104
 80003c4:	48001400 	.word	0x48001400
 80003c8:	200000a1 	.word	0x200000a1
 80003cc:	200000aa 	.word	0x200000aa
 80003d0:	2000009e 	.word	0x2000009e
 80003d4:	2000009f 	.word	0x2000009f
 80003d8:	200000a0 	.word	0x200000a0
 80003dc:	40000400 	.word	0x40000400
 80003e0:	2000009d 	.word	0x2000009d

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b091      	sub	sp, #68	; 0x44
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	2410      	movs	r4, #16
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	0018      	movs	r0, r3
 80003f0:	2330      	movs	r3, #48	; 0x30
 80003f2:	001a      	movs	r2, r3
 80003f4:	2100      	movs	r1, #0
 80003f6:	f002 f96f 	bl	80026d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fa:	003b      	movs	r3, r7
 80003fc:	0018      	movs	r0, r3
 80003fe:	2310      	movs	r3, #16
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f002 f968 	bl	80026d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	0021      	movs	r1, r4
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2202      	movs	r2, #2
 800040e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2201      	movs	r2, #1
 8000414:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	187b      	adds	r3, r7, r1
 8000424:	0018      	movs	r0, r3
 8000426:	f000 ff4b 	bl	80012c0 <HAL_RCC_OscConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800042e:	f000 f965 	bl	80006fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	003b      	movs	r3, r7
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044a:	003b      	movs	r3, r7
 800044c:	2100      	movs	r1, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fa50 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000458:	f000 f950 	bl	80006fc <Error_Handler>
  }
}
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	b011      	add	sp, #68	; 0x44
 8000462:	bd90      	pop	{r4, r7, pc}

08000464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046a:	2308      	movs	r3, #8
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	0018      	movs	r0, r3
 8000470:	2310      	movs	r3, #16
 8000472:	001a      	movs	r2, r3
 8000474:	2100      	movs	r1, #0
 8000476:	f002 f92f 	bl	80026d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047a:	003b      	movs	r3, r7
 800047c:	0018      	movs	r0, r3
 800047e:	2308      	movs	r3, #8
 8000480:	001a      	movs	r2, r3
 8000482:	2100      	movs	r1, #0
 8000484:	f002 f928 	bl	80026d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <MX_TIM2_Init+0xa0>)
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	05d2      	lsls	r2, r2, #23
 800048e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_TIM2_Init+0xa0>)
 8000492:	2263      	movs	r2, #99	; 0x63
 8000494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_TIM2_Init+0xa0>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_TIM2_Init+0xa0>)
 800049e:	2227      	movs	r2, #39	; 0x27
 80004a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_TIM2_Init+0xa0>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_TIM2_Init+0xa0>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_TIM2_Init+0xa0>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fb51 	bl	8001b58 <HAL_TIM_Base_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80004ba:	f000 f91f 	bl	80006fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004be:	2108      	movs	r1, #8
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	0152      	lsls	r2, r2, #5
 80004c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004c8:	187a      	adds	r2, r7, r1
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_TIM2_Init+0xa0>)
 80004cc:	0011      	movs	r1, r2
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fe40 	bl	8002154 <HAL_TIM_ConfigClockSource>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004d8:	f000 f910 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004dc:	003b      	movs	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	003a      	movs	r2, r7
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_TIM2_Init+0xa0>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f860 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004f8:	f000 f900 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b006      	add	sp, #24
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000104 	.word	0x20000104

08000508 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b08d      	sub	sp, #52	; 0x34
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800050e:	240c      	movs	r4, #12
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2324      	movs	r3, #36	; 0x24
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f002 f8dd 	bl	80026d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2308      	movs	r3, #8
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f002 f8d6 	bl	80026d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_TIM3_Init+0xbc>)
 800052e:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <MX_TIM3_Init+0xc0>)
 8000530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_TIM3_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_TIM3_Init+0xbc>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 800053e:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <MX_TIM3_Init+0xbc>)
 8000540:	22c8      	movs	r2, #200	; 0xc8
 8000542:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_TIM3_Init+0xbc>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054a:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MX_TIM3_Init+0xbc>)
 800054c:	2200      	movs	r2, #0
 800054e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000550:	0021      	movs	r1, r4
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000588:	187a      	adds	r2, r7, r1
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_TIM3_Init+0xbc>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fb7e 	bl	8001c90 <HAL_TIM_Encoder_Init>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000598:	f000 f8b0 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_TIM3_Init+0xbc>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 f800 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005b8:	f000 f8a0 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b00d      	add	sp, #52	; 0x34
 80005c2:	bd90      	pop	{r4, r7, pc}
 80005c4:	200000bc 	.word	0x200000bc
 80005c8:	40000400 	.word	0x40000400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b089      	sub	sp, #36	; 0x24
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	240c      	movs	r4, #12
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	0018      	movs	r0, r3
 80005d8:	2314      	movs	r3, #20
 80005da:	001a      	movs	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f002 f87b 	bl	80026d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <MX_GPIO_Init+0x124>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b42      	ldr	r3, [pc, #264]	; (80006f0 <MX_GPIO_Init+0x124>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	03c9      	lsls	r1, r1, #15
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <MX_GPIO_Init+0x124>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	03db      	lsls	r3, r3, #15
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <MX_GPIO_Init+0x124>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <MX_GPIO_Init+0x124>)
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0289      	lsls	r1, r1, #10
 8000608:	430a      	orrs	r2, r1
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <MX_GPIO_Init+0x124>)
 800060e:	695a      	ldr	r2, [r3, #20]
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	029b      	lsls	r3, r3, #10
 8000614:	4013      	ands	r3, r2
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800061a:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <MX_GPIO_Init+0x128>)
 800061c:	2200      	movs	r2, #0
 800061e:	2103      	movs	r1, #3
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fe13 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin, GPIO_PIN_RESET);
 8000626:	2387      	movs	r3, #135	; 0x87
 8000628:	00d9      	lsls	r1, r3, #3
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2200      	movs	r2, #0
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fe0b 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2203      	movs	r2, #3
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2201      	movs	r2, #1
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800064e:	193b      	adds	r3, r7, r4
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <MX_GPIO_Init+0x128>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 fc91 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2284      	movs	r2, #132	; 0x84
 8000664:	0392      	lsls	r2, r2, #14
 8000666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2202      	movs	r2, #2
 800066c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 800066e:	193a      	adds	r2, r7, r4
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fc80 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Start_Pin ENC_BUT_Pin */
  GPIO_InitStruct.Pin = Start_Pin|ENC_BUT_Pin;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_GPIO_Init+0x12c>)
 8000680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2288      	movs	r2, #136	; 0x88
 8000686:	0352      	lsls	r2, r2, #13
 8000688:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2202      	movs	r2, #2
 800068e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	193a      	adds	r2, r7, r4
 8000692:	2390      	movs	r3, #144	; 0x90
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	0011      	movs	r1, r2
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fc6f 	bl	8000f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DS_Pin Latch_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin;
 800069e:	0021      	movs	r1, r4
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2287      	movs	r2, #135	; 0x87
 80006a4:	00d2      	lsls	r2, r2, #3
 80006a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2201      	movs	r2, #1
 80006ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fc5a 	bl	8000f7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2005      	movs	r0, #5
 80006ce:	f000 fc23 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80006d2:	2005      	movs	r0, #5
 80006d4:	f000 fc35 	bl	8000f42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2007      	movs	r0, #7
 80006de:	f000 fc1b 	bl	8000f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006e2:	2007      	movs	r0, #7
 80006e4:	f000 fc2d 	bl	8000f42 <HAL_NVIC_EnableIRQ>

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b009      	add	sp, #36	; 0x24
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48001400 	.word	0x48001400
 80006f8:	00000202 	.word	0x00000202

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HC595SendData>:
static uint8_t currentDigitIndex = 0;

/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void HC595SendData(uint8_t dig_num, uint8_t reg_count)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	0002      	movs	r2, r0
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	1dbb      	adds	r3, r7, #6
 8000716:	1c0a      	adds	r2, r1, #0
 8000718:	701a      	strb	r2, [r3, #0]
   /* - STEP1, serial input pin*/
   if ((currentCharacters[dig_num] & (1 << reg_count)) != 0 )
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <HC595SendData+0x60>)
 8000720:	5cd3      	ldrb	r3, [r2, r3]
 8000722:	001a      	movs	r2, r3
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	411a      	asrs	r2, r3
 800072a:	0013      	movs	r3, r2
 800072c:	2201      	movs	r2, #1
 800072e:	4013      	ands	r3, r2
 8000730:	d007      	beq.n	8000742 <HC595SendData+0x3a>
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8000732:	2390      	movs	r3, #144	; 0x90
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	2201      	movs	r2, #1
 8000738:	2110      	movs	r1, #16
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fd86 	bl	800124c <HAL_GPIO_WritePin>
 8000740:	e006      	b.n	8000750 <HC595SendData+0x48>
   else
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8000742:	2390      	movs	r3, #144	; 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	2110      	movs	r1, #16
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fd7e 	bl	800124c <HAL_GPIO_WritePin>

    /* - STEP2, SHCP occurs once, 74HC595 will get current data from the DS pin */
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 8000750:	2390      	movs	r3, #144	; 0x90
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2200      	movs	r2, #0
 8000756:	2108      	movs	r1, #8
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fd77 	bl	800124c <HAL_GPIO_WritePin>

  /* - STEP3, after all the 8-bit data of the shift register is over, the rising edge of the latch clock pin (first pull low level is high) */
/*  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
  HAL_Delay(4);
  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);*/
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	200000a4 	.word	0x200000a4

0800076c <SetOutput>:

/*----------------------------------------------------------------------------*/
static void SetOutput(McuPin output, uint8_t state)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	2408      	movs	r4, #8
 8000774:	193b      	adds	r3, r7, r4
 8000776:	6018      	str	r0, [r3, #0]
 8000778:	6059      	str	r1, [r3, #4]
 800077a:	1dfb      	adds	r3, r7, #7
 800077c:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(output.port, output.pin, (GPIO_PinState)state);
 800077e:	193b      	adds	r3, r7, r4
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	193b      	adds	r3, r7, r4
 8000784:	8899      	ldrh	r1, [r3, #4]
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	001a      	movs	r2, r3
 800078c:	f000 fd5e 	bl	800124c <HAL_GPIO_WritePin>
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b005      	add	sp, #20
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <SEG_LCD_WriteString>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteString(char* str)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint8_t currentDigitIndex = 0;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 80007a8:	230e      	movs	r3, #14
 80007aa:	18fb      	adds	r3, r7, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e00f      	b.n	80007d2 <SEG_LCD_WriteString+0x3a>
  {
    currentCharacters[i] = 0x00;
 80007b2:	200e      	movs	r0, #14
 80007b4:	183b      	adds	r3, r7, r0
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4a43      	ldr	r2, [pc, #268]	; (80008c8 <SEG_LCD_WriteString+0x130>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	54d1      	strb	r1, [r2, r3]
    currentDots[i] = 0;
 80007be:	183b      	adds	r3, r7, r0
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4a42      	ldr	r2, [pc, #264]	; (80008cc <SEG_LCD_WriteString+0x134>)
 80007c4:	2100      	movs	r1, #0
 80007c6:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 80007c8:	183b      	adds	r3, r7, r0
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	183b      	adds	r3, r7, r0
 80007ce:	3201      	adds	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	230e      	movs	r3, #14
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d9ea      	bls.n	80007b2 <SEG_LCD_WriteString+0x1a>
  }
  while(*str != '\0')
 80007dc:	e023      	b.n	8000826 <SEG_LCD_WriteString+0x8e>
  {
	  if ((*str >= ASCII_NUMBER_FIRST_CODE) && (*str <= ASCII_NUMBER_LAST_CODE))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b2f      	cmp	r3, #47	; 0x2f
 80007e4:	d917      	bls.n	8000816 <SEG_LCD_WriteString+0x7e>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b39      	cmp	r3, #57	; 0x39
 80007ec:	d813      	bhi.n	8000816 <SEG_LCD_WriteString+0x7e>
	  {
		  uint8_t currentCharacterIndex = (*str - ASCII_NUMBER_FIRST_CODE);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	210b      	movs	r1, #11
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	3a30      	subs	r2, #48	; 0x30
 80007f8:	701a      	strb	r2, [r3, #0]
		  currentCharacters[currentDigitIndex] = charactersTable[currentCharacterIndex];
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	200f      	movs	r0, #15
 8000800:	183b      	adds	r3, r7, r0
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4932      	ldr	r1, [pc, #200]	; (80008d0 <SEG_LCD_WriteString+0x138>)
 8000806:	5c89      	ldrb	r1, [r1, r2]
 8000808:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <SEG_LCD_WriteString+0x130>)
 800080a:	54d1      	strb	r1, [r2, r3]
		  currentDigitIndex++;
 800080c:	183b      	adds	r3, r7, r0
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	183b      	adds	r3, r7, r0
 8000812:	3201      	adds	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
	  }

	  if (currentDigitIndex == DIGITS_NUM)
 8000816:	230f      	movs	r3, #15
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d007      	beq.n	8000830 <SEG_LCD_WriteString+0x98>
	  {
		 break;
	  }
	  str++;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3301      	adds	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1d7      	bne.n	80007de <SEG_LCD_WriteString+0x46>
 800082e:	e000      	b.n	8000832 <SEG_LCD_WriteString+0x9a>
		 break;
 8000830:	46c0      	nop			; (mov r8, r8)
  }

  if (currentDigitIndex < DIGITS_NUM)
 8000832:	220f      	movs	r2, #15
 8000834:	18bb      	adds	r3, r7, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d83f      	bhi.n	80008bc <SEG_LCD_WriteString+0x124>
  {
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 800083c:	18bb      	adds	r3, r7, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	3b01      	subs	r3, #1
 8000842:	b2da      	uxtb	r2, r3
 8000844:	230d      	movs	r3, #13
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e018      	b.n	800087e <SEG_LCD_WriteString+0xe6>
    {
      currentCharacters[i + (DIGITS_NUM - currentDigitIndex)] = currentCharacters[i];
 800084c:	240d      	movs	r4, #13
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2200      	movs	r2, #0
 8000852:	569a      	ldrsb	r2, [r3, r2]
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2100      	movs	r1, #0
 8000858:	5659      	ldrsb	r1, [r3, r1]
 800085a:	230f      	movs	r3, #15
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2002      	movs	r0, #2
 8000862:	1ac3      	subs	r3, r0, r3
 8000864:	18cb      	adds	r3, r1, r3
 8000866:	4918      	ldr	r1, [pc, #96]	; (80008c8 <SEG_LCD_WriteString+0x130>)
 8000868:	5c89      	ldrb	r1, [r1, r2]
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <SEG_LCD_WriteString+0x130>)
 800086c:	54d1      	strb	r1, [r2, r3]
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 800086e:	193b      	adds	r3, r7, r4
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	193b      	adds	r3, r7, r4
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	230d      	movs	r3, #13
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b7f      	cmp	r3, #127	; 0x7f
 8000886:	d9e1      	bls.n	800084c <SEG_LCD_WriteString+0xb4>
    }
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 8000888:	230c      	movs	r3, #12
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e00a      	b.n	80008a8 <SEG_LCD_WriteString+0x110>
    {
      currentCharacters[i] = 0xFC;
 8000892:	200c      	movs	r0, #12
 8000894:	183b      	adds	r3, r7, r0
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <SEG_LCD_WriteString+0x130>)
 800089a:	21fc      	movs	r1, #252	; 0xfc
 800089c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 800089e:	183b      	adds	r3, r7, r0
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	183b      	adds	r3, r7, r0
 80008a4:	3201      	adds	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	230c      	movs	r3, #12
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	230f      	movs	r3, #15
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2102      	movs	r1, #2
 80008b6:	1acb      	subs	r3, r1, r3
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbea      	blt.n	8000892 <SEG_LCD_WriteString+0xfa>
    }
  }
  return SEG_LCD_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	0018      	movs	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b005      	add	sp, #20
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	200000a4 	.word	0x200000a4
 80008cc:	200000a8 	.word	0x200000a8
 80008d0:	08002f98 	.word	0x08002f98

080008d4 <SEG_LCD_WriteNumber>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteNumber(uint32_t number)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  char temp[DIGITS_NUM];
  snprintf(temp, DIGITS_NUM+2, "%d", number);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <SEG_LCD_WriteNumber+0x28>)
 80008e0:	240c      	movs	r4, #12
 80008e2:	1938      	adds	r0, r7, r4
 80008e4:	2104      	movs	r1, #4
 80008e6:	f001 feff 	bl	80026e8 <sniprintf>



  SEG_LCD_WriteString(temp);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff ff53 	bl	8000798 <SEG_LCD_WriteString>

  return SEG_LCD_OK;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b005      	add	sp, #20
 80008fa:	bd90      	pop	{r4, r7, pc}
 80008fc:	08002f74 	.word	0x08002f74

08000900 <SEG_LCD_Process>:

/*----------------------------------------------------------------------------*/
void SEG_LCD_Process(uint8_t dig_num)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
  // выбор земленного пина (на землю)
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 800090c:	230f      	movs	r3, #15
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e00f      	b.n	8000936 <SEG_LCD_Process+0x36>
  {
    SetOutput(digitPins[i], PIN_ACTIVE);
 8000916:	240f      	movs	r4, #15
 8000918:	193b      	adds	r3, r7, r4
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <SEG_LCD_Process+0x5c>)
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	2201      	movs	r2, #1
 8000922:	5858      	ldr	r0, [r3, r1]
 8000924:	18cb      	adds	r3, r1, r3
 8000926:	6859      	ldr	r1, [r3, #4]
 8000928:	f7ff ff20 	bl	800076c <SetOutput>
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 800092c:	193b      	adds	r3, r7, r4
 800092e:	781a      	ldrb	r2, [r3, #0]
 8000930:	193b      	adds	r3, r7, r4
 8000932:	3201      	adds	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	230f      	movs	r3, #15
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d9ea      	bls.n	8000916 <SEG_LCD_Process+0x16>
  // SetOutput(digitPins[dig_num], PIN_ACTIVE);

  // выбор значения на индикаторе
  // HC595SendData(currentCharacters[dig_num]);

  SetOutput(digitPins[dig_num], !PIN_ACTIVE);
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4905      	ldr	r1, [pc, #20]	; (800095c <SEG_LCD_Process+0x5c>)
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	2200      	movs	r2, #0
 800094a:	5858      	ldr	r0, [r3, r1]
 800094c:	18cb      	adds	r3, r1, r3
 800094e:	6859      	ldr	r1, [r3, #4]
 8000950:	f7ff ff0c 	bl	800076c <SetOutput>

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b005      	add	sp, #20
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	20000000 	.word	0x20000000

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	619a      	str	r2, [r3, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	69da      	ldr	r2, [r3, #28]
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0549      	lsls	r1, r1, #21
 8000988:	430a      	orrs	r2, r1
 800098a:	61da      	str	r2, [r3, #28]
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <HAL_MspInit+0x44>)
 800098e:	69da      	ldr	r2, [r3, #28]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	055b      	lsls	r3, r3, #21
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d113      	bne.n	80009e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009be:	69da      	ldr	r2, [r3, #28]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	430a      	orrs	r2, r1
 80009c6:	61da      	str	r2, [r3, #28]
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_TIM_Base_MspInit+0x44>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	200f      	movs	r0, #15
 80009da:	f000 fa9d 	bl	8000f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 faaf 	bl	8000f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b004      	add	sp, #16
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	2414      	movs	r4, #20
 80009fa:	193b      	adds	r3, r7, r4
 80009fc:	0018      	movs	r0, r3
 80009fe:	2314      	movs	r3, #20
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f001 fe68 	bl	80026d8 <memset>
  if(htim_encoder->Instance==TIM3)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d130      	bne.n	8000a74 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a14:	69da      	ldr	r2, [r3, #28]
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a18:	2102      	movs	r1, #2
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	61da      	str	r2, [r3, #28]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	2202      	movs	r2, #2
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a2c:	695a      	ldr	r2, [r3, #20]
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0289      	lsls	r1, r1, #10
 8000a34:	430a      	orrs	r2, r1
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a3a:	695a      	ldr	r2, [r3, #20]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	029b      	lsls	r3, r3, #10
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	22c0      	movs	r2, #192	; 0xc0
 8000a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2202      	movs	r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2201      	movs	r2, #1
 8000a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2201      	movs	r2, #1
 8000a64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	187a      	adds	r2, r7, r1
 8000a68:	2390      	movs	r3, #144	; 0x90
 8000a6a:	05db      	lsls	r3, r3, #23
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 fa84 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b00b      	add	sp, #44	; 0x2c
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	40000400 	.word	0x40000400
 8000a80:	40021000 	.word	0x40021000

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f96e 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  if (TimerFlag){
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <SysTick_Handler+0x40>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d014      	beq.n	8000ade <SysTick_Handler+0x3a>

	  _localCounter++;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <SysTick_Handler+0x44>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SysTick_Handler+0x44>)
 8000abe:	801a      	strh	r2, [r3, #0]

	  // a minute
	  if (_localCounter > 1000) {
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <SysTick_Handler+0x44>)
 8000ac2:	881a      	ldrh	r2, [r3, #0]
 8000ac4:	23fa      	movs	r3, #250	; 0xfa
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d908      	bls.n	8000ade <SysTick_Handler+0x3a>
		  TimerCounter = TimerCounter - 1;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <SysTick_Handler+0x48>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Handler+0x48>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		  _localCounter = 0;
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <SysTick_Handler+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	801a      	strh	r2, [r3, #0]
	  }
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000a0 	.word	0x200000a0
 8000ae8:	200000ac 	.word	0x200000ac
 8000aec:	2000009d 	.word	0x2000009d

08000af0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 fbc7 	bl	8001288 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fbc4 	bl	8001288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fbba 	bl	8001288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <TIM2_IRQHandler+0xf4>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fa00 	bl	8001f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if(LEDsFlag)
 8000b28:	4b3a      	ldr	r3, [pc, #232]	; (8000c14 <TIM2_IRQHandler+0xf8>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d06c      	beq.n	8000c0a <TIM2_IRQHandler+0xee>
  {
	  if(Reg_Counter == 0)
 8000b30:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11c      	bne.n	8000b72 <TIM2_IRQHandler+0x56>
	  {
		  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 8000b38:	4b38      	ldr	r3, [pc, #224]	; (8000c1c <TIM2_IRQHandler+0x100>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fb84 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 8000b44:	4b35      	ldr	r3, [pc, #212]	; (8000c1c <TIM2_IRQHandler+0x100>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	2101      	movs	r1, #1
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fb7e 	bl	800124c <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000b50:	2390      	movs	r3, #144	; 0x90
 8000b52:	05db      	lsls	r3, r3, #23
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fb77 	bl	800124c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2201      	movs	r2, #1
 8000b64:	2120      	movs	r1, #32
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fb70 	bl	800124c <HAL_GPIO_WritePin>
		  LEDsFlag = 0;
 8000b6c:	4b29      	ldr	r3, [pc, #164]	; (8000c14 <TIM2_IRQHandler+0xf8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	  }

	   if((Reg_Counter == 0 || Reg_Counter % 2 == 0) && Data_num < 8)
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <TIM2_IRQHandler+0x6c>
 8000b7a:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d112      	bne.n	8000bae <TIM2_IRQHandler+0x92>
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b07      	cmp	r3, #7
 8000b8e:	d80e      	bhi.n	8000bae <TIM2_IRQHandler+0x92>
	   {
	  	  HC595SendData(LED_Counter, Data_num);
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <TIM2_IRQHandler+0x108>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	f7ff fdb4 	bl	8000708 <HC595SendData>
	  	  Data_num++;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e006      	b.n	8000bbc <TIM2_IRQHandler+0xa0>
	   }
	   else
	   {
		   HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000bae:	2390      	movs	r3, #144	; 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fb48 	bl	800124c <HAL_GPIO_WritePin>
	   }

	   Reg_Counter++;
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000bc6:	701a      	strb	r2, [r3, #0]


	   if(Data_num == 8)
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d112      	bne.n	8000bf6 <TIM2_IRQHandler+0xda>
	   {
	  	  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 8000bd0:	2390      	movs	r3, #144	; 0x90
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fb37 	bl	800124c <HAL_GPIO_WritePin>
	  	  Data_num = 0;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <TIM2_IRQHandler+0x104>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

	  	  Reg_Counter = 0;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <TIM2_IRQHandler+0xfc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]


		  LED_Counter++;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <TIM2_IRQHandler+0x108>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <TIM2_IRQHandler+0x108>)
 8000bf4:	701a      	strb	r2, [r3, #0]
	   }

	   if(LED_Counter >= DIGITS_NUM) { LED_Counter = 0; IndicatorsFlag = 1;}
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <TIM2_IRQHandler+0x108>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d905      	bls.n	8000c0a <TIM2_IRQHandler+0xee>
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <TIM2_IRQHandler+0x108>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <TIM2_IRQHandler+0x10c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000104 	.word	0x20000104
 8000c14:	200000a1 	.word	0x200000a1
 8000c18:	2000009c 	.word	0x2000009c
 8000c1c:	48001400 	.word	0x48001400
 8000c20:	200000ab 	.word	0x200000ab
 8000c24:	200000aa 	.word	0x200000aa
 8000c28:	2000009f 	.word	0x2000009f

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f001 fd12 	bl	8002684 <__errno>
 8000c60:	0003      	movs	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	2301      	movs	r3, #1
 8000c68:	425b      	negs	r3, r3
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	18d2      	adds	r2, r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b006      	add	sp, #24
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20001000 	.word	0x20001000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	200000b0 	.word	0x200000b0
 8000c94:	20000160 	.word	0x20000160

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ca6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cce:	f7ff ffe3 	bl	8000c98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cd2:	f001 fcdd 	bl	8002690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cd6:	f7ff fadf 	bl	8000298 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   r0, =_estack
 8000cdc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000ce8:	08002ff0 	.word	0x08002ff0
  ldr r2, =_sbss
 8000cec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000cf0:	20000160 	.word	0x20000160

08000cf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_Init+0x24>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_Init+0x24>)
 8000d02:	2110      	movs	r1, #16
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 f809 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0e:	f7ff fe27 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d2a:	681c      	ldr	r4, [r3, #0]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	0019      	movs	r1, r3
 8000d32:	23fa      	movs	r3, #250	; 0xfa
 8000d34:	0098      	lsls	r0, r3, #2
 8000d36:	f7ff f9f1 	bl	800011c <__udivsi3>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0020      	movs	r0, r4
 8000d40:	f7ff f9ec 	bl	800011c <__udivsi3>
 8000d44:	0003      	movs	r3, r0
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 f90b 	bl	8000f62 <HAL_SYSTICK_Config>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e00f      	b.n	8000d74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d80b      	bhi.n	8000d72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f8d8 	bl	8000f18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_InitTick+0x64>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b003      	add	sp, #12
 8000d7a:	bd90      	pop	{r4, r7, pc}
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000018 	.word	0x20000018
 8000d84:	20000014 	.word	0x20000014

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	18d2      	adds	r2, r2, r3
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	601a      	str	r2, [r3, #0]
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000018 	.word	0x20000018
 8000da8:	2000014c 	.word	0x2000014c

08000dac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	2000014c 	.word	0x2000014c

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000dd2:	d809      	bhi.n	8000de8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd4:	1dfb      	adds	r3, r7, #7
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	001a      	movs	r2, r3
 8000dda:	231f      	movs	r3, #31
 8000ddc:	401a      	ands	r2, r3
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_EnableIRQ+0x30>)
 8000de0:	2101      	movs	r1, #1
 8000de2:	4091      	lsls	r1, r2
 8000de4:	000a      	movs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
  }
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d828      	bhi.n	8000e5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	33c0      	adds	r3, #192	; 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	589b      	ldr	r3, [r3, r2]
 8000e1a:	1dfa      	adds	r2, r7, #7
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	0011      	movs	r1, r2
 8000e20:	2203      	movs	r2, #3
 8000e22:	400a      	ands	r2, r1
 8000e24:	00d2      	lsls	r2, r2, #3
 8000e26:	21ff      	movs	r1, #255	; 0xff
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	43d2      	mvns	r2, r2
 8000e2e:	401a      	ands	r2, r3
 8000e30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	019b      	lsls	r3, r3, #6
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	401a      	ands	r2, r3
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	2303      	movs	r3, #3
 8000e42:	4003      	ands	r3, r0
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e48:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <__NVIC_SetPriority+0xd4>)
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	430a      	orrs	r2, r1
 8000e54:	33c0      	adds	r3, #192	; 0xc0
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e5a:	e031      	b.n	8000ec0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	0019      	movs	r1, r3
 8000e64:	230f      	movs	r3, #15
 8000e66:	400b      	ands	r3, r1
 8000e68:	3b08      	subs	r3, #8
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3306      	adds	r3, #6
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	18d3      	adds	r3, r2, r3
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	1dfa      	adds	r2, r7, #7
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	400a      	ands	r2, r1
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	21ff      	movs	r1, #255	; 0xff
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	22ff      	movs	r2, #255	; 0xff
 8000e94:	401a      	ands	r2, r3
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <__NVIC_SetPriority+0xd8>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	001c      	movs	r4, r3
 8000eac:	230f      	movs	r3, #15
 8000eae:	4023      	ands	r3, r4
 8000eb0:	3b08      	subs	r3, #8
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	3306      	adds	r3, #6
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b003      	add	sp, #12
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1e5a      	subs	r2, r3, #1
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	045b      	lsls	r3, r3, #17
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d301      	bcc.n	8000ee8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e010      	b.n	8000f0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <SysTick_Config+0x44>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	3a01      	subs	r2, #1
 8000eee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff ff7c 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x44>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	210f      	movs	r1, #15
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	1c02      	adds	r2, r0, #0
 8000f28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f7ff ff5d 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	0002      	movs	r2, r0
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff ffaf 	bl	8000ed0 <SysTick_Config>
 8000f72:	0003      	movs	r3, r0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e149      	b.n	8001220 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <HAL_GPIO_Init+0x28>
 8000fa2:	e13a      	b.n	800121a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	43da      	mvns	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	2201      	movs	r2, #1
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	4013      	ands	r3, r2
 8001026:	2b03      	cmp	r3, #3
 8001028:	d017      	beq.n	800105a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	409a      	lsls	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	43da      	mvns	r2, r3
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	4013      	ands	r3, r2
 8001062:	2b02      	cmp	r3, #2
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	58d3      	ldr	r3, [r2, r3]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2207      	movs	r2, #7
 8001078:	4013      	ands	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	43da      	mvns	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2107      	movs	r1, #7
 8001092:	400b      	ands	r3, r1
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	409a      	lsls	r2, r3
 8001098:	0013      	movs	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	6939      	ldr	r1, [r7, #16]
 80010ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	401a      	ands	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	23c0      	movs	r3, #192	; 0xc0
 80010e8:	029b      	lsls	r3, r3, #10
 80010ea:	4013      	ands	r3, r2
 80010ec:	d100      	bne.n	80010f0 <HAL_GPIO_Init+0x174>
 80010ee:	e094      	b.n	800121a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b51      	ldr	r3, [pc, #324]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	4b50      	ldr	r3, [pc, #320]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	430a      	orrs	r2, r1
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <HAL_GPIO_Init+0x2bc>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x2c0>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	589b      	ldr	r3, [r3, r2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2203      	movs	r2, #3
 800111a:	4013      	ands	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	429a      	cmp	r2, r3
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1d6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a41      	ldr	r2, [pc, #260]	; (8001240 <HAL_GPIO_Init+0x2c4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1d2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a40      	ldr	r2, [pc, #256]	; (8001244 <HAL_GPIO_Init+0x2c8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1ce>
 8001146:	2302      	movs	r3, #2
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x1d8>
 800114a:	2305      	movs	r3, #5
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x1d8>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x1d8>
 8001152:	2300      	movs	r3, #0
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	2103      	movs	r1, #3
 8001158:	400a      	ands	r2, r1
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	; (800123c <HAL_GPIO_Init+0x2c0>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001172:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	025b      	lsls	r3, r3, #9
 800118a:	4013      	ands	r3, r2
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43da      	mvns	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	4013      	ands	r3, r2
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	035b      	lsls	r3, r3, #13
 80011de:	4013      	ands	r3, r2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	039b      	lsls	r3, r3, #14
 8001208:	4013      	ands	r3, r2
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_GPIO_Init+0x2cc>)
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	40da      	lsrs	r2, r3
 8001228:	1e13      	subs	r3, r2, #0
 800122a:	d000      	beq.n	800122e <HAL_GPIO_Init+0x2b2>
 800122c:	e6ae      	b.n	8000f8c <HAL_GPIO_Init+0x10>
  } 
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b006      	add	sp, #24
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	48000400 	.word	0x48000400
 8001244:	48000800 	.word	0x48000800
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	0008      	movs	r0, r1
 8001256:	0011      	movs	r1, r2
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	1c02      	adds	r2, r0, #0
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	1c7b      	adds	r3, r7, #1
 8001260:	1c0a      	adds	r2, r1, #0
 8001262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	1c7b      	adds	r3, r7, #1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126c:	1cbb      	adds	r3, r7, #2
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001276:	1cbb      	adds	r3, r7, #2
 8001278:	881a      	ldrh	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dbb      	adds	r3, r7, #6
 8001292:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	1dba      	adds	r2, r7, #6
 800129a:	8812      	ldrh	r2, [r2, #0]
 800129c:	4013      	ands	r3, r2
 800129e:	d008      	beq.n	80012b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80012a2:	1dba      	adds	r2, r7, #6
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7fe ffc1 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e301      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	d100      	bne.n	80012de <HAL_RCC_OscConfig+0x1e>
 80012dc:	e08d      	b.n	80013fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012de:	4bc3      	ldr	r3, [pc, #780]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	220c      	movs	r2, #12
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00e      	beq.n	8001308 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ea:	4bc0      	ldr	r3, [pc, #768]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	220c      	movs	r2, #12
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d116      	bne.n	8001324 <HAL_RCC_OscConfig+0x64>
 80012f6:	4bbd      	ldr	r3, [pc, #756]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	025b      	lsls	r3, r3, #9
 80012fe:	401a      	ands	r2, r3
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	429a      	cmp	r2, r3
 8001306:	d10d      	bne.n	8001324 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4bb8      	ldr	r3, [pc, #736]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d100      	bne.n	8001316 <HAL_RCC_OscConfig+0x56>
 8001314:	e070      	b.n	80013f8 <HAL_RCC_OscConfig+0x138>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d000      	beq.n	8001320 <HAL_RCC_OscConfig+0x60>
 800131e:	e06b      	b.n	80013f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e2d8      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_RCC_OscConfig+0x7c>
 800132c:	4baf      	ldr	r3, [pc, #700]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4bae      	ldr	r3, [pc, #696]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	0249      	lsls	r1, r1, #9
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e02f      	b.n	800139c <HAL_RCC_OscConfig+0xdc>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10c      	bne.n	800135e <HAL_RCC_OscConfig+0x9e>
 8001344:	4ba9      	ldr	r3, [pc, #676]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4ba8      	ldr	r3, [pc, #672]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800134a:	49a9      	ldr	r1, [pc, #676]	; (80015f0 <HAL_RCC_OscConfig+0x330>)
 800134c:	400a      	ands	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	4ba6      	ldr	r3, [pc, #664]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4ba5      	ldr	r3, [pc, #660]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001356:	49a7      	ldr	r1, [pc, #668]	; (80015f4 <HAL_RCC_OscConfig+0x334>)
 8001358:	400a      	ands	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e01e      	b.n	800139c <HAL_RCC_OscConfig+0xdc>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b05      	cmp	r3, #5
 8001364:	d10e      	bne.n	8001384 <HAL_RCC_OscConfig+0xc4>
 8001366:	4ba1      	ldr	r3, [pc, #644]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	02c9      	lsls	r1, r1, #11
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4b9d      	ldr	r3, [pc, #628]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	0249      	lsls	r1, r1, #9
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0xdc>
 8001384:	4b99      	ldr	r3, [pc, #612]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b98      	ldr	r3, [pc, #608]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800138a:	4999      	ldr	r1, [pc, #612]	; (80015f0 <HAL_RCC_OscConfig+0x330>)
 800138c:	400a      	ands	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	4b96      	ldr	r3, [pc, #600]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b95      	ldr	r3, [pc, #596]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001396:	4997      	ldr	r1, [pc, #604]	; (80015f4 <HAL_RCC_OscConfig+0x334>)
 8001398:	400a      	ands	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d014      	beq.n	80013ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fd02 	bl	8000dac <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ae:	f7ff fcfd 	bl	8000dac <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b64      	cmp	r3, #100	; 0x64
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e28a      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c0:	4b8a      	ldr	r3, [pc, #552]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0xee>
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fced 	bl	8000dac <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fce8 	bl	8000dac <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e275      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x118>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x146>
 8001404:	e069      	b.n	80014da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001406:	4b79      	ldr	r3, [pc, #484]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	220c      	movs	r2, #12
 800140c:	4013      	ands	r3, r2
 800140e:	d00b      	beq.n	8001428 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001410:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	220c      	movs	r2, #12
 8001416:	4013      	ands	r3, r2
 8001418:	2b08      	cmp	r3, #8
 800141a:	d11c      	bne.n	8001456 <HAL_RCC_OscConfig+0x196>
 800141c:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	4013      	ands	r3, r2
 8001426:	d116      	bne.n	8001456 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2202      	movs	r2, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d005      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d001      	beq.n	800143e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e24b      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	22f8      	movs	r2, #248	; 0xf8
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00da      	lsls	r2, r3, #3
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001454:	e041      	b.n	80014da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d024      	beq.n	80014a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fc9f 	bl	8000dac <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fc9a 	bl	8000dac <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e227      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001486:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d0f1      	beq.n	8001474 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	22f8      	movs	r2, #248	; 0xf8
 8001496:	4393      	bics	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00da      	lsls	r2, r3, #3
 80014a0:	4b52      	ldr	r3, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e018      	b.n	80014da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	438a      	bics	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc7a 	bl	8000dac <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc75 	bl	8000dac <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e202      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2202      	movs	r2, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d1f1      	bne.n	80014be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	4013      	ands	r3, r2
 80014e2:	d036      	beq.n	8001552 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d019      	beq.n	8001520 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f0:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fc58 	bl	8000dac <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fc53 	bl	8000dac <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e1e0      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	2202      	movs	r2, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d0f1      	beq.n	8001502 <HAL_RCC_OscConfig+0x242>
 800151e:	e018      	b.n	8001552 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fc3e 	bl	8000dac <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fc39 	bl	8000dac <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1c6      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d1f1      	bne.n	8001536 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2204      	movs	r2, #4
 8001558:	4013      	ands	r3, r2
 800155a:	d100      	bne.n	800155e <HAL_RCC_OscConfig+0x29e>
 800155c:	e0b4      	b.n	80016c8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155e:	201f      	movs	r0, #31
 8001560:	183b      	adds	r3, r7, r0
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	055b      	lsls	r3, r3, #21
 800156e:	4013      	ands	r3, r2
 8001570:	d110      	bne.n	8001594 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0549      	lsls	r1, r1, #21
 800157c:	430a      	orrs	r2, r1
 800157e:	61da      	str	r2, [r3, #28]
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 8001582:	69da      	ldr	r2, [r3, #28]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	055b      	lsls	r3, r3, #21
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800158e:	183b      	adds	r3, r7, r0
 8001590:	2201      	movs	r2, #1
 8001592:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_RCC_OscConfig+0x338>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4013      	ands	r3, r2
 800159e:	d11a      	bne.n	80015d6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_RCC_OscConfig+0x338>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_RCC_OscConfig+0x338>)
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	0049      	lsls	r1, r1, #1
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fbfd 	bl	8000dac <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b8:	f7ff fbf8 	bl	8000dac <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e185      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x338>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10e      	bne.n	80015fc <HAL_RCC_OscConfig+0x33c>
 80015de:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_RCC_OscConfig+0x32c>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	621a      	str	r2, [r3, #32]
 80015ea:	e035      	b.n	8001658 <HAL_RCC_OscConfig+0x398>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	fffeffff 	.word	0xfffeffff
 80015f4:	fffbffff 	.word	0xfffbffff
 80015f8:	40007000 	.word	0x40007000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10c      	bne.n	800161e <HAL_RCC_OscConfig+0x35e>
 8001604:	4bb6      	ldr	r3, [pc, #728]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	4bb5      	ldr	r3, [pc, #724]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	4bb3      	ldr	r3, [pc, #716]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	4bb2      	ldr	r3, [pc, #712]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	621a      	str	r2, [r3, #32]
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x398>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x380>
 8001626:	4bae      	ldr	r3, [pc, #696]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001628:	6a1a      	ldr	r2, [r3, #32]
 800162a:	4bad      	ldr	r3, [pc, #692]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800162c:	2104      	movs	r1, #4
 800162e:	430a      	orrs	r2, r1
 8001630:	621a      	str	r2, [r3, #32]
 8001632:	4bab      	ldr	r3, [pc, #684]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	4baa      	ldr	r3, [pc, #680]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001638:	2101      	movs	r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	621a      	str	r2, [r3, #32]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0x398>
 8001640:	4ba7      	ldr	r3, [pc, #668]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	4ba6      	ldr	r3, [pc, #664]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001646:	2101      	movs	r1, #1
 8001648:	438a      	bics	r2, r1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	4ba4      	ldr	r3, [pc, #656]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4ba3      	ldr	r3, [pc, #652]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001652:	2104      	movs	r1, #4
 8001654:	438a      	bics	r2, r1
 8001656:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fba4 	bl	8000dac <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e009      	b.n	800167e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fb9f 	bl	8000dac <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a9b      	ldr	r2, [pc, #620]	; (80018e4 <HAL_RCC_OscConfig+0x624>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e12b      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800167e:	4b98      	ldr	r3, [pc, #608]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	2202      	movs	r2, #2
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x3aa>
 8001688:	e013      	b.n	80016b2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fb8f 	bl	8000dac <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001692:	e009      	b.n	80016a8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7ff fb8a 	bl	8000dac <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4a91      	ldr	r2, [pc, #580]	; (80018e4 <HAL_RCC_OscConfig+0x624>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e116      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4b8d      	ldr	r3, [pc, #564]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	2202      	movs	r2, #2
 80016ae:	4013      	ands	r3, r2
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b2:	231f      	movs	r3, #31
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d105      	bne.n	80016c8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	4b87      	ldr	r3, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016c2:	4989      	ldr	r1, [pc, #548]	; (80018e8 <HAL_RCC_OscConfig+0x628>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	4013      	ands	r3, r2
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12a      	bne.n	8001730 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016e0:	2104      	movs	r1, #4
 80016e2:	430a      	orrs	r2, r1
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016e6:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80016ec:	2101      	movs	r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb5b 	bl	8000dac <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016fc:	f7ff fb56 	bl	8000dac <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0e3      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800170e:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0f1      	beq.n	80016fc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001718:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	22f8      	movs	r2, #248	; 0xf8
 800171e:	4393      	bics	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	00da      	lsls	r2, r3, #3
 8001728:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800172a:	430a      	orrs	r2, r1
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
 800172e:	e034      	b.n	800179a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	3305      	adds	r3, #5
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001738:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800173a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800173e:	2104      	movs	r1, #4
 8001740:	438a      	bics	r2, r1
 8001742:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001744:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	22f8      	movs	r2, #248	; 0xf8
 800174a:	4393      	bics	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	00da      	lsls	r2, r3, #3
 8001754:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
 800175a:	e01e      	b.n	800179a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800175c:	4b60      	ldr	r3, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001760:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001762:	2104      	movs	r1, #4
 8001764:	430a      	orrs	r2, r1
 8001766:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001768:	4b5d      	ldr	r3, [pc, #372]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800176a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176c:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800176e:	2101      	movs	r1, #1
 8001770:	438a      	bics	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff fb1a 	bl	8000dac <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800177e:	f7ff fb15 	bl	8000dac <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0a2      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d1f1      	bne.n	800177e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4e4>
 80017a2:	e097      	b.n	80018d4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4b4e      	ldr	r3, [pc, #312]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	220c      	movs	r2, #12
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0x4f2>
 80017b0:	e06b      	b.n	800188a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d14c      	bne.n	8001854 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b48      	ldr	r3, [pc, #288]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017c0:	494a      	ldr	r1, [pc, #296]	; (80018ec <HAL_RCC_OscConfig+0x62c>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff faf1 	bl	8000dac <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff faec 	bl	8000dac <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e079      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	049b      	lsls	r3, r3, #18
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ee:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	220f      	movs	r2, #15
 80017f4:	4393      	bics	r3, r2
 80017f6:	0019      	movs	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4a3a      	ldr	r2, [pc, #232]	; (80018f0 <HAL_RCC_OscConfig+0x630>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	431a      	orrs	r2, r3
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0449      	lsls	r1, r1, #17
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fabf 	bl	8000dac <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff faba 	bl	8000dac <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e047      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x574>
 8001852:	e03f      	b.n	80018d4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800185a:	4924      	ldr	r1, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x62c>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff faa4 	bl	8000dac <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa9f 	bl	8000dac <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e02c      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	049b      	lsls	r3, r3, #18
 8001884:	4013      	ands	r3, r2
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x5aa>
 8001888:	e024      	b.n	80018d4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e01f      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_RCC_OscConfig+0x620>)
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	401a      	ands	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d10e      	bne.n	80018d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	220f      	movs	r2, #15
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	23f0      	movs	r3, #240	; 0xf0
 80018c4:	039b      	lsls	r3, r3, #14
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b008      	add	sp, #32
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000
 80018e4:	00001388 	.word	0x00001388
 80018e8:	efffffff 	.word	0xefffffff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	ffc2ffff 	.word	0xffc2ffff

080018f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b3      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d911      	bls.n	800193a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4393      	bics	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	4b55      	ldr	r3, [pc, #340]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e09a      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d015      	beq.n	8001970 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d006      	beq.n	800195c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800194e:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001954:	21e0      	movs	r1, #224	; 0xe0
 8001956:	00c9      	lsls	r1, r1, #3
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	22f0      	movs	r2, #240	; 0xf0
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d040      	beq.n	80019fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d114      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06e      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	049b      	lsls	r3, r3, #18
 80019a2:	4013      	ands	r3, r2
 80019a4:	d108      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e062      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e05b      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff f9ee 	bl	8000dac <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d4:	e009      	b.n	80019ea <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d6:	f7ff f9e9 	bl	8000dac <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_RCC_ClockConfig+0x18c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e042      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	220c      	movs	r2, #12
 80019f0:	401a      	ands	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d211      	bcs.n	8001a2e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4393      	bics	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x184>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2201      	movs	r2, #1
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e020      	b.n	8001a70 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_RCC_ClockConfig+0x190>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a4c:	f000 f820 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a50:	0001      	movs	r1, r0
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x188>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	220f      	movs	r2, #15
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <HAL_RCC_ClockConfig+0x194>)
 8001a5e:	5cd3      	ldrb	r3, [r2, r3]
 8001a60:	000a      	movs	r2, r1
 8001a62:	40da      	lsrs	r2, r3
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x198>)
 8001a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff f959 	bl	8000d20 <HAL_InitTick>
  
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	0018      	movs	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b004      	add	sp, #16
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	00001388 	.word	0x00001388
 8001a84:	fffff8ff 	.word	0xfffff8ff
 8001a88:	08002fa4 	.word	0x08002fa4
 8001a8c:	20000010 	.word	0x20000010

08001a90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b08f      	sub	sp, #60	; 0x3c
 8001a94:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a96:	2314      	movs	r3, #20
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a9e:	c313      	stmia	r3!, {r0, r1, r4}
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	220c      	movs	r2, #12
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d002      	beq.n	8001ada <HAL_RCC_GetSysClockFreq+0x4a>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d003      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x50>
 8001ad8:	e02d      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ade:	e02d      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2214      	movs	r2, #20
 8001aea:	18ba      	adds	r2, r7, r2
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	220f      	movs	r2, #15
 8001af6:	4013      	ands	r3, r2
 8001af8:	1d3a      	adds	r2, r7, #4
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b0c:	f7fe fb06 	bl	800011c <__udivsi3>
 8001b10:	0003      	movs	r3, r0
 8001b12:	001a      	movs	r2, r3
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	4353      	muls	r3, r2
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1a:	e009      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b1e:	000a      	movs	r2, r1
 8001b20:	0152      	lsls	r2, r2, #5
 8001b22:	1a52      	subs	r2, r2, r1
 8001b24:	0193      	lsls	r3, r2, #6
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	185b      	adds	r3, r3, r1
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b34:	e002      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b00f      	add	sp, #60	; 0x3c
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	08002f78 	.word	0x08002f78
 8001b4c:	08002f88 	.word	0x08002f88
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e042      	b.n	8001bf0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	223d      	movs	r2, #61	; 0x3d
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d107      	bne.n	8001b86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223c      	movs	r2, #60	; 0x3c
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7fe ff11 	bl	80009a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223d      	movs	r2, #61	; 0x3d
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	0019      	movs	r1, r3
 8001b98:	0010      	movs	r0, r2
 8001b9a:	f000 fbd7 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2246      	movs	r2, #70	; 0x46
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	223e      	movs	r2, #62	; 0x3e
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	223f      	movs	r2, #63	; 0x3f
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2241      	movs	r2, #65	; 0x41
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2242      	movs	r2, #66	; 0x42
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2243      	movs	r2, #67	; 0x43
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2244      	movs	r2, #68	; 0x44
 8001bda:	2101      	movs	r1, #1
 8001bdc:	5499      	strb	r1, [r3, r2]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2245      	movs	r2, #69	; 0x45
 8001be2:	2101      	movs	r1, #1
 8001be4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	223d      	movs	r2, #61	; 0x3d
 8001bea:	2101      	movs	r1, #1
 8001bec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	223d      	movs	r2, #61	; 0x3d
 8001c04:	5c9b      	ldrb	r3, [r3, r2]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e036      	b.n	8001c7e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	223d      	movs	r2, #61	; 0x3d
 8001c14:	2102      	movs	r1, #2
 8001c16:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <HAL_TIM_Base_Start_IT+0x90>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00a      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x50>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d004      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x50>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_TIM_Base_Start_IT+0x94>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d111      	bne.n	8001c6c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d010      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6a:	e007      	b.n	8001c7c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b004      	add	sp, #16
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40012c00 	.word	0x40012c00
 8001c8c:	40000400 	.word	0x40000400

08001c90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e090      	b.n	8001dc6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	223d      	movs	r2, #61	; 0x3d
 8001ca8:	5c9b      	ldrb	r3, [r3, r2]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	223c      	movs	r2, #60	; 0x3c
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7fe fe98 	bl	80009f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	223d      	movs	r2, #61	; 0x3d
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	493f      	ldr	r1, [pc, #252]	; (8001dd0 <HAL_TIM_Encoder_Init+0x140>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	f000 fb32 	bl	800234c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <HAL_TIM_Encoder_Init+0x144>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_TIM_Encoder_Init+0x148>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_TIM_Encoder_Init+0x14c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	011a      	lsls	r2, r3, #4
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	031b      	lsls	r3, r3, #12
 8001d52:	4313      	orrs	r3, r2
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2222      	movs	r2, #34	; 0x22
 8001d5e:	4393      	bics	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2288      	movs	r2, #136	; 0x88
 8001d66:	4393      	bics	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4313      	orrs	r3, r2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2246      	movs	r2, #70	; 0x46
 8001d98:	2101      	movs	r1, #1
 8001d9a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	223e      	movs	r2, #62	; 0x3e
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	223f      	movs	r2, #63	; 0x3f
 8001da8:	2101      	movs	r1, #1
 8001daa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2242      	movs	r2, #66	; 0x42
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2243      	movs	r2, #67	; 0x43
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	223d      	movs	r2, #61	; 0x3d
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b006      	add	sp, #24
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	ffffbff8 	.word	0xffffbff8
 8001dd4:	fffffcfc 	.word	0xfffffcfc
 8001dd8:	fffff3f3 	.word	0xfffff3f3
 8001ddc:	ffff0f0f 	.word	0xffff0f0f

08001de0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001dea:	200f      	movs	r0, #15
 8001dec:	183b      	adds	r3, r7, r0
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	213e      	movs	r1, #62	; 0x3e
 8001df2:	5c52      	ldrb	r2, [r2, r1]
 8001df4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001df6:	230e      	movs	r3, #14
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	213f      	movs	r1, #63	; 0x3f
 8001dfe:	5c52      	ldrb	r2, [r2, r1]
 8001e00:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e02:	240d      	movs	r4, #13
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	2142      	movs	r1, #66	; 0x42
 8001e0a:	5c52      	ldrb	r2, [r2, r1]
 8001e0c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e0e:	230c      	movs	r3, #12
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	2143      	movs	r1, #67	; 0x43
 8001e16:	5c52      	ldrb	r2, [r2, r1]
 8001e18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d112      	bne.n	8001e46 <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e20:	183b      	adds	r3, r7, r0
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d103      	bne.n	8001e30 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e28:	193b      	adds	r3, r7, r4
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d001      	beq.n	8001e34 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e075      	b.n	8001f20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	223e      	movs	r2, #62	; 0x3e
 8001e38:	2102      	movs	r1, #2
 8001e3a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2242      	movs	r2, #66	; 0x42
 8001e40:	2102      	movs	r1, #2
 8001e42:	5499      	strb	r1, [r3, r2]
 8001e44:	e03d      	b.n	8001ec2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d114      	bne.n	8001e76 <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e4c:	230e      	movs	r3, #14
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d104      	bne.n	8001e60 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e56:	230c      	movs	r3, #12
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e05d      	b.n	8001f20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	223f      	movs	r2, #63	; 0x3f
 8001e68:	2102      	movs	r1, #2
 8001e6a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2243      	movs	r2, #67	; 0x43
 8001e70:	2102      	movs	r1, #2
 8001e72:	5499      	strb	r1, [r3, r2]
 8001e74:	e025      	b.n	8001ec2 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e76:	230f      	movs	r3, #15
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d10e      	bne.n	8001e9e <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e80:	230e      	movs	r3, #14
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d109      	bne.n	8001e9e <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e8a:	230d      	movs	r3, #13
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e94:	230c      	movs	r3, #12
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e03e      	b.n	8001f20 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	223e      	movs	r2, #62	; 0x3e
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	2102      	movs	r1, #2
 8001eb0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2242      	movs	r2, #66	; 0x42
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2243      	movs	r2, #67	; 0x43
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_TIM_Encoder_Start+0xf0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d008      	beq.n	8001ee0 <HAL_TIM_Encoder_Start+0x100>
 8001ece:	e00f      	b.n	8001ef0 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 fb47 	bl	800256c <TIM_CCxChannelCmd>
      break;
 8001ede:	e016      	b.n	8001f0e <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 fb3f 	bl	800256c <TIM_CCxChannelCmd>
      break;
 8001eee:	e00e      	b.n	8001f0e <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fb37 	bl	800256c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	2104      	movs	r1, #4
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fb30 	bl	800256c <TIM_CCxChannelCmd>
      break;
 8001f0c:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b005      	add	sp, #20
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d124      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d11d      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2203      	movs	r2, #3
 8001f52:	4252      	negs	r2, r2
 8001f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2203      	movs	r2, #3
 8001f64:	4013      	ands	r3, r2
 8001f66:	d004      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f9d6 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8001f70:	e007      	b.n	8001f82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f9c9 	bl	800230c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f9d5 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d125      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d11e      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2205      	movs	r2, #5
 8001faa:	4252      	negs	r2, r2
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f9a9 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 f99c 	bl	800230c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 f9a8 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d124      	bne.n	800203a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11d      	bne.n	800203a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2209      	movs	r2, #9
 8002004:	4252      	negs	r2, r2
 8002006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2204      	movs	r2, #4
 800200c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2203      	movs	r2, #3
 8002016:	4013      	ands	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f97d 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8002022:	e007      	b.n	8002034 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f970 	bl	800230c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 f97c 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2210      	movs	r2, #16
 8002042:	4013      	ands	r3, r2
 8002044:	2b10      	cmp	r3, #16
 8002046:	d125      	bne.n	8002094 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2210      	movs	r2, #16
 8002050:	4013      	ands	r3, r2
 8002052:	2b10      	cmp	r3, #16
 8002054:	d11e      	bne.n	8002094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2211      	movs	r2, #17
 800205c:	4252      	negs	r2, r2
 800205e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2208      	movs	r2, #8
 8002064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d004      	beq.n	800207e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 f950 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 800207c:	e007      	b.n	800208e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0018      	movs	r0, r3
 8002082:	f000 f943 	bl	800230c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f94f 	bl	800232c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2201      	movs	r2, #1
 800209c:	4013      	ands	r3, r2
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d10f      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d108      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4252      	negs	r2, r2
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f91d 	bl	80022fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d10f      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	4013      	ands	r3, r2
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d108      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2281      	movs	r2, #129	; 0x81
 80020e4:	4252      	negs	r2, r2
 80020e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fac2 	bl	8002674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d10f      	bne.n	800211e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2240      	movs	r2, #64	; 0x40
 8002106:	4013      	ands	r3, r2
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d108      	bne.n	800211e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	4252      	negs	r2, r2
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	0018      	movs	r0, r3
 800211a:	f000 f90f 	bl	800233c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2220      	movs	r2, #32
 8002126:	4013      	ands	r3, r2
 8002128:	2b20      	cmp	r3, #32
 800212a:	d10f      	bne.n	800214c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	2b20      	cmp	r3, #32
 8002138:	d108      	bne.n	800214c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2221      	movs	r2, #33	; 0x21
 8002140:	4252      	negs	r2, r2
 8002142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fa8c 	bl	8002664 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	230f      	movs	r3, #15
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	223c      	movs	r2, #60	; 0x3c
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_TIM_ConfigClockSource+0x20>
 8002170:	2302      	movs	r3, #2
 8002172:	e0bc      	b.n	80022ee <HAL_TIM_ConfigClockSource+0x19a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	223c      	movs	r2, #60	; 0x3c
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	223d      	movs	r2, #61	; 0x3d
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2277      	movs	r2, #119	; 0x77
 8002190:	4393      	bics	r3, r2
 8002192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d040      	beq.n	8002232 <HAL_TIM_ConfigClockSource+0xde>
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	0192      	lsls	r2, r2, #6
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d900      	bls.n	80021ba <HAL_TIM_ConfigClockSource+0x66>
 80021b8:	e088      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	0152      	lsls	r2, r2, #5
 80021be:	4293      	cmp	r3, r2
 80021c0:	d100      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x70>
 80021c2:	e088      	b.n	80022d6 <HAL_TIM_ConfigClockSource+0x182>
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	0152      	lsls	r2, r2, #5
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d900      	bls.n	80021ce <HAL_TIM_ConfigClockSource+0x7a>
 80021cc:	e07e      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021ce:	2b70      	cmp	r3, #112	; 0x70
 80021d0:	d018      	beq.n	8002204 <HAL_TIM_ConfigClockSource+0xb0>
 80021d2:	d900      	bls.n	80021d6 <HAL_TIM_ConfigClockSource+0x82>
 80021d4:	e07a      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021d6:	2b60      	cmp	r3, #96	; 0x60
 80021d8:	d04f      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x126>
 80021da:	d900      	bls.n	80021de <HAL_TIM_ConfigClockSource+0x8a>
 80021dc:	e076      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021de:	2b50      	cmp	r3, #80	; 0x50
 80021e0:	d03b      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x106>
 80021e2:	d900      	bls.n	80021e6 <HAL_TIM_ConfigClockSource+0x92>
 80021e4:	e072      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d057      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x146>
 80021ea:	d900      	bls.n	80021ee <HAL_TIM_ConfigClockSource+0x9a>
 80021ec:	e06e      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021ee:	2b30      	cmp	r3, #48	; 0x30
 80021f0:	d063      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x166>
 80021f2:	d86b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d060      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x166>
 80021f8:	d868      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d05d      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x166>
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d05b      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x166>
 8002202:	e063      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f000 f98a 	bl	800252c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2277      	movs	r2, #119	; 0x77
 8002224:	4313      	orrs	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]
      break;
 8002230:	e052      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f000 f973 	bl	800252c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	01c9      	lsls	r1, r1, #7
 8002254:	430a      	orrs	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
      break;
 8002258:	e03e      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	001a      	movs	r2, r3
 8002268:	f000 f8e6 	bl	8002438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2150      	movs	r1, #80	; 0x50
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f940 	bl	80024f8 <TIM_ITRx_SetConfig>
      break;
 8002278:	e02e      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	001a      	movs	r2, r3
 8002288:	f000 f904 	bl	8002494 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2160      	movs	r1, #96	; 0x60
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f930 	bl	80024f8 <TIM_ITRx_SetConfig>
      break;
 8002298:	e01e      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	001a      	movs	r2, r3
 80022a8:	f000 f8c6 	bl	8002438 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 f920 	bl	80024f8 <TIM_ITRx_SetConfig>
      break;
 80022b8:	e00e      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0019      	movs	r1, r3
 80022c4:	0010      	movs	r0, r2
 80022c6:	f000 f917 	bl	80024f8 <TIM_ITRx_SetConfig>
      break;
 80022ca:	e005      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022cc:	230f      	movs	r3, #15
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
      break;
 80022d4:	e000      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	223d      	movs	r2, #61	; 0x3d
 80022dc:	2101      	movs	r1, #1
 80022de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	223c      	movs	r2, #60	; 0x3c
 80022e4:	2100      	movs	r1, #0
 80022e6:	5499      	strb	r1, [r3, r2]

  return status;
 80022e8:	230f      	movs	r3, #15
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	781b      	ldrb	r3, [r3, #0]
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	ffff00ff 	.word	0xffff00ff

080022fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a30      	ldr	r2, [pc, #192]	; (8002420 <TIM_Base_SetConfig+0xd4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d008      	beq.n	8002376 <TIM_Base_SetConfig+0x2a>
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	429a      	cmp	r2, r3
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x2a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <TIM_Base_SetConfig+0xd8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2270      	movs	r2, #112	; 0x70
 800237a:	4393      	bics	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <TIM_Base_SetConfig+0xd4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d014      	beq.n	80023ba <TIM_Base_SetConfig+0x6e>
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	05db      	lsls	r3, r3, #23
 8002396:	429a      	cmp	r2, r3
 8002398:	d00f      	beq.n	80023ba <TIM_Base_SetConfig+0x6e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <TIM_Base_SetConfig+0xd8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x6e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <TIM_Base_SetConfig+0xdc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x6e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	; (800242c <TIM_Base_SetConfig+0xe0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x6e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <TIM_Base_SetConfig+0xe4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <TIM_Base_SetConfig+0xe8>)
 80023be:	4013      	ands	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	4393      	bics	r3, r2
 80023d2:	001a      	movs	r2, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <TIM_Base_SetConfig+0xd4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0xbe>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a0b      	ldr	r2, [pc, #44]	; (800242c <TIM_Base_SetConfig+0xe0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0xbe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <TIM_Base_SetConfig+0xe4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d103      	bne.n	8002412 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	615a      	str	r2, [r3, #20]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400
 8002428:	40002000 	.word	0x40002000
 800242c:	40014400 	.word	0x40014400
 8002430:	40014800 	.word	0x40014800
 8002434:	fffffcff 	.word	0xfffffcff

08002438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	2201      	movs	r2, #1
 8002450:	4393      	bics	r3, r2
 8002452:	001a      	movs	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	22f0      	movs	r2, #240	; 0xf0
 8002462:	4393      	bics	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	220a      	movs	r2, #10
 8002474:	4393      	bics	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	621a      	str	r2, [r3, #32]
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b006      	add	sp, #24
 8002492:	bd80      	pop	{r7, pc}

08002494 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	2210      	movs	r2, #16
 80024a6:	4393      	bics	r3, r2
 80024a8:	001a      	movs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <TIM_TI2_ConfigInputStage+0x60>)
 80024be:	4013      	ands	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	031b      	lsls	r3, r3, #12
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	22a0      	movs	r2, #160	; 0xa0
 80024d0:	4393      	bics	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	621a      	str	r2, [r3, #32]
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b006      	add	sp, #24
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	ffff0fff 	.word	0xffff0fff

080024f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2270      	movs	r2, #112	; 0x70
 800250c:	4393      	bics	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	2207      	movs	r2, #7
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <TIM_ETR_SetConfig+0x3c>)
 8002544:	4013      	ands	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	021a      	lsls	r2, r3, #8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	431a      	orrs	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	609a      	str	r2, [r3, #8]
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b006      	add	sp, #24
 8002566:	bd80      	pop	{r7, pc}
 8002568:	ffff00ff 	.word	0xffff00ff

0800256c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	221f      	movs	r2, #31
 800257c:	4013      	ands	r3, r2
 800257e:	2201      	movs	r2, #1
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	43d2      	mvns	r2, r2
 800258e:	401a      	ands	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	211f      	movs	r1, #31
 800259c:	400b      	ands	r3, r1
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4099      	lsls	r1, r3
 80025a2:	000b      	movs	r3, r1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b006      	add	sp, #24
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223c      	movs	r2, #60	; 0x3c
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e042      	b.n	8002652 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	223c      	movs	r2, #60	; 0x3c
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223d      	movs	r2, #61	; 0x3d
 80025d8:	2102      	movs	r1, #2
 80025da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2270      	movs	r2, #112	; 0x70
 80025f0:	4393      	bics	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00a      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	05db      	lsls	r3, r3, #23
 8002618:	429a      	cmp	r2, r3
 800261a:	d004      	beq.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10c      	bne.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	4393      	bics	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	223d      	movs	r2, #61	; 0x3d
 8002644:	2101      	movs	r1, #1
 8002646:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	223c      	movs	r2, #60	; 0x3c
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400

08002664 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}

08002684 <__errno>:
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <__errno+0x8>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	4770      	bx	lr
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	2000001c 	.word	0x2000001c

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	2600      	movs	r6, #0
 8002694:	4d0c      	ldr	r5, [pc, #48]	; (80026c8 <__libc_init_array+0x38>)
 8002696:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002698:	1b64      	subs	r4, r4, r5
 800269a:	10a4      	asrs	r4, r4, #2
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	2600      	movs	r6, #0
 80026a2:	f000 fc5b 	bl	8002f5c <_init>
 80026a6:	4d0a      	ldr	r5, [pc, #40]	; (80026d0 <__libc_init_array+0x40>)
 80026a8:	4c0a      	ldr	r4, [pc, #40]	; (80026d4 <__libc_init_array+0x44>)
 80026aa:	1b64      	subs	r4, r4, r5
 80026ac:	10a4      	asrs	r4, r4, #2
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	00b3      	lsls	r3, r6, #2
 80026b6:	58eb      	ldr	r3, [r5, r3]
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	00b3      	lsls	r3, r6, #2
 80026c0:	58eb      	ldr	r3, [r5, r3]
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08002fe8 	.word	0x08002fe8
 80026cc:	08002fe8 	.word	0x08002fe8
 80026d0:	08002fe8 	.word	0x08002fe8
 80026d4:	08002fec 	.word	0x08002fec

080026d8 <memset>:
 80026d8:	0003      	movs	r3, r0
 80026da:	1882      	adds	r2, r0, r2
 80026dc:	4293      	cmp	r3, r2
 80026de:	d100      	bne.n	80026e2 <memset+0xa>
 80026e0:	4770      	bx	lr
 80026e2:	7019      	strb	r1, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	e7f9      	b.n	80026dc <memset+0x4>

080026e8 <sniprintf>:
 80026e8:	b40c      	push	{r2, r3}
 80026ea:	b530      	push	{r4, r5, lr}
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <sniprintf+0x64>)
 80026ee:	000c      	movs	r4, r1
 80026f0:	681d      	ldr	r5, [r3, #0]
 80026f2:	b09d      	sub	sp, #116	; 0x74
 80026f4:	2900      	cmp	r1, #0
 80026f6:	da08      	bge.n	800270a <sniprintf+0x22>
 80026f8:	238b      	movs	r3, #139	; 0x8b
 80026fa:	2001      	movs	r0, #1
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	4240      	negs	r0, r0
 8002700:	b01d      	add	sp, #116	; 0x74
 8002702:	bc30      	pop	{r4, r5}
 8002704:	bc08      	pop	{r3}
 8002706:	b002      	add	sp, #8
 8002708:	4718      	bx	r3
 800270a:	2382      	movs	r3, #130	; 0x82
 800270c:	466a      	mov	r2, sp
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	8293      	strh	r3, [r2, #20]
 8002712:	2300      	movs	r3, #0
 8002714:	9002      	str	r0, [sp, #8]
 8002716:	9006      	str	r0, [sp, #24]
 8002718:	4299      	cmp	r1, r3
 800271a:	d000      	beq.n	800271e <sniprintf+0x36>
 800271c:	1e4b      	subs	r3, r1, #1
 800271e:	9304      	str	r3, [sp, #16]
 8002720:	9307      	str	r3, [sp, #28]
 8002722:	2301      	movs	r3, #1
 8002724:	466a      	mov	r2, sp
 8002726:	425b      	negs	r3, r3
 8002728:	82d3      	strh	r3, [r2, #22]
 800272a:	0028      	movs	r0, r5
 800272c:	ab21      	add	r3, sp, #132	; 0x84
 800272e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002730:	a902      	add	r1, sp, #8
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	f000 f86e 	bl	8002814 <_svfiprintf_r>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	da01      	bge.n	8002740 <sniprintf+0x58>
 800273c:	238b      	movs	r3, #139	; 0x8b
 800273e:	602b      	str	r3, [r5, #0]
 8002740:	2c00      	cmp	r4, #0
 8002742:	d0dd      	beq.n	8002700 <sniprintf+0x18>
 8002744:	2300      	movs	r3, #0
 8002746:	9a02      	ldr	r2, [sp, #8]
 8002748:	7013      	strb	r3, [r2, #0]
 800274a:	e7d9      	b.n	8002700 <sniprintf+0x18>
 800274c:	2000001c 	.word	0x2000001c

08002750 <__ssputs_r>:
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	688e      	ldr	r6, [r1, #8]
 8002754:	b085      	sub	sp, #20
 8002756:	0007      	movs	r7, r0
 8002758:	000c      	movs	r4, r1
 800275a:	9203      	str	r2, [sp, #12]
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	429e      	cmp	r6, r3
 8002760:	d83c      	bhi.n	80027dc <__ssputs_r+0x8c>
 8002762:	2390      	movs	r3, #144	; 0x90
 8002764:	898a      	ldrh	r2, [r1, #12]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	421a      	tst	r2, r3
 800276a:	d034      	beq.n	80027d6 <__ssputs_r+0x86>
 800276c:	2503      	movs	r5, #3
 800276e:	6909      	ldr	r1, [r1, #16]
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	1a5b      	subs	r3, r3, r1
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	6963      	ldr	r3, [r4, #20]
 8002778:	9802      	ldr	r0, [sp, #8]
 800277a:	435d      	muls	r5, r3
 800277c:	0feb      	lsrs	r3, r5, #31
 800277e:	195d      	adds	r5, r3, r5
 8002780:	9b01      	ldr	r3, [sp, #4]
 8002782:	106d      	asrs	r5, r5, #1
 8002784:	3301      	adds	r3, #1
 8002786:	181b      	adds	r3, r3, r0
 8002788:	42ab      	cmp	r3, r5
 800278a:	d900      	bls.n	800278e <__ssputs_r+0x3e>
 800278c:	001d      	movs	r5, r3
 800278e:	0553      	lsls	r3, r2, #21
 8002790:	d532      	bpl.n	80027f8 <__ssputs_r+0xa8>
 8002792:	0029      	movs	r1, r5
 8002794:	0038      	movs	r0, r7
 8002796:	f000 fb31 	bl	8002dfc <_malloc_r>
 800279a:	1e06      	subs	r6, r0, #0
 800279c:	d109      	bne.n	80027b2 <__ssputs_r+0x62>
 800279e:	230c      	movs	r3, #12
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	2340      	movs	r3, #64	; 0x40
 80027a4:	2001      	movs	r0, #1
 80027a6:	89a2      	ldrh	r2, [r4, #12]
 80027a8:	4240      	negs	r0, r0
 80027aa:	4313      	orrs	r3, r2
 80027ac:	81a3      	strh	r3, [r4, #12]
 80027ae:	b005      	add	sp, #20
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b2:	9a02      	ldr	r2, [sp, #8]
 80027b4:	6921      	ldr	r1, [r4, #16]
 80027b6:	f000 faba 	bl	8002d2e <memcpy>
 80027ba:	89a3      	ldrh	r3, [r4, #12]
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <__ssputs_r+0xc0>)
 80027be:	401a      	ands	r2, r3
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	4313      	orrs	r3, r2
 80027c4:	81a3      	strh	r3, [r4, #12]
 80027c6:	9b02      	ldr	r3, [sp, #8]
 80027c8:	6126      	str	r6, [r4, #16]
 80027ca:	18f6      	adds	r6, r6, r3
 80027cc:	6026      	str	r6, [r4, #0]
 80027ce:	6165      	str	r5, [r4, #20]
 80027d0:	9e01      	ldr	r6, [sp, #4]
 80027d2:	1aed      	subs	r5, r5, r3
 80027d4:	60a5      	str	r5, [r4, #8]
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	429e      	cmp	r6, r3
 80027da:	d900      	bls.n	80027de <__ssputs_r+0x8e>
 80027dc:	9e01      	ldr	r6, [sp, #4]
 80027de:	0032      	movs	r2, r6
 80027e0:	9903      	ldr	r1, [sp, #12]
 80027e2:	6820      	ldr	r0, [r4, #0]
 80027e4:	f000 faac 	bl	8002d40 <memmove>
 80027e8:	68a3      	ldr	r3, [r4, #8]
 80027ea:	2000      	movs	r0, #0
 80027ec:	1b9b      	subs	r3, r3, r6
 80027ee:	60a3      	str	r3, [r4, #8]
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	199e      	adds	r6, r3, r6
 80027f4:	6026      	str	r6, [r4, #0]
 80027f6:	e7da      	b.n	80027ae <__ssputs_r+0x5e>
 80027f8:	002a      	movs	r2, r5
 80027fa:	0038      	movs	r0, r7
 80027fc:	f000 fb5c 	bl	8002eb8 <_realloc_r>
 8002800:	1e06      	subs	r6, r0, #0
 8002802:	d1e0      	bne.n	80027c6 <__ssputs_r+0x76>
 8002804:	0038      	movs	r0, r7
 8002806:	6921      	ldr	r1, [r4, #16]
 8002808:	f000 faae 	bl	8002d68 <_free_r>
 800280c:	e7c7      	b.n	800279e <__ssputs_r+0x4e>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	fffffb7f 	.word	0xfffffb7f

08002814 <_svfiprintf_r>:
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b0a1      	sub	sp, #132	; 0x84
 8002818:	9003      	str	r0, [sp, #12]
 800281a:	001d      	movs	r5, r3
 800281c:	898b      	ldrh	r3, [r1, #12]
 800281e:	000f      	movs	r7, r1
 8002820:	0016      	movs	r6, r2
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	d511      	bpl.n	800284a <_svfiprintf_r+0x36>
 8002826:	690b      	ldr	r3, [r1, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10e      	bne.n	800284a <_svfiprintf_r+0x36>
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	f000 fae5 	bl	8002dfc <_malloc_r>
 8002832:	6038      	str	r0, [r7, #0]
 8002834:	6138      	str	r0, [r7, #16]
 8002836:	2800      	cmp	r0, #0
 8002838:	d105      	bne.n	8002846 <_svfiprintf_r+0x32>
 800283a:	230c      	movs	r3, #12
 800283c:	9a03      	ldr	r2, [sp, #12]
 800283e:	3801      	subs	r0, #1
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	b021      	add	sp, #132	; 0x84
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002846:	2340      	movs	r3, #64	; 0x40
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	2300      	movs	r3, #0
 800284c:	ac08      	add	r4, sp, #32
 800284e:	6163      	str	r3, [r4, #20]
 8002850:	3320      	adds	r3, #32
 8002852:	7663      	strb	r3, [r4, #25]
 8002854:	3310      	adds	r3, #16
 8002856:	76a3      	strb	r3, [r4, #26]
 8002858:	9507      	str	r5, [sp, #28]
 800285a:	0035      	movs	r5, r6
 800285c:	782b      	ldrb	r3, [r5, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <_svfiprintf_r+0x52>
 8002862:	2b25      	cmp	r3, #37	; 0x25
 8002864:	d147      	bne.n	80028f6 <_svfiprintf_r+0xe2>
 8002866:	1bab      	subs	r3, r5, r6
 8002868:	9305      	str	r3, [sp, #20]
 800286a:	42b5      	cmp	r5, r6
 800286c:	d00c      	beq.n	8002888 <_svfiprintf_r+0x74>
 800286e:	0032      	movs	r2, r6
 8002870:	0039      	movs	r1, r7
 8002872:	9803      	ldr	r0, [sp, #12]
 8002874:	f7ff ff6c 	bl	8002750 <__ssputs_r>
 8002878:	1c43      	adds	r3, r0, #1
 800287a:	d100      	bne.n	800287e <_svfiprintf_r+0x6a>
 800287c:	e0ae      	b.n	80029dc <_svfiprintf_r+0x1c8>
 800287e:	6962      	ldr	r2, [r4, #20]
 8002880:	9b05      	ldr	r3, [sp, #20]
 8002882:	4694      	mov	ip, r2
 8002884:	4463      	add	r3, ip
 8002886:	6163      	str	r3, [r4, #20]
 8002888:	782b      	ldrb	r3, [r5, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <_svfiprintf_r+0x7c>
 800288e:	e0a5      	b.n	80029dc <_svfiprintf_r+0x1c8>
 8002890:	2201      	movs	r2, #1
 8002892:	2300      	movs	r3, #0
 8002894:	4252      	negs	r2, r2
 8002896:	6062      	str	r2, [r4, #4]
 8002898:	a904      	add	r1, sp, #16
 800289a:	3254      	adds	r2, #84	; 0x54
 800289c:	1852      	adds	r2, r2, r1
 800289e:	1c6e      	adds	r6, r5, #1
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	60e3      	str	r3, [r4, #12]
 80028a4:	60a3      	str	r3, [r4, #8]
 80028a6:	7013      	strb	r3, [r2, #0]
 80028a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80028aa:	2205      	movs	r2, #5
 80028ac:	7831      	ldrb	r1, [r6, #0]
 80028ae:	4854      	ldr	r0, [pc, #336]	; (8002a00 <_svfiprintf_r+0x1ec>)
 80028b0:	f000 fa32 	bl	8002d18 <memchr>
 80028b4:	1c75      	adds	r5, r6, #1
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d11f      	bne.n	80028fa <_svfiprintf_r+0xe6>
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	06d3      	lsls	r3, r2, #27
 80028be:	d504      	bpl.n	80028ca <_svfiprintf_r+0xb6>
 80028c0:	2353      	movs	r3, #83	; 0x53
 80028c2:	a904      	add	r1, sp, #16
 80028c4:	185b      	adds	r3, r3, r1
 80028c6:	2120      	movs	r1, #32
 80028c8:	7019      	strb	r1, [r3, #0]
 80028ca:	0713      	lsls	r3, r2, #28
 80028cc:	d504      	bpl.n	80028d8 <_svfiprintf_r+0xc4>
 80028ce:	2353      	movs	r3, #83	; 0x53
 80028d0:	a904      	add	r1, sp, #16
 80028d2:	185b      	adds	r3, r3, r1
 80028d4:	212b      	movs	r1, #43	; 0x2b
 80028d6:	7019      	strb	r1, [r3, #0]
 80028d8:	7833      	ldrb	r3, [r6, #0]
 80028da:	2b2a      	cmp	r3, #42	; 0x2a
 80028dc:	d016      	beq.n	800290c <_svfiprintf_r+0xf8>
 80028de:	0035      	movs	r5, r6
 80028e0:	2100      	movs	r1, #0
 80028e2:	200a      	movs	r0, #10
 80028e4:	68e3      	ldr	r3, [r4, #12]
 80028e6:	782a      	ldrb	r2, [r5, #0]
 80028e8:	1c6e      	adds	r6, r5, #1
 80028ea:	3a30      	subs	r2, #48	; 0x30
 80028ec:	2a09      	cmp	r2, #9
 80028ee:	d94e      	bls.n	800298e <_svfiprintf_r+0x17a>
 80028f0:	2900      	cmp	r1, #0
 80028f2:	d111      	bne.n	8002918 <_svfiprintf_r+0x104>
 80028f4:	e017      	b.n	8002926 <_svfiprintf_r+0x112>
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7b0      	b.n	800285c <_svfiprintf_r+0x48>
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <_svfiprintf_r+0x1ec>)
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	1ac0      	subs	r0, r0, r3
 8002900:	2301      	movs	r3, #1
 8002902:	4083      	lsls	r3, r0
 8002904:	4313      	orrs	r3, r2
 8002906:	002e      	movs	r6, r5
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	e7ce      	b.n	80028aa <_svfiprintf_r+0x96>
 800290c:	9b07      	ldr	r3, [sp, #28]
 800290e:	1d19      	adds	r1, r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	9107      	str	r1, [sp, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db01      	blt.n	800291c <_svfiprintf_r+0x108>
 8002918:	930b      	str	r3, [sp, #44]	; 0x2c
 800291a:	e004      	b.n	8002926 <_svfiprintf_r+0x112>
 800291c:	425b      	negs	r3, r3
 800291e:	60e3      	str	r3, [r4, #12]
 8002920:	2302      	movs	r3, #2
 8002922:	4313      	orrs	r3, r2
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	782b      	ldrb	r3, [r5, #0]
 8002928:	2b2e      	cmp	r3, #46	; 0x2e
 800292a:	d10a      	bne.n	8002942 <_svfiprintf_r+0x12e>
 800292c:	786b      	ldrb	r3, [r5, #1]
 800292e:	2b2a      	cmp	r3, #42	; 0x2a
 8002930:	d135      	bne.n	800299e <_svfiprintf_r+0x18a>
 8002932:	9b07      	ldr	r3, [sp, #28]
 8002934:	3502      	adds	r5, #2
 8002936:	1d1a      	adds	r2, r3, #4
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	9207      	str	r2, [sp, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db2b      	blt.n	8002998 <_svfiprintf_r+0x184>
 8002940:	9309      	str	r3, [sp, #36]	; 0x24
 8002942:	4e30      	ldr	r6, [pc, #192]	; (8002a04 <_svfiprintf_r+0x1f0>)
 8002944:	2203      	movs	r2, #3
 8002946:	0030      	movs	r0, r6
 8002948:	7829      	ldrb	r1, [r5, #0]
 800294a:	f000 f9e5 	bl	8002d18 <memchr>
 800294e:	2800      	cmp	r0, #0
 8002950:	d006      	beq.n	8002960 <_svfiprintf_r+0x14c>
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	1b80      	subs	r0, r0, r6
 8002956:	4083      	lsls	r3, r0
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	3501      	adds	r5, #1
 800295c:	4313      	orrs	r3, r2
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	7829      	ldrb	r1, [r5, #0]
 8002962:	2206      	movs	r2, #6
 8002964:	4828      	ldr	r0, [pc, #160]	; (8002a08 <_svfiprintf_r+0x1f4>)
 8002966:	1c6e      	adds	r6, r5, #1
 8002968:	7621      	strb	r1, [r4, #24]
 800296a:	f000 f9d5 	bl	8002d18 <memchr>
 800296e:	2800      	cmp	r0, #0
 8002970:	d03c      	beq.n	80029ec <_svfiprintf_r+0x1d8>
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <_svfiprintf_r+0x1f8>)
 8002974:	2b00      	cmp	r3, #0
 8002976:	d125      	bne.n	80029c4 <_svfiprintf_r+0x1b0>
 8002978:	2207      	movs	r2, #7
 800297a:	9b07      	ldr	r3, [sp, #28]
 800297c:	3307      	adds	r3, #7
 800297e:	4393      	bics	r3, r2
 8002980:	3308      	adds	r3, #8
 8002982:	9307      	str	r3, [sp, #28]
 8002984:	6963      	ldr	r3, [r4, #20]
 8002986:	9a04      	ldr	r2, [sp, #16]
 8002988:	189b      	adds	r3, r3, r2
 800298a:	6163      	str	r3, [r4, #20]
 800298c:	e765      	b.n	800285a <_svfiprintf_r+0x46>
 800298e:	4343      	muls	r3, r0
 8002990:	0035      	movs	r5, r6
 8002992:	2101      	movs	r1, #1
 8002994:	189b      	adds	r3, r3, r2
 8002996:	e7a6      	b.n	80028e6 <_svfiprintf_r+0xd2>
 8002998:	2301      	movs	r3, #1
 800299a:	425b      	negs	r3, r3
 800299c:	e7d0      	b.n	8002940 <_svfiprintf_r+0x12c>
 800299e:	2300      	movs	r3, #0
 80029a0:	200a      	movs	r0, #10
 80029a2:	001a      	movs	r2, r3
 80029a4:	3501      	adds	r5, #1
 80029a6:	6063      	str	r3, [r4, #4]
 80029a8:	7829      	ldrb	r1, [r5, #0]
 80029aa:	1c6e      	adds	r6, r5, #1
 80029ac:	3930      	subs	r1, #48	; 0x30
 80029ae:	2909      	cmp	r1, #9
 80029b0:	d903      	bls.n	80029ba <_svfiprintf_r+0x1a6>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0c5      	beq.n	8002942 <_svfiprintf_r+0x12e>
 80029b6:	9209      	str	r2, [sp, #36]	; 0x24
 80029b8:	e7c3      	b.n	8002942 <_svfiprintf_r+0x12e>
 80029ba:	4342      	muls	r2, r0
 80029bc:	0035      	movs	r5, r6
 80029be:	2301      	movs	r3, #1
 80029c0:	1852      	adds	r2, r2, r1
 80029c2:	e7f1      	b.n	80029a8 <_svfiprintf_r+0x194>
 80029c4:	ab07      	add	r3, sp, #28
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	003a      	movs	r2, r7
 80029ca:	0021      	movs	r1, r4
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <_svfiprintf_r+0x1fc>)
 80029ce:	9803      	ldr	r0, [sp, #12]
 80029d0:	e000      	b.n	80029d4 <_svfiprintf_r+0x1c0>
 80029d2:	bf00      	nop
 80029d4:	9004      	str	r0, [sp, #16]
 80029d6:	9b04      	ldr	r3, [sp, #16]
 80029d8:	3301      	adds	r3, #1
 80029da:	d1d3      	bne.n	8002984 <_svfiprintf_r+0x170>
 80029dc:	89bb      	ldrh	r3, [r7, #12]
 80029de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80029e0:	065b      	lsls	r3, r3, #25
 80029e2:	d400      	bmi.n	80029e6 <_svfiprintf_r+0x1d2>
 80029e4:	e72d      	b.n	8002842 <_svfiprintf_r+0x2e>
 80029e6:	2001      	movs	r0, #1
 80029e8:	4240      	negs	r0, r0
 80029ea:	e72a      	b.n	8002842 <_svfiprintf_r+0x2e>
 80029ec:	ab07      	add	r3, sp, #28
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	003a      	movs	r2, r7
 80029f2:	0021      	movs	r1, r4
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <_svfiprintf_r+0x1fc>)
 80029f6:	9803      	ldr	r0, [sp, #12]
 80029f8:	f000 f87c 	bl	8002af4 <_printf_i>
 80029fc:	e7ea      	b.n	80029d4 <_svfiprintf_r+0x1c0>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	08002fb4 	.word	0x08002fb4
 8002a04:	08002fba 	.word	0x08002fba
 8002a08:	08002fbe 	.word	0x08002fbe
 8002a0c:	00000000 	.word	0x00000000
 8002a10:	08002751 	.word	0x08002751

08002a14 <_printf_common>:
 8002a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a16:	0015      	movs	r5, r2
 8002a18:	9301      	str	r3, [sp, #4]
 8002a1a:	688a      	ldr	r2, [r1, #8]
 8002a1c:	690b      	ldr	r3, [r1, #16]
 8002a1e:	000c      	movs	r4, r1
 8002a20:	9000      	str	r0, [sp, #0]
 8002a22:	4293      	cmp	r3, r2
 8002a24:	da00      	bge.n	8002a28 <_printf_common+0x14>
 8002a26:	0013      	movs	r3, r2
 8002a28:	0022      	movs	r2, r4
 8002a2a:	602b      	str	r3, [r5, #0]
 8002a2c:	3243      	adds	r2, #67	; 0x43
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d001      	beq.n	8002a38 <_printf_common+0x24>
 8002a34:	3301      	adds	r3, #1
 8002a36:	602b      	str	r3, [r5, #0]
 8002a38:	6823      	ldr	r3, [r4, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	d502      	bpl.n	8002a44 <_printf_common+0x30>
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	3302      	adds	r3, #2
 8002a42:	602b      	str	r3, [r5, #0]
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	2306      	movs	r3, #6
 8002a48:	0017      	movs	r7, r2
 8002a4a:	401f      	ands	r7, r3
 8002a4c:	421a      	tst	r2, r3
 8002a4e:	d027      	beq.n	8002aa0 <_printf_common+0x8c>
 8002a50:	0023      	movs	r3, r4
 8002a52:	3343      	adds	r3, #67	; 0x43
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	4193      	sbcs	r3, r2
 8002a5a:	6822      	ldr	r2, [r4, #0]
 8002a5c:	0692      	lsls	r2, r2, #26
 8002a5e:	d430      	bmi.n	8002ac2 <_printf_common+0xae>
 8002a60:	0022      	movs	r2, r4
 8002a62:	9901      	ldr	r1, [sp, #4]
 8002a64:	9800      	ldr	r0, [sp, #0]
 8002a66:	9e08      	ldr	r6, [sp, #32]
 8002a68:	3243      	adds	r2, #67	; 0x43
 8002a6a:	47b0      	blx	r6
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	d025      	beq.n	8002abc <_printf_common+0xa8>
 8002a70:	2306      	movs	r3, #6
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	682a      	ldr	r2, [r5, #0]
 8002a76:	68e1      	ldr	r1, [r4, #12]
 8002a78:	2500      	movs	r5, #0
 8002a7a:	4003      	ands	r3, r0
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d103      	bne.n	8002a88 <_printf_common+0x74>
 8002a80:	1a8d      	subs	r5, r1, r2
 8002a82:	43eb      	mvns	r3, r5
 8002a84:	17db      	asrs	r3, r3, #31
 8002a86:	401d      	ands	r5, r3
 8002a88:	68a3      	ldr	r3, [r4, #8]
 8002a8a:	6922      	ldr	r2, [r4, #16]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	dd01      	ble.n	8002a94 <_printf_common+0x80>
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	18ed      	adds	r5, r5, r3
 8002a94:	2700      	movs	r7, #0
 8002a96:	42bd      	cmp	r5, r7
 8002a98:	d120      	bne.n	8002adc <_printf_common+0xc8>
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	e010      	b.n	8002ac0 <_printf_common+0xac>
 8002a9e:	3701      	adds	r7, #1
 8002aa0:	68e3      	ldr	r3, [r4, #12]
 8002aa2:	682a      	ldr	r2, [r5, #0]
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	42bb      	cmp	r3, r7
 8002aa8:	ddd2      	ble.n	8002a50 <_printf_common+0x3c>
 8002aaa:	0022      	movs	r2, r4
 8002aac:	2301      	movs	r3, #1
 8002aae:	9901      	ldr	r1, [sp, #4]
 8002ab0:	9800      	ldr	r0, [sp, #0]
 8002ab2:	9e08      	ldr	r6, [sp, #32]
 8002ab4:	3219      	adds	r2, #25
 8002ab6:	47b0      	blx	r6
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d1f0      	bne.n	8002a9e <_printf_common+0x8a>
 8002abc:	2001      	movs	r0, #1
 8002abe:	4240      	negs	r0, r0
 8002ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ac2:	2030      	movs	r0, #48	; 0x30
 8002ac4:	18e1      	adds	r1, r4, r3
 8002ac6:	3143      	adds	r1, #67	; 0x43
 8002ac8:	7008      	strb	r0, [r1, #0]
 8002aca:	0021      	movs	r1, r4
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	3145      	adds	r1, #69	; 0x45
 8002ad0:	7809      	ldrb	r1, [r1, #0]
 8002ad2:	18a2      	adds	r2, r4, r2
 8002ad4:	3243      	adds	r2, #67	; 0x43
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	7011      	strb	r1, [r2, #0]
 8002ada:	e7c1      	b.n	8002a60 <_printf_common+0x4c>
 8002adc:	0022      	movs	r2, r4
 8002ade:	2301      	movs	r3, #1
 8002ae0:	9901      	ldr	r1, [sp, #4]
 8002ae2:	9800      	ldr	r0, [sp, #0]
 8002ae4:	9e08      	ldr	r6, [sp, #32]
 8002ae6:	321a      	adds	r2, #26
 8002ae8:	47b0      	blx	r6
 8002aea:	1c43      	adds	r3, r0, #1
 8002aec:	d0e6      	beq.n	8002abc <_printf_common+0xa8>
 8002aee:	3701      	adds	r7, #1
 8002af0:	e7d1      	b.n	8002a96 <_printf_common+0x82>
	...

08002af4 <_printf_i>:
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	9206      	str	r2, [sp, #24]
 8002afa:	000a      	movs	r2, r1
 8002afc:	3243      	adds	r2, #67	; 0x43
 8002afe:	9307      	str	r3, [sp, #28]
 8002b00:	9005      	str	r0, [sp, #20]
 8002b02:	9204      	str	r2, [sp, #16]
 8002b04:	7e0a      	ldrb	r2, [r1, #24]
 8002b06:	000c      	movs	r4, r1
 8002b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b0a:	2a78      	cmp	r2, #120	; 0x78
 8002b0c:	d806      	bhi.n	8002b1c <_printf_i+0x28>
 8002b0e:	2a62      	cmp	r2, #98	; 0x62
 8002b10:	d808      	bhi.n	8002b24 <_printf_i+0x30>
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	d100      	bne.n	8002b18 <_printf_i+0x24>
 8002b16:	e0c0      	b.n	8002c9a <_printf_i+0x1a6>
 8002b18:	2a58      	cmp	r2, #88	; 0x58
 8002b1a:	d052      	beq.n	8002bc2 <_printf_i+0xce>
 8002b1c:	0026      	movs	r6, r4
 8002b1e:	3642      	adds	r6, #66	; 0x42
 8002b20:	7032      	strb	r2, [r6, #0]
 8002b22:	e022      	b.n	8002b6a <_printf_i+0x76>
 8002b24:	0010      	movs	r0, r2
 8002b26:	3863      	subs	r0, #99	; 0x63
 8002b28:	2815      	cmp	r0, #21
 8002b2a:	d8f7      	bhi.n	8002b1c <_printf_i+0x28>
 8002b2c:	f7fd faec 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b30:	001f0016 	.word	0x001f0016
 8002b34:	fff6fff6 	.word	0xfff6fff6
 8002b38:	fff6fff6 	.word	0xfff6fff6
 8002b3c:	fff6001f 	.word	0xfff6001f
 8002b40:	fff6fff6 	.word	0xfff6fff6
 8002b44:	00a8fff6 	.word	0x00a8fff6
 8002b48:	009a0036 	.word	0x009a0036
 8002b4c:	fff6fff6 	.word	0xfff6fff6
 8002b50:	fff600b9 	.word	0xfff600b9
 8002b54:	fff60036 	.word	0xfff60036
 8002b58:	009efff6 	.word	0x009efff6
 8002b5c:	0026      	movs	r6, r4
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	3642      	adds	r6, #66	; 0x42
 8002b62:	1d11      	adds	r1, r2, #4
 8002b64:	6019      	str	r1, [r3, #0]
 8002b66:	6813      	ldr	r3, [r2, #0]
 8002b68:	7033      	strb	r3, [r6, #0]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e0a7      	b.n	8002cbe <_printf_i+0x1ca>
 8002b6e:	6808      	ldr	r0, [r1, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	1d0a      	adds	r2, r1, #4
 8002b74:	0605      	lsls	r5, r0, #24
 8002b76:	d50b      	bpl.n	8002b90 <_printf_i+0x9c>
 8002b78:	680d      	ldr	r5, [r1, #0]
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	da03      	bge.n	8002b88 <_printf_i+0x94>
 8002b80:	232d      	movs	r3, #45	; 0x2d
 8002b82:	9a04      	ldr	r2, [sp, #16]
 8002b84:	426d      	negs	r5, r5
 8002b86:	7013      	strb	r3, [r2, #0]
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <_printf_i+0x21c>)
 8002b8a:	270a      	movs	r7, #10
 8002b8c:	9303      	str	r3, [sp, #12]
 8002b8e:	e032      	b.n	8002bf6 <_printf_i+0x102>
 8002b90:	680d      	ldr	r5, [r1, #0]
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	0641      	lsls	r1, r0, #25
 8002b96:	d5f1      	bpl.n	8002b7c <_printf_i+0x88>
 8002b98:	b22d      	sxth	r5, r5
 8002b9a:	e7ef      	b.n	8002b7c <_printf_i+0x88>
 8002b9c:	680d      	ldr	r5, [r1, #0]
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	1d08      	adds	r0, r1, #4
 8002ba2:	6018      	str	r0, [r3, #0]
 8002ba4:	062e      	lsls	r6, r5, #24
 8002ba6:	d501      	bpl.n	8002bac <_printf_i+0xb8>
 8002ba8:	680d      	ldr	r5, [r1, #0]
 8002baa:	e003      	b.n	8002bb4 <_printf_i+0xc0>
 8002bac:	066d      	lsls	r5, r5, #25
 8002bae:	d5fb      	bpl.n	8002ba8 <_printf_i+0xb4>
 8002bb0:	680d      	ldr	r5, [r1, #0]
 8002bb2:	b2ad      	uxth	r5, r5
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <_printf_i+0x21c>)
 8002bb6:	270a      	movs	r7, #10
 8002bb8:	9303      	str	r3, [sp, #12]
 8002bba:	2a6f      	cmp	r2, #111	; 0x6f
 8002bbc:	d117      	bne.n	8002bee <_printf_i+0xfa>
 8002bbe:	2708      	movs	r7, #8
 8002bc0:	e015      	b.n	8002bee <_printf_i+0xfa>
 8002bc2:	3145      	adds	r1, #69	; 0x45
 8002bc4:	700a      	strb	r2, [r1, #0]
 8002bc6:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <_printf_i+0x21c>)
 8002bc8:	9203      	str	r2, [sp, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6821      	ldr	r1, [r4, #0]
 8002bce:	ca20      	ldmia	r2!, {r5}
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	0608      	lsls	r0, r1, #24
 8002bd4:	d550      	bpl.n	8002c78 <_printf_i+0x184>
 8002bd6:	07cb      	lsls	r3, r1, #31
 8002bd8:	d502      	bpl.n	8002be0 <_printf_i+0xec>
 8002bda:	2320      	movs	r3, #32
 8002bdc:	4319      	orrs	r1, r3
 8002bde:	6021      	str	r1, [r4, #0]
 8002be0:	2710      	movs	r7, #16
 8002be2:	2d00      	cmp	r5, #0
 8002be4:	d103      	bne.n	8002bee <_printf_i+0xfa>
 8002be6:	2320      	movs	r3, #32
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	439a      	bics	r2, r3
 8002bec:	6022      	str	r2, [r4, #0]
 8002bee:	0023      	movs	r3, r4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	3343      	adds	r3, #67	; 0x43
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	6863      	ldr	r3, [r4, #4]
 8002bf8:	60a3      	str	r3, [r4, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db03      	blt.n	8002c06 <_printf_i+0x112>
 8002bfe:	2204      	movs	r2, #4
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	4391      	bics	r1, r2
 8002c04:	6021      	str	r1, [r4, #0]
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d102      	bne.n	8002c10 <_printf_i+0x11c>
 8002c0a:	9e04      	ldr	r6, [sp, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <_printf_i+0x136>
 8002c10:	9e04      	ldr	r6, [sp, #16]
 8002c12:	0028      	movs	r0, r5
 8002c14:	0039      	movs	r1, r7
 8002c16:	f7fd fb07 	bl	8000228 <__aeabi_uidivmod>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	3e01      	subs	r6, #1
 8002c1e:	5c5b      	ldrb	r3, [r3, r1]
 8002c20:	7033      	strb	r3, [r6, #0]
 8002c22:	002b      	movs	r3, r5
 8002c24:	0005      	movs	r5, r0
 8002c26:	429f      	cmp	r7, r3
 8002c28:	d9f3      	bls.n	8002c12 <_printf_i+0x11e>
 8002c2a:	2f08      	cmp	r7, #8
 8002c2c:	d109      	bne.n	8002c42 <_printf_i+0x14e>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	07db      	lsls	r3, r3, #31
 8002c32:	d506      	bpl.n	8002c42 <_printf_i+0x14e>
 8002c34:	6863      	ldr	r3, [r4, #4]
 8002c36:	6922      	ldr	r2, [r4, #16]
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	dc02      	bgt.n	8002c42 <_printf_i+0x14e>
 8002c3c:	2330      	movs	r3, #48	; 0x30
 8002c3e:	3e01      	subs	r6, #1
 8002c40:	7033      	strb	r3, [r6, #0]
 8002c42:	9b04      	ldr	r3, [sp, #16]
 8002c44:	1b9b      	subs	r3, r3, r6
 8002c46:	6123      	str	r3, [r4, #16]
 8002c48:	9b07      	ldr	r3, [sp, #28]
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	9805      	ldr	r0, [sp, #20]
 8002c50:	9b06      	ldr	r3, [sp, #24]
 8002c52:	aa09      	add	r2, sp, #36	; 0x24
 8002c54:	f7ff fede 	bl	8002a14 <_printf_common>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d135      	bne.n	8002cc8 <_printf_i+0x1d4>
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	4240      	negs	r0, r0
 8002c60:	b00b      	add	sp, #44	; 0x2c
 8002c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c64:	2220      	movs	r2, #32
 8002c66:	6809      	ldr	r1, [r1, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	6022      	str	r2, [r4, #0]
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	2178      	movs	r1, #120	; 0x78
 8002c70:	3245      	adds	r2, #69	; 0x45
 8002c72:	7011      	strb	r1, [r2, #0]
 8002c74:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <_printf_i+0x220>)
 8002c76:	e7a7      	b.n	8002bc8 <_printf_i+0xd4>
 8002c78:	0648      	lsls	r0, r1, #25
 8002c7a:	d5ac      	bpl.n	8002bd6 <_printf_i+0xe2>
 8002c7c:	b2ad      	uxth	r5, r5
 8002c7e:	e7aa      	b.n	8002bd6 <_printf_i+0xe2>
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	680d      	ldr	r5, [r1, #0]
 8002c84:	1d10      	adds	r0, r2, #4
 8002c86:	6949      	ldr	r1, [r1, #20]
 8002c88:	6018      	str	r0, [r3, #0]
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	062e      	lsls	r6, r5, #24
 8002c8e:	d501      	bpl.n	8002c94 <_printf_i+0x1a0>
 8002c90:	6019      	str	r1, [r3, #0]
 8002c92:	e002      	b.n	8002c9a <_printf_i+0x1a6>
 8002c94:	066d      	lsls	r5, r5, #25
 8002c96:	d5fb      	bpl.n	8002c90 <_printf_i+0x19c>
 8002c98:	8019      	strh	r1, [r3, #0]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9e04      	ldr	r6, [sp, #16]
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	e7d2      	b.n	8002c48 <_printf_i+0x154>
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	1d11      	adds	r1, r2, #4
 8002ca6:	6019      	str	r1, [r3, #0]
 8002ca8:	6816      	ldr	r6, [r2, #0]
 8002caa:	2100      	movs	r1, #0
 8002cac:	0030      	movs	r0, r6
 8002cae:	6862      	ldr	r2, [r4, #4]
 8002cb0:	f000 f832 	bl	8002d18 <memchr>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d001      	beq.n	8002cbc <_printf_i+0x1c8>
 8002cb8:	1b80      	subs	r0, r0, r6
 8002cba:	6060      	str	r0, [r4, #4]
 8002cbc:	6863      	ldr	r3, [r4, #4]
 8002cbe:	6123      	str	r3, [r4, #16]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	9a04      	ldr	r2, [sp, #16]
 8002cc4:	7013      	strb	r3, [r2, #0]
 8002cc6:	e7bf      	b.n	8002c48 <_printf_i+0x154>
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	0032      	movs	r2, r6
 8002ccc:	9906      	ldr	r1, [sp, #24]
 8002cce:	9805      	ldr	r0, [sp, #20]
 8002cd0:	9d07      	ldr	r5, [sp, #28]
 8002cd2:	47a8      	blx	r5
 8002cd4:	1c43      	adds	r3, r0, #1
 8002cd6:	d0c1      	beq.n	8002c5c <_printf_i+0x168>
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	079b      	lsls	r3, r3, #30
 8002cdc:	d415      	bmi.n	8002d0a <_printf_i+0x216>
 8002cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce0:	68e0      	ldr	r0, [r4, #12]
 8002ce2:	4298      	cmp	r0, r3
 8002ce4:	dabc      	bge.n	8002c60 <_printf_i+0x16c>
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	e7ba      	b.n	8002c60 <_printf_i+0x16c>
 8002cea:	0022      	movs	r2, r4
 8002cec:	2301      	movs	r3, #1
 8002cee:	9906      	ldr	r1, [sp, #24]
 8002cf0:	9805      	ldr	r0, [sp, #20]
 8002cf2:	9e07      	ldr	r6, [sp, #28]
 8002cf4:	3219      	adds	r2, #25
 8002cf6:	47b0      	blx	r6
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d0af      	beq.n	8002c5c <_printf_i+0x168>
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	42ab      	cmp	r3, r5
 8002d06:	dcf0      	bgt.n	8002cea <_printf_i+0x1f6>
 8002d08:	e7e9      	b.n	8002cde <_printf_i+0x1ea>
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	e7f7      	b.n	8002cfe <_printf_i+0x20a>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	08002fc5 	.word	0x08002fc5
 8002d14:	08002fd6 	.word	0x08002fd6

08002d18 <memchr>:
 8002d18:	b2c9      	uxtb	r1, r1
 8002d1a:	1882      	adds	r2, r0, r2
 8002d1c:	4290      	cmp	r0, r2
 8002d1e:	d101      	bne.n	8002d24 <memchr+0xc>
 8002d20:	2000      	movs	r0, #0
 8002d22:	4770      	bx	lr
 8002d24:	7803      	ldrb	r3, [r0, #0]
 8002d26:	428b      	cmp	r3, r1
 8002d28:	d0fb      	beq.n	8002d22 <memchr+0xa>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	e7f6      	b.n	8002d1c <memchr+0x4>

08002d2e <memcpy>:
 8002d2e:	2300      	movs	r3, #0
 8002d30:	b510      	push	{r4, lr}
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d100      	bne.n	8002d38 <memcpy+0xa>
 8002d36:	bd10      	pop	{r4, pc}
 8002d38:	5ccc      	ldrb	r4, [r1, r3]
 8002d3a:	54c4      	strb	r4, [r0, r3]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	e7f8      	b.n	8002d32 <memcpy+0x4>

08002d40 <memmove>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4288      	cmp	r0, r1
 8002d44:	d902      	bls.n	8002d4c <memmove+0xc>
 8002d46:	188b      	adds	r3, r1, r2
 8002d48:	4298      	cmp	r0, r3
 8002d4a:	d303      	bcc.n	8002d54 <memmove+0x14>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e007      	b.n	8002d60 <memmove+0x20>
 8002d50:	5c8b      	ldrb	r3, [r1, r2]
 8002d52:	5483      	strb	r3, [r0, r2]
 8002d54:	3a01      	subs	r2, #1
 8002d56:	d2fb      	bcs.n	8002d50 <memmove+0x10>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	5ccc      	ldrb	r4, [r1, r3]
 8002d5c:	54c4      	strb	r4, [r0, r3]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1fa      	bne.n	8002d5a <memmove+0x1a>
 8002d64:	e7f8      	b.n	8002d58 <memmove+0x18>
	...

08002d68 <_free_r>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	0005      	movs	r5, r0
 8002d6c:	2900      	cmp	r1, #0
 8002d6e:	d010      	beq.n	8002d92 <_free_r+0x2a>
 8002d70:	1f0c      	subs	r4, r1, #4
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da00      	bge.n	8002d7a <_free_r+0x12>
 8002d78:	18e4      	adds	r4, r4, r3
 8002d7a:	0028      	movs	r0, r5
 8002d7c:	f000 f8d4 	bl	8002f28 <__malloc_lock>
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <_free_r+0x90>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <_free_r+0x2c>
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6014      	str	r4, [r2, #0]
 8002d8c:	0028      	movs	r0, r5
 8002d8e:	f000 f8d3 	bl	8002f38 <__malloc_unlock>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d908      	bls.n	8002daa <_free_r+0x42>
 8002d98:	6821      	ldr	r1, [r4, #0]
 8002d9a:	1860      	adds	r0, r4, r1
 8002d9c:	4283      	cmp	r3, r0
 8002d9e:	d1f3      	bne.n	8002d88 <_free_r+0x20>
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	1841      	adds	r1, r0, r1
 8002da6:	6021      	str	r1, [r4, #0]
 8002da8:	e7ee      	b.n	8002d88 <_free_r+0x20>
 8002daa:	001a      	movs	r2, r3
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_free_r+0x4e>
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	d9f9      	bls.n	8002daa <_free_r+0x42>
 8002db6:	6811      	ldr	r1, [r2, #0]
 8002db8:	1850      	adds	r0, r2, r1
 8002dba:	42a0      	cmp	r0, r4
 8002dbc:	d10b      	bne.n	8002dd6 <_free_r+0x6e>
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	1809      	adds	r1, r1, r0
 8002dc2:	1850      	adds	r0, r2, r1
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	4283      	cmp	r3, r0
 8002dc8:	d1e0      	bne.n	8002d8c <_free_r+0x24>
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	1841      	adds	r1, r0, r1
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e7da      	b.n	8002d8c <_free_r+0x24>
 8002dd6:	42a0      	cmp	r0, r4
 8002dd8:	d902      	bls.n	8002de0 <_free_r+0x78>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	602b      	str	r3, [r5, #0]
 8002dde:	e7d5      	b.n	8002d8c <_free_r+0x24>
 8002de0:	6821      	ldr	r1, [r4, #0]
 8002de2:	1860      	adds	r0, r4, r1
 8002de4:	4283      	cmp	r3, r0
 8002de6:	d103      	bne.n	8002df0 <_free_r+0x88>
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1841      	adds	r1, r0, r1
 8002dee:	6021      	str	r1, [r4, #0]
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	6054      	str	r4, [r2, #4]
 8002df4:	e7ca      	b.n	8002d8c <_free_r+0x24>
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	200000b4 	.word	0x200000b4

08002dfc <_malloc_r>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	2303      	movs	r3, #3
 8002e00:	1ccd      	adds	r5, r1, #3
 8002e02:	439d      	bics	r5, r3
 8002e04:	3508      	adds	r5, #8
 8002e06:	0006      	movs	r6, r0
 8002e08:	2d0c      	cmp	r5, #12
 8002e0a:	d21f      	bcs.n	8002e4c <_malloc_r+0x50>
 8002e0c:	250c      	movs	r5, #12
 8002e0e:	42a9      	cmp	r1, r5
 8002e10:	d81e      	bhi.n	8002e50 <_malloc_r+0x54>
 8002e12:	0030      	movs	r0, r6
 8002e14:	f000 f888 	bl	8002f28 <__malloc_lock>
 8002e18:	4925      	ldr	r1, [pc, #148]	; (8002eb0 <_malloc_r+0xb4>)
 8002e1a:	680a      	ldr	r2, [r1, #0]
 8002e1c:	0014      	movs	r4, r2
 8002e1e:	2c00      	cmp	r4, #0
 8002e20:	d11a      	bne.n	8002e58 <_malloc_r+0x5c>
 8002e22:	4f24      	ldr	r7, [pc, #144]	; (8002eb4 <_malloc_r+0xb8>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <_malloc_r+0x38>
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	0030      	movs	r0, r6
 8002e2e:	f000 f869 	bl	8002f04 <_sbrk_r>
 8002e32:	6038      	str	r0, [r7, #0]
 8002e34:	0029      	movs	r1, r5
 8002e36:	0030      	movs	r0, r6
 8002e38:	f000 f864 	bl	8002f04 <_sbrk_r>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d12b      	bne.n	8002e98 <_malloc_r+0x9c>
 8002e40:	230c      	movs	r3, #12
 8002e42:	0030      	movs	r0, r6
 8002e44:	6033      	str	r3, [r6, #0]
 8002e46:	f000 f877 	bl	8002f38 <__malloc_unlock>
 8002e4a:	e003      	b.n	8002e54 <_malloc_r+0x58>
 8002e4c:	2d00      	cmp	r5, #0
 8002e4e:	dade      	bge.n	8002e0e <_malloc_r+0x12>
 8002e50:	230c      	movs	r3, #12
 8002e52:	6033      	str	r3, [r6, #0]
 8002e54:	2000      	movs	r0, #0
 8002e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	1b5b      	subs	r3, r3, r5
 8002e5c:	d419      	bmi.n	8002e92 <_malloc_r+0x96>
 8002e5e:	2b0b      	cmp	r3, #11
 8002e60:	d903      	bls.n	8002e6a <_malloc_r+0x6e>
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	18e4      	adds	r4, r4, r3
 8002e66:	6025      	str	r5, [r4, #0]
 8002e68:	e003      	b.n	8002e72 <_malloc_r+0x76>
 8002e6a:	6863      	ldr	r3, [r4, #4]
 8002e6c:	42a2      	cmp	r2, r4
 8002e6e:	d10e      	bne.n	8002e8e <_malloc_r+0x92>
 8002e70:	600b      	str	r3, [r1, #0]
 8002e72:	0030      	movs	r0, r6
 8002e74:	f000 f860 	bl	8002f38 <__malloc_unlock>
 8002e78:	0020      	movs	r0, r4
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	300b      	adds	r0, #11
 8002e7e:	1d23      	adds	r3, r4, #4
 8002e80:	4390      	bics	r0, r2
 8002e82:	1ac2      	subs	r2, r0, r3
 8002e84:	4298      	cmp	r0, r3
 8002e86:	d0e6      	beq.n	8002e56 <_malloc_r+0x5a>
 8002e88:	1a1b      	subs	r3, r3, r0
 8002e8a:	50a3      	str	r3, [r4, r2]
 8002e8c:	e7e3      	b.n	8002e56 <_malloc_r+0x5a>
 8002e8e:	6053      	str	r3, [r2, #4]
 8002e90:	e7ef      	b.n	8002e72 <_malloc_r+0x76>
 8002e92:	0022      	movs	r2, r4
 8002e94:	6864      	ldr	r4, [r4, #4]
 8002e96:	e7c2      	b.n	8002e1e <_malloc_r+0x22>
 8002e98:	2303      	movs	r3, #3
 8002e9a:	1cc4      	adds	r4, r0, #3
 8002e9c:	439c      	bics	r4, r3
 8002e9e:	42a0      	cmp	r0, r4
 8002ea0:	d0e1      	beq.n	8002e66 <_malloc_r+0x6a>
 8002ea2:	1a21      	subs	r1, r4, r0
 8002ea4:	0030      	movs	r0, r6
 8002ea6:	f000 f82d 	bl	8002f04 <_sbrk_r>
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	d1db      	bne.n	8002e66 <_malloc_r+0x6a>
 8002eae:	e7c7      	b.n	8002e40 <_malloc_r+0x44>
 8002eb0:	200000b4 	.word	0x200000b4
 8002eb4:	200000b8 	.word	0x200000b8

08002eb8 <_realloc_r>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	0007      	movs	r7, r0
 8002ebc:	000d      	movs	r5, r1
 8002ebe:	0016      	movs	r6, r2
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	d105      	bne.n	8002ed0 <_realloc_r+0x18>
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	f7ff ff99 	bl	8002dfc <_malloc_r>
 8002eca:	0004      	movs	r4, r0
 8002ecc:	0020      	movs	r0, r4
 8002ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed0:	2a00      	cmp	r2, #0
 8002ed2:	d103      	bne.n	8002edc <_realloc_r+0x24>
 8002ed4:	f7ff ff48 	bl	8002d68 <_free_r>
 8002ed8:	0034      	movs	r4, r6
 8002eda:	e7f7      	b.n	8002ecc <_realloc_r+0x14>
 8002edc:	f000 f834 	bl	8002f48 <_malloc_usable_size_r>
 8002ee0:	002c      	movs	r4, r5
 8002ee2:	42b0      	cmp	r0, r6
 8002ee4:	d2f2      	bcs.n	8002ecc <_realloc_r+0x14>
 8002ee6:	0031      	movs	r1, r6
 8002ee8:	0038      	movs	r0, r7
 8002eea:	f7ff ff87 	bl	8002dfc <_malloc_r>
 8002eee:	1e04      	subs	r4, r0, #0
 8002ef0:	d0ec      	beq.n	8002ecc <_realloc_r+0x14>
 8002ef2:	0029      	movs	r1, r5
 8002ef4:	0032      	movs	r2, r6
 8002ef6:	f7ff ff1a 	bl	8002d2e <memcpy>
 8002efa:	0029      	movs	r1, r5
 8002efc:	0038      	movs	r0, r7
 8002efe:	f7ff ff33 	bl	8002d68 <_free_r>
 8002f02:	e7e3      	b.n	8002ecc <_realloc_r+0x14>

08002f04 <_sbrk_r>:
 8002f04:	2300      	movs	r3, #0
 8002f06:	b570      	push	{r4, r5, r6, lr}
 8002f08:	4d06      	ldr	r5, [pc, #24]	; (8002f24 <_sbrk_r+0x20>)
 8002f0a:	0004      	movs	r4, r0
 8002f0c:	0008      	movs	r0, r1
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	f7fd fe8c 	bl	8000c2c <_sbrk>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d103      	bne.n	8002f20 <_sbrk_r+0x1c>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d000      	beq.n	8002f20 <_sbrk_r+0x1c>
 8002f1e:	6023      	str	r3, [r4, #0]
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20000150 	.word	0x20000150

08002f28 <__malloc_lock>:
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4802      	ldr	r0, [pc, #8]	; (8002f34 <__malloc_lock+0xc>)
 8002f2c:	f000 f814 	bl	8002f58 <__retarget_lock_acquire_recursive>
 8002f30:	bd10      	pop	{r4, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000158 	.word	0x20000158

08002f38 <__malloc_unlock>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4802      	ldr	r0, [pc, #8]	; (8002f44 <__malloc_unlock+0xc>)
 8002f3c:	f000 f80d 	bl	8002f5a <__retarget_lock_release_recursive>
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	20000158 	.word	0x20000158

08002f48 <_malloc_usable_size_r>:
 8002f48:	1f0b      	subs	r3, r1, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1f18      	subs	r0, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da01      	bge.n	8002f56 <_malloc_usable_size_r+0xe>
 8002f52:	580b      	ldr	r3, [r1, r0]
 8002f54:	18c0      	adds	r0, r0, r3
 8002f56:	4770      	bx	lr

08002f58 <__retarget_lock_acquire_recursive>:
 8002f58:	4770      	bx	lr

08002f5a <__retarget_lock_release_recursive>:
 8002f5a:	4770      	bx	lr

08002f5c <_init>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr

08002f68 <_fini>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr
