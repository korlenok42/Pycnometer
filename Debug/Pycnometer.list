
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001940  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a30  08001a30  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001a30  08001a30  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a30  08001a30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a30  08001a30  00011a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a34  08001a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08001a48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001a48  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b90  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001427  00000000  00000000  00027bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00028ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f466  00000000  00000000  0002a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009808  00000000  00000000  0003950e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eb63  00000000  00000000  00042d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a1879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  000a18cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080019e8 	.word	0x080019e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080019e8 	.word	0x080019e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ReadADCvalue;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d103      	bne.n	800023c <HAL_GPIO_EXTI_Callback+0x1c>
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]

    __NOP();

  }

}
 800023a:	e013      	b.n	8000264 <HAL_GPIO_EXTI_Callback+0x44>
  else if(GPIO_Pin == Stop_Pin) {
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10e      	bne.n	8000262 <HAL_GPIO_EXTI_Callback+0x42>
	  TimerFlag = 0;
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
	  TimerCounter = TimStart;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_GPIO_EXTI_Callback+0x50>)
 800024c:	220f      	movs	r2, #15
 800024e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	00d9      	lsls	r1, r3, #3
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2200      	movs	r2, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fcd4 	bl	8000c08 <HAL_GPIO_WritePin>
}
 8000260:	e000      	b.n	8000264 <HAL_GPIO_EXTI_Callback+0x44>
    __NOP();
 8000262:	46c0      	nop			; (mov r8, r8)
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000030 	.word	0x20000030
 8000270:	20000000 	.word	0x20000000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fa1c 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f824 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f8c4 	bl	800040c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000284:	f000 f860 	bl	8000348 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000288:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <main+0x44>)
 800028a:	213c      	movs	r1, #60	; 0x3c
 800028c:	0018      	movs	r0, r3
 800028e:	f001 f9e9 	bl	8001664 <HAL_TIM_Encoder_Start>


  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <main+0x48>)
 8000294:	2201      	movs	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fcb5 	bl	8000c08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <main+0x48>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	2102      	movs	r1, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fcaf 	bl	8000c08 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Enc_Counter = TIM3->CNT;
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <main+0x4c>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <main+0x50>)
 80002b2:	701a      	strb	r2, [r3, #0]
 80002b4:	e7f9      	b.n	80002aa <main+0x36>
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	20000034 	.word	0x20000034
 80002bc:	48001400 	.word	0x48001400
 80002c0:	40000400 	.word	0x40000400
 80002c4:	2000002c 	.word	0x2000002c

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b091      	sub	sp, #68	; 0x44
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	2410      	movs	r4, #16
 80002d0:	193b      	adds	r3, r7, r4
 80002d2:	0018      	movs	r0, r3
 80002d4:	2330      	movs	r3, #48	; 0x30
 80002d6:	001a      	movs	r2, r3
 80002d8:	2100      	movs	r1, #0
 80002da:	f001 fb7d 	bl	80019d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002de:	003b      	movs	r3, r7
 80002e0:	0018      	movs	r0, r3
 80002e2:	2310      	movs	r3, #16
 80002e4:	001a      	movs	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	f001 fb76 	bl	80019d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	0021      	movs	r1, r4
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2201      	movs	r2, #1
 80002f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2210      	movs	r2, #16
 80002fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	0018      	movs	r0, r3
 800030a:	f000 fcb7 	bl	8000c7c <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000312:	f000 f909 	bl	8000528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	003b      	movs	r3, r7
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f000 ffbc 	bl	80012b0 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800033c:	f000 f8f4 	bl	8000528 <Error_Handler>
  }
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b011      	add	sp, #68	; 0x44
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b08d      	sub	sp, #52	; 0x34
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800034e:	240c      	movs	r4, #12
 8000350:	193b      	adds	r3, r7, r4
 8000352:	0018      	movs	r0, r3
 8000354:	2324      	movs	r3, #36	; 0x24
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 fb3d 	bl	80019d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	0018      	movs	r0, r3
 8000362:	2308      	movs	r3, #8
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f001 fb36 	bl	80019d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_TIM3_Init+0xbc>)
 800036e:	4a26      	ldr	r2, [pc, #152]	; (8000408 <MX_TIM3_Init+0xc0>)
 8000370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_TIM3_Init+0xbc>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_TIM3_Init+0xbc>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_TIM3_Init+0xbc>)
 8000380:	2263      	movs	r2, #99	; 0x63
 8000382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <MX_TIM3_Init+0xbc>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038a:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_TIM3_Init+0xbc>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000390:	0021      	movs	r1, r4
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2201      	movs	r2, #1
 8000396:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2201      	movs	r2, #1
 80003a2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2201      	movs	r2, #1
 80003ba:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_TIM3_Init+0xbc>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 f8a0 	bl	8001514 <HAL_TIM_Encoder_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80003d8:	f000 f8a6 	bl	8000528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e8:	1d3a      	adds	r2, r7, #4
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_TIM3_Init+0xbc>)
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 fa76 	bl	80018e0 <HAL_TIMEx_MasterConfigSynchronization>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80003f8:	f000 f896 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	b00d      	add	sp, #52	; 0x34
 8000402:	bd90      	pop	{r4, r7, pc}
 8000404:	20000034 	.word	0x20000034
 8000408:	40000400 	.word	0x40000400

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b089      	sub	sp, #36	; 0x24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	240c      	movs	r4, #12
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2314      	movs	r3, #20
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f001 fadb 	bl	80019d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <MX_GPIO_Init+0x114>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <MX_GPIO_Init+0x114>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	03c9      	lsls	r1, r1, #15
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b3b      	ldr	r3, [pc, #236]	; (8000520 <MX_GPIO_Init+0x114>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	03db      	lsls	r3, r3, #15
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b38      	ldr	r3, [pc, #224]	; (8000520 <MX_GPIO_Init+0x114>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b37      	ldr	r3, [pc, #220]	; (8000520 <MX_GPIO_Init+0x114>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	0289      	lsls	r1, r1, #10
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <MX_GPIO_Init+0x114>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	029b      	lsls	r3, r3, #10
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800045a:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x118>)
 800045c:	2200      	movs	r2, #0
 800045e:	2103      	movs	r1, #3
 8000460:	0018      	movs	r0, r3
 8000462:	f000 fbd1 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin, GPIO_PIN_RESET);
 8000466:	2387      	movs	r3, #135	; 0x87
 8000468:	00d9      	lsls	r1, r3, #3
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2200      	movs	r2, #0
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fbc9 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2203      	movs	r2, #3
 800047a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2201      	movs	r2, #1
 8000480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800048e:	193b      	adds	r3, r7, r4
 8000490:	4a24      	ldr	r2, [pc, #144]	; (8000524 <MX_GPIO_Init+0x118>)
 8000492:	0019      	movs	r1, r3
 8000494:	0010      	movs	r0, r2
 8000496:	f000 fa4f 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2284      	movs	r2, #132	; 0x84
 80004a4:	0392      	lsls	r2, r2, #14
 80004a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2202      	movs	r2, #2
 80004ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80004ae:	193a      	adds	r2, r7, r4
 80004b0:	2390      	movs	r3, #144	; 0x90
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fa3e 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Pin */
  GPIO_InitStruct.Pin = Start_Pin;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2202      	movs	r2, #2
 80004c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2288      	movs	r2, #136	; 0x88
 80004c6:	0352      	lsls	r2, r2, #13
 80004c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2202      	movs	r2, #2
 80004ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Start_GPIO_Port, &GPIO_InitStruct);
 80004d0:	193a      	adds	r2, r7, r4
 80004d2:	2390      	movs	r3, #144	; 0x90
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	0011      	movs	r1, r2
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fa2d 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DS_Pin Latch_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin;
 80004de:	0021      	movs	r1, r4
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2287      	movs	r2, #135	; 0x87
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2201      	movs	r2, #1
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	187a      	adds	r2, r7, r1
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 fa18 	bl	8000938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2005      	movs	r0, #5
 800050e:	f000 f9e1 	bl	80008d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000512:	2005      	movs	r0, #5
 8000514:	f000 f9f3 	bl	80008fe <HAL_NVIC_EnableIRQ>

}
 8000518:	46c0      	nop			; (mov r8, r8)
 800051a:	46bd      	mov	sp, r7
 800051c:	b009      	add	sp, #36	; 0x24
 800051e:	bd90      	pop	{r4, r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	48001400 	.word	0x48001400

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_MspInit+0x44>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08b      	sub	sp, #44	; 0x2c
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2414      	movs	r4, #20
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f001 fa22 	bl	80019d8 <memset>
  if(htim_encoder->Instance==TIM3)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <HAL_TIM_Encoder_MspInit+0x8c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d130      	bne.n	8000600 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005a0:	69da      	ldr	r2, [r3, #28]
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005a4:	2102      	movs	r1, #2
 80005a6:	430a      	orrs	r2, r1
 80005a8:	61da      	str	r2, [r3, #28]
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	2202      	movs	r2, #2
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0289      	lsls	r1, r1, #10
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_TIM_Encoder_MspInit+0x90>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	22c0      	movs	r2, #192	; 0xc0
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2202      	movs	r2, #2
 80005de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2201      	movs	r2, #1
 80005e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f2:	187a      	adds	r2, r7, r1
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f99c 	bl	8000938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b00b      	add	sp, #44	; 0x2c
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40000400 	.word	0x40000400
 800060c:	40021000 	.word	0x40021000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f886 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fafe 	bl	8000c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000648:	2002      	movs	r0, #2
 800064a:	f000 fafb 	bl	8000c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000662:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0b      	ldr	r4, [pc, #44]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800068a:	f7ff ffe3 	bl	8000654 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800068e:	f001 f97f 	bl	8001990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000692:	f7ff fdef 	bl	8000274 <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   r0, =_estack
 8000698:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006a4:	08001a38 	.word	0x08001a38
  ldr r2, =_sbss
 80006a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006ac:	20000084 	.word	0x20000084

080006b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_IRQHandler>
	...

080006b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_Init+0x24>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_Init+0x24>)
 80006be:	2110      	movs	r1, #16
 80006c0:	430a      	orrs	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 f809 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ca:	f7ff ff33 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <HAL_InitTick+0x5c>)
 80006e6:	681c      	ldr	r4, [r3, #0]
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <HAL_InitTick+0x60>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	0019      	movs	r1, r3
 80006ee:	23fa      	movs	r3, #250	; 0xfa
 80006f0:	0098      	lsls	r0, r3, #2
 80006f2:	f7ff fd09 	bl	8000108 <__udivsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	0019      	movs	r1, r3
 80006fa:	0020      	movs	r0, r4
 80006fc:	f7ff fd04 	bl	8000108 <__udivsi3>
 8000700:	0003      	movs	r3, r0
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f90b 	bl	800091e <HAL_SYSTICK_Config>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e00f      	b.n	8000730 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d80b      	bhi.n	800072e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2301      	movs	r3, #1
 800071a:	425b      	negs	r3, r3
 800071c:	2200      	movs	r2, #0
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f8d8 	bl	80008d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_InitTick+0x64>)
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e000      	b.n	8000730 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	b003      	add	sp, #12
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	20000004 	.word	0x20000004
 800073c:	2000000c 	.word	0x2000000c
 8000740:	20000008 	.word	0x20000008

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	18d2      	adds	r2, r2, r3
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_IncTick+0x20>)
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000080 	.word	0x20000080

08000768 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	20000080 	.word	0x20000080

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b7f      	cmp	r3, #127	; 0x7f
 800078e:	d809      	bhi.n	80007a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	231f      	movs	r3, #31
 8000798:	401a      	ands	r2, r3
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__NVIC_EnableIRQ+0x30>)
 800079c:	2101      	movs	r1, #1
 800079e:	4091      	lsls	r1, r2
 80007a0:	000a      	movs	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]
  }
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000e100 	.word	0xe000e100

080007b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	0002      	movs	r2, r0
 80007b8:	6039      	str	r1, [r7, #0]
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b7f      	cmp	r3, #127	; 0x7f
 80007c4:	d828      	bhi.n	8000818 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <__NVIC_SetPriority+0xd4>)
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	089b      	lsrs	r3, r3, #2
 80007d0:	33c0      	adds	r3, #192	; 0xc0
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	589b      	ldr	r3, [r3, r2]
 80007d6:	1dfa      	adds	r2, r7, #7
 80007d8:	7812      	ldrb	r2, [r2, #0]
 80007da:	0011      	movs	r1, r2
 80007dc:	2203      	movs	r2, #3
 80007de:	400a      	ands	r2, r1
 80007e0:	00d2      	lsls	r2, r2, #3
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	4091      	lsls	r1, r2
 80007e6:	000a      	movs	r2, r1
 80007e8:	43d2      	mvns	r2, r2
 80007ea:	401a      	ands	r2, r3
 80007ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	019b      	lsls	r3, r3, #6
 80007f2:	22ff      	movs	r2, #255	; 0xff
 80007f4:	401a      	ands	r2, r3
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0018      	movs	r0, r3
 80007fc:	2303      	movs	r3, #3
 80007fe:	4003      	ands	r3, r0
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000804:	481f      	ldr	r0, [pc, #124]	; (8000884 <__NVIC_SetPriority+0xd4>)
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	089b      	lsrs	r3, r3, #2
 800080e:	430a      	orrs	r2, r1
 8000810:	33c0      	adds	r3, #192	; 0xc0
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000816:	e031      	b.n	800087c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <__NVIC_SetPriority+0xd8>)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0019      	movs	r1, r3
 8000820:	230f      	movs	r3, #15
 8000822:	400b      	ands	r3, r1
 8000824:	3b08      	subs	r3, #8
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	3306      	adds	r3, #6
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	3304      	adds	r3, #4
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1dfa      	adds	r2, r7, #7
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	0011      	movs	r1, r2
 8000838:	2203      	movs	r2, #3
 800083a:	400a      	ands	r2, r1
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	019b      	lsls	r3, r3, #6
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	401a      	ands	r2, r3
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	2303      	movs	r3, #3
 800085a:	4003      	ands	r3, r0
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <__NVIC_SetPriority+0xd8>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	001c      	movs	r4, r3
 8000868:	230f      	movs	r3, #15
 800086a:	4023      	ands	r3, r4
 800086c:	3b08      	subs	r3, #8
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	430a      	orrs	r2, r1
 8000872:	3306      	adds	r3, #6
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	18c3      	adds	r3, r0, r3
 8000878:	3304      	adds	r3, #4
 800087a:	601a      	str	r2, [r3, #0]
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b003      	add	sp, #12
 8000882:	bd90      	pop	{r4, r7, pc}
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	045b      	lsls	r3, r3, #17
 800089c:	429a      	cmp	r2, r3
 800089e:	d301      	bcc.n	80008a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a0:	2301      	movs	r3, #1
 80008a2:	e010      	b.n	80008c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <SysTick_Config+0x44>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	3a01      	subs	r2, #1
 80008aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
 80008b0:	2103      	movs	r1, #3
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff ff7c 	bl	80007b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x44>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	0018      	movs	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b002      	add	sp, #8
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	210f      	movs	r1, #15
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	1c02      	adds	r2, r0, #0
 80008e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b25b      	sxtb	r3, r3
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ff5d 	bl	80007b0 <__NVIC_SetPriority>
}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b004      	add	sp, #16
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	0002      	movs	r2, r0
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ff33 	bl	800077c <__NVIC_EnableIRQ>
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ffaf 	bl	800088c <SysTick_Config>
 800092e:	0003      	movs	r3, r0
}
 8000930:	0018      	movs	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	b002      	add	sp, #8
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e149      	b.n	8000bdc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d100      	bne.n	8000960 <HAL_GPIO_Init+0x28>
 800095e:	e13a      	b.n	8000bd6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2203      	movs	r2, #3
 8000966:	4013      	ands	r3, r2
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2203      	movs	r2, #3
 8000972:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	43da      	mvns	r2, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	2201      	movs	r2, #1
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2203      	movs	r2, #3
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	58d3      	ldr	r3, [r2, r3]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2207      	movs	r2, #7
 8000a34:	4013      	ands	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	400b      	ands	r3, r1
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	6939      	ldr	r1, [r7, #16]
 8000a68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	029b      	lsls	r3, r3, #10
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d100      	bne.n	8000aac <HAL_GPIO_Init+0x174>
 8000aaa:	e094      	b.n	8000bd6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b51      	ldr	r3, [pc, #324]	; (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000aae:	699a      	ldr	r2, [r3, #24]
 8000ab0:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	619a      	str	r2, [r3, #24]
 8000ab8:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	589b      	ldr	r3, [r3, r2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	409a      	lsls	r2, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	2390      	movs	r3, #144	; 0x90
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d00d      	beq.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a41      	ldr	r2, [pc, #260]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d007      	beq.n	8000b0a <HAL_GPIO_Init+0x1d2>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_GPIO_Init+0x1ce>
 8000b02:	2302      	movs	r3, #2
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b06:	2305      	movs	r3, #5
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	2103      	movs	r1, #3
 8000b14:	400a      	ands	r2, r1
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b20:	4935      	ldr	r1, [pc, #212]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	4013      	ands	r3, r2
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43da      	mvns	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	4013      	ands	r3, r2
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	035b      	lsls	r3, r3, #13
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43da      	mvns	r2, r3
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	039b      	lsls	r3, r3, #14
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	40da      	lsrs	r2, r3
 8000be4:	1e13      	subs	r3, r2, #0
 8000be6:	d000      	beq.n	8000bea <HAL_GPIO_Init+0x2b2>
 8000be8:	e6ae      	b.n	8000948 <HAL_GPIO_Init+0x10>
  } 
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b006      	add	sp, #24
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	48000800 	.word	0x48000800
 8000c04:	40010400 	.word	0x40010400

08000c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	0008      	movs	r0, r1
 8000c12:	0011      	movs	r1, r2
 8000c14:	1cbb      	adds	r3, r7, #2
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	801a      	strh	r2, [r3, #0]
 8000c1a:	1c7b      	adds	r3, r7, #1
 8000c1c:	1c0a      	adds	r2, r1, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c20:	1c7b      	adds	r3, r7, #1
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c28:	1cbb      	adds	r3, r7, #2
 8000c2a:	881a      	ldrh	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c30:	e003      	b.n	8000c3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c32:	1cbb      	adds	r3, r7, #2
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b002      	add	sp, #8
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	1dba      	adds	r2, r7, #6
 8000c56:	8812      	ldrh	r2, [r2, #0]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d008      	beq.n	8000c6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000c5e:	1dba      	adds	r2, r7, #6
 8000c60:	8812      	ldrh	r2, [r2, #0]
 8000c62:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff fad9 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e301      	b.n	8001292 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2201      	movs	r2, #1
 8000c94:	4013      	ands	r3, r2
 8000c96:	d100      	bne.n	8000c9a <HAL_RCC_OscConfig+0x1e>
 8000c98:	e08d      	b.n	8000db6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c9a:	4bc3      	ldr	r3, [pc, #780]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ca6:	4bc0      	ldr	r3, [pc, #768]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	220c      	movs	r2, #12
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x64>
 8000cb2:	4bbd      	ldr	r3, [pc, #756]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	025b      	lsls	r3, r3, #9
 8000cba:	401a      	ands	r2, r3
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d10d      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	4bb8      	ldr	r3, [pc, #736]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	4013      	ands	r3, r2
 8000cce:	d100      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x56>
 8000cd0:	e070      	b.n	8000db4 <HAL_RCC_OscConfig+0x138>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d000      	beq.n	8000cdc <HAL_RCC_OscConfig+0x60>
 8000cda:	e06b      	b.n	8000db4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e2d8      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d107      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x7c>
 8000ce8:	4baf      	ldr	r3, [pc, #700]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4bae      	ldr	r3, [pc, #696]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e02f      	b.n	8000d58 <HAL_RCC_OscConfig+0xdc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10c      	bne.n	8000d1a <HAL_RCC_OscConfig+0x9e>
 8000d00:	4ba9      	ldr	r3, [pc, #676]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4ba8      	ldr	r3, [pc, #672]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d06:	49a9      	ldr	r1, [pc, #676]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	4ba6      	ldr	r3, [pc, #664]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4ba5      	ldr	r3, [pc, #660]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	49a7      	ldr	r1, [pc, #668]	; (8000fb0 <HAL_RCC_OscConfig+0x334>)
 8000d14:	400a      	ands	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e01e      	b.n	8000d58 <HAL_RCC_OscConfig+0xdc>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d10e      	bne.n	8000d40 <HAL_RCC_OscConfig+0xc4>
 8000d22:	4ba1      	ldr	r3, [pc, #644]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4ba0      	ldr	r3, [pc, #640]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	02c9      	lsls	r1, r1, #11
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	4b9d      	ldr	r3, [pc, #628]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b9c      	ldr	r3, [pc, #624]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0249      	lsls	r1, r1, #9
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e00b      	b.n	8000d58 <HAL_RCC_OscConfig+0xdc>
 8000d40:	4b99      	ldr	r3, [pc, #612]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b98      	ldr	r3, [pc, #608]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	4999      	ldr	r1, [pc, #612]	; (8000fac <HAL_RCC_OscConfig+0x330>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	4b96      	ldr	r3, [pc, #600]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b95      	ldr	r3, [pc, #596]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	4997      	ldr	r1, [pc, #604]	; (8000fb0 <HAL_RCC_OscConfig+0x334>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d014      	beq.n	8000d8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fd02 	bl	8000768 <HAL_GetTick>
 8000d64:	0003      	movs	r3, r0
 8000d66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fcfd 	bl	8000768 <HAL_GetTick>
 8000d6e:	0002      	movs	r2, r0
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e28a      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7c:	4b8a      	ldr	r3, [pc, #552]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0xee>
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fced 	bl	8000768 <HAL_GetTick>
 8000d8e:	0003      	movs	r3, r0
 8000d90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d94:	f7ff fce8 	bl	8000768 <HAL_GetTick>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b64      	cmp	r3, #100	; 0x64
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e275      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da6:	4b80      	ldr	r3, [pc, #512]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	4013      	ands	r3, r2
 8000db0:	d1f0      	bne.n	8000d94 <HAL_RCC_OscConfig+0x118>
 8000db2:	e000      	b.n	8000db6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x146>
 8000dc0:	e069      	b.n	8000e96 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dc2:	4b79      	ldr	r3, [pc, #484]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d00b      	beq.n	8000de4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dcc:	4b76      	ldr	r3, [pc, #472]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	d11c      	bne.n	8000e12 <HAL_RCC_OscConfig+0x196>
 8000dd8:	4b73      	ldr	r3, [pc, #460]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	025b      	lsls	r3, r3, #9
 8000de0:	4013      	ands	r3, r2
 8000de2:	d116      	bne.n	8000e12 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de4:	4b70      	ldr	r3, [pc, #448]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2202      	movs	r2, #2
 8000dea:	4013      	ands	r3, r2
 8000dec:	d005      	beq.n	8000dfa <HAL_RCC_OscConfig+0x17e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d001      	beq.n	8000dfa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e24b      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfa:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	22f8      	movs	r2, #248	; 0xf8
 8000e00:	4393      	bics	r3, r2
 8000e02:	0019      	movs	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	00da      	lsls	r2, r3, #3
 8000e0a:	4b67      	ldr	r3, [pc, #412]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e10:	e041      	b.n	8000e96 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d024      	beq.n	8000e64 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e1a:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fc9f 	bl	8000768 <HAL_GetTick>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc9a 	bl	8000768 <HAL_GetTick>
 8000e34:	0002      	movs	r2, r0
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e227      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d0f1      	beq.n	8000e30 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4c:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	22f8      	movs	r2, #248	; 0xf8
 8000e52:	4393      	bics	r3, r2
 8000e54:	0019      	movs	r1, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	00da      	lsls	r2, r3, #3
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	e018      	b.n	8000e96 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e64:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc7a 	bl	8000768 <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fc75 	bl	8000768 <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e202      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2202      	movs	r2, #2
 8000e92:	4013      	ands	r3, r2
 8000e94:	d1f1      	bne.n	8000e7a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d036      	beq.n	8000f0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d019      	beq.n	8000edc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fc58 	bl	8000768 <HAL_GetTick>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc53 	bl	8000768 <HAL_GetTick>
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e1e0      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d0f1      	beq.n	8000ebe <HAL_RCC_OscConfig+0x242>
 8000eda:	e018      	b.n	8000f0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fc3e 	bl	8000768 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc39 	bl	8000768 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1c6      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d1f1      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2204      	movs	r2, #4
 8000f14:	4013      	ands	r3, r2
 8000f16:	d100      	bne.n	8000f1a <HAL_RCC_OscConfig+0x29e>
 8000f18:	e0b4      	b.n	8001084 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f1a:	201f      	movs	r0, #31
 8000f1c:	183b      	adds	r3, r7, r0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	69da      	ldr	r2, [r3, #28]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	055b      	lsls	r3, r3, #21
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d110      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f30:	69da      	ldr	r2, [r3, #28]
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0549      	lsls	r1, r1, #21
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	61da      	str	r2, [r3, #28]
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	055b      	lsls	r3, r3, #21
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f4a:	183b      	adds	r3, r7, r0
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_RCC_OscConfig+0x338>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	d11a      	bne.n	8000f92 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_RCC_OscConfig+0x338>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_RCC_OscConfig+0x338>)
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	0049      	lsls	r1, r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fbfd 	bl	8000768 <HAL_GetTick>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f74:	f7ff fbf8 	bl	8000768 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e185      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_RCC_OscConfig+0x338>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10e      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x33c>
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	6a1a      	ldr	r2, [r3, #32]
 8000f9e:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	621a      	str	r2, [r3, #32]
 8000fa6:	e035      	b.n	8001014 <HAL_RCC_OscConfig+0x398>
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	fffeffff 	.word	0xfffeffff
 8000fb0:	fffbffff 	.word	0xfffbffff
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x35e>
 8000fc0:	4bb6      	ldr	r3, [pc, #728]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fc2:	6a1a      	ldr	r2, [r3, #32]
 8000fc4:	4bb5      	ldr	r3, [pc, #724]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	438a      	bics	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	4bb3      	ldr	r3, [pc, #716]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fce:	6a1a      	ldr	r2, [r3, #32]
 8000fd0:	4bb2      	ldr	r3, [pc, #712]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	621a      	str	r2, [r3, #32]
 8000fd8:	e01c      	b.n	8001014 <HAL_RCC_OscConfig+0x398>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x380>
 8000fe2:	4bae      	ldr	r3, [pc, #696]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fe4:	6a1a      	ldr	r2, [r3, #32]
 8000fe6:	4bad      	ldr	r3, [pc, #692]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	621a      	str	r2, [r3, #32]
 8000fee:	4bab      	ldr	r3, [pc, #684]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000ff0:	6a1a      	ldr	r2, [r3, #32]
 8000ff2:	4baa      	ldr	r3, [pc, #680]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	621a      	str	r2, [r3, #32]
 8000ffa:	e00b      	b.n	8001014 <HAL_RCC_OscConfig+0x398>
 8000ffc:	4ba7      	ldr	r3, [pc, #668]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8000ffe:	6a1a      	ldr	r2, [r3, #32]
 8001000:	4ba6      	ldr	r3, [pc, #664]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001002:	2101      	movs	r1, #1
 8001004:	438a      	bics	r2, r1
 8001006:	621a      	str	r2, [r3, #32]
 8001008:	4ba4      	ldr	r3, [pc, #656]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	4ba3      	ldr	r3, [pc, #652]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d014      	beq.n	8001046 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fba4 	bl	8000768 <HAL_GetTick>
 8001020:	0003      	movs	r3, r0
 8001022:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001024:	e009      	b.n	800103a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001026:	f7ff fb9f 	bl	8000768 <HAL_GetTick>
 800102a:	0002      	movs	r2, r0
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4a9b      	ldr	r2, [pc, #620]	; (80012a0 <HAL_RCC_OscConfig+0x624>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e12b      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103a:	4b98      	ldr	r3, [pc, #608]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2202      	movs	r2, #2
 8001040:	4013      	ands	r3, r2
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x3aa>
 8001044:	e013      	b.n	800106e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fb8f 	bl	8000768 <HAL_GetTick>
 800104a:	0003      	movs	r3, r0
 800104c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800104e:	e009      	b.n	8001064 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001050:	f7ff fb8a 	bl	8000768 <HAL_GetTick>
 8001054:	0002      	movs	r2, r0
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	4a91      	ldr	r2, [pc, #580]	; (80012a0 <HAL_RCC_OscConfig+0x624>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e116      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001064:	4b8d      	ldr	r3, [pc, #564]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800106e:	231f      	movs	r3, #31
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001078:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	4b87      	ldr	r3, [pc, #540]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800107e:	4989      	ldr	r1, [pc, #548]	; (80012a4 <HAL_RCC_OscConfig+0x628>)
 8001080:	400a      	ands	r2, r1
 8001082:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2210      	movs	r2, #16
 800108a:	4013      	ands	r3, r2
 800108c:	d063      	beq.n	8001156 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d12a      	bne.n	80010ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001096:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109a:	4b80      	ldr	r3, [pc, #512]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800109c:	2104      	movs	r1, #4
 800109e:	430a      	orrs	r2, r1
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010a2:	4b7e      	ldr	r3, [pc, #504]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a6:	4b7d      	ldr	r3, [pc, #500]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	430a      	orrs	r2, r1
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fb5b 	bl	8000768 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010b8:	f7ff fb56 	bl	8000768 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e0e3      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ca:	4b74      	ldr	r3, [pc, #464]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f1      	beq.n	80010b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010d4:	4b71      	ldr	r3, [pc, #452]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d8:	22f8      	movs	r2, #248	; 0xf8
 80010da:	4393      	bics	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	00da      	lsls	r2, r3, #3
 80010e4:	4b6d      	ldr	r3, [pc, #436]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
 80010ea:	e034      	b.n	8001156 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	3305      	adds	r3, #5
 80010f2:	d111      	bne.n	8001118 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010f4:	4b69      	ldr	r3, [pc, #420]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f8:	4b68      	ldr	r3, [pc, #416]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80010fa:	2104      	movs	r1, #4
 80010fc:	438a      	bics	r2, r1
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001100:	4b66      	ldr	r3, [pc, #408]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001104:	22f8      	movs	r2, #248	; 0xf8
 8001106:	4393      	bics	r3, r2
 8001108:	0019      	movs	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	00da      	lsls	r2, r3, #3
 8001110:	4b62      	ldr	r3, [pc, #392]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001112:	430a      	orrs	r2, r1
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
 8001116:	e01e      	b.n	8001156 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001118:	4b60      	ldr	r3, [pc, #384]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800111a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800111c:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800111e:	2104      	movs	r1, #4
 8001120:	430a      	orrs	r2, r1
 8001122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001124:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001128:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800112a:	2101      	movs	r1, #1
 800112c:	438a      	bics	r2, r1
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001130:	f7ff fb1a 	bl	8000768 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800113a:	f7ff fb15 	bl	8000768 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0a2      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d1f1      	bne.n	800113a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <HAL_RCC_OscConfig+0x4e4>
 800115e:	e097      	b.n	8001290 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001160:	4b4e      	ldr	r3, [pc, #312]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	220c      	movs	r2, #12
 8001166:	4013      	ands	r3, r2
 8001168:	2b08      	cmp	r3, #8
 800116a:	d100      	bne.n	800116e <HAL_RCC_OscConfig+0x4f2>
 800116c:	e06b      	b.n	8001246 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d14c      	bne.n	8001210 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001176:	4b49      	ldr	r3, [pc, #292]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800117c:	494a      	ldr	r1, [pc, #296]	; (80012a8 <HAL_RCC_OscConfig+0x62c>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001182:	f7ff faf1 	bl	8000768 <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff faec 	bl	8000768 <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e079      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119e:	4b3f      	ldr	r3, [pc, #252]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	049b      	lsls	r3, r3, #18
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ae:	220f      	movs	r2, #15
 80011b0:	4393      	bics	r3, r2
 80011b2:	0019      	movs	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_RCC_OscConfig+0x630>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	431a      	orrs	r2, r3
 80011d2:	4b32      	ldr	r3, [pc, #200]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011d4:	430a      	orrs	r2, r1
 80011d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d8:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <HAL_RCC_OscConfig+0x620>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	0449      	lsls	r1, r1, #17
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fabf 	bl	8000768 <HAL_GetTick>
 80011ea:	0003      	movs	r3, r0
 80011ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff faba 	bl	8000768 <HAL_GetTick>
 80011f4:	0002      	movs	r2, r0
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e047      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	049b      	lsls	r3, r3, #18
 800120a:	4013      	ands	r3, r2
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x574>
 800120e:	e03f      	b.n	8001290 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001216:	4924      	ldr	r1, [pc, #144]	; (80012a8 <HAL_RCC_OscConfig+0x62c>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff faa4 	bl	8000768 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff fa9f 	bl	8000768 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e02c      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	049b      	lsls	r3, r3, #18
 8001240:	4013      	ands	r3, r2
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x5aa>
 8001244:	e024      	b.n	8001290 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e01f      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_OscConfig+0x620>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_RCC_OscConfig+0x620>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	401a      	ands	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	429a      	cmp	r2, r3
 800126c:	d10e      	bne.n	800128c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	220f      	movs	r2, #15
 8001272:	401a      	ands	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001278:	429a      	cmp	r2, r3
 800127a:	d107      	bne.n	800128c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	23f0      	movs	r3, #240	; 0xf0
 8001280:	039b      	lsls	r3, r3, #14
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b008      	add	sp, #32
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40021000 	.word	0x40021000
 80012a0:	00001388 	.word	0x00001388
 80012a4:	efffffff 	.word	0xefffffff
 80012a8:	feffffff 	.word	0xfeffffff
 80012ac:	ffc2ffff 	.word	0xffc2ffff

080012b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0b3      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012c4:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d911      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2201      	movs	r2, #1
 80012d8:	4393      	bics	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4013      	ands	r3, r2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e09a      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	d015      	beq.n	800132c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2204      	movs	r2, #4
 8001306:	4013      	ands	r3, r2
 8001308:	d006      	beq.n	8001318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001310:	21e0      	movs	r1, #224	; 0xe0
 8001312:	00c9      	lsls	r1, r1, #3
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	22f0      	movs	r2, #240	; 0xf0
 800131e:	4393      	bics	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001328:	430a      	orrs	r2, r1
 800132a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	029b      	lsls	r3, r3, #10
 8001346:	4013      	ands	r3, r2
 8001348:	d114      	bne.n	8001374 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e06e      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	049b      	lsls	r3, r3, #18
 800135e:	4013      	ands	r3, r2
 8001360:	d108      	bne.n	8001374 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e062      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e05b      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4393      	bics	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001384:	430a      	orrs	r2, r1
 8001386:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff f9ee 	bl	8000768 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001390:	e009      	b.n	80013a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001392:	f7ff f9e9 	bl	8000768 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <HAL_RCC_ClockConfig+0x18c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e042      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	220c      	movs	r2, #12
 80013ac:	401a      	ands	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1ec      	bne.n	8001392 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d211      	bcs.n	80013ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2201      	movs	r2, #1
 80013cc:	4393      	bics	r3, r2
 80013ce:	0019      	movs	r1, r3
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_RCC_ClockConfig+0x184>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2201      	movs	r2, #1
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e020      	b.n	800142c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2204      	movs	r2, #4
 80013f0:	4013      	ands	r3, r2
 80013f2:	d009      	beq.n	8001408 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_RCC_ClockConfig+0x190>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001408:	f000 f820 	bl	800144c <HAL_RCC_GetSysClockFreq>
 800140c:	0001      	movs	r1, r0
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_RCC_ClockConfig+0x188>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	220f      	movs	r2, #15
 8001416:	4013      	ands	r3, r2
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_RCC_ClockConfig+0x194>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	000a      	movs	r2, r1
 800141e:	40da      	lsrs	r2, r3
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x198>)
 8001422:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff f959 	bl	80006dc <HAL_InitTick>
  
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b004      	add	sp, #16
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40022000 	.word	0x40022000
 8001438:	40021000 	.word	0x40021000
 800143c:	00001388 	.word	0x00001388
 8001440:	fffff8ff 	.word	0xfffff8ff
 8001444:	08001a20 	.word	0x08001a20
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08f      	sub	sp, #60	; 0x3c
 8001450:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001452:	2314      	movs	r3, #20
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001458:	ca13      	ldmia	r2!, {r0, r1, r4}
 800145a:	c313      	stmia	r3!, {r0, r1, r4}
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4a29      	ldr	r2, [pc, #164]	; (8001508 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001464:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001466:	c313      	stmia	r3!, {r0, r1, r4}
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
 8001474:	2300      	movs	r3, #0
 8001476:	637b      	str	r3, [r7, #52]	; 0x34
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	220c      	movs	r2, #12
 800148a:	4013      	ands	r3, r2
 800148c:	2b04      	cmp	r3, #4
 800148e:	d002      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x4a>
 8001490:	2b08      	cmp	r3, #8
 8001492:	d003      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x50>
 8001494:	e02d      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800149a:	e02d      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	220f      	movs	r2, #15
 80014a2:	4013      	ands	r3, r2
 80014a4:	2214      	movs	r2, #20
 80014a6:	18ba      	adds	r2, r7, r2
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_RCC_GetSysClockFreq+0xc0>)
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	220f      	movs	r2, #15
 80014b2:	4013      	ands	r3, r2
 80014b4:	1d3a      	adds	r2, r7, #4
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	025b      	lsls	r3, r3, #9
 80014c0:	4013      	ands	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014c8:	f7fe fe1e 	bl	8000108 <__udivsi3>
 80014cc:	0003      	movs	r3, r0
 80014ce:	001a      	movs	r2, r3
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	4353      	muls	r3, r2
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
 80014d6:	e009      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80014d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014da:	000a      	movs	r2, r1
 80014dc:	0152      	lsls	r2, r2, #5
 80014de:	1a52      	subs	r2, r2, r1
 80014e0:	0193      	lsls	r3, r2, #6
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	185b      	adds	r3, r3, r1
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80014ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f0:	e002      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014fa:	0018      	movs	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b00f      	add	sp, #60	; 0x3c
 8001500:	bd90      	pop	{r4, r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	08001a00 	.word	0x08001a00
 8001508:	08001a10 	.word	0x08001a10
 800150c:	40021000 	.word	0x40021000
 8001510:	007a1200 	.word	0x007a1200

08001514 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e090      	b.n	800164a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	223d      	movs	r2, #61	; 0x3d
 800152c:	5c9b      	ldrb	r3, [r3, r2]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	223c      	movs	r2, #60	; 0x3c
 8001538:	2100      	movs	r1, #0
 800153a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff f81c 	bl	800057c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	223d      	movs	r2, #61	; 0x3d
 8001548:	2102      	movs	r1, #2
 800154a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	493f      	ldr	r1, [pc, #252]	; (8001654 <HAL_TIM_Encoder_Init+0x140>)
 8001558:	400a      	ands	r2, r1
 800155a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3304      	adds	r3, #4
 8001564:	0019      	movs	r1, r3
 8001566:	0010      	movs	r0, r2
 8001568:	f000 f920 	bl	80017ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4313      	orrs	r3, r2
 800158c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4a31      	ldr	r2, [pc, #196]	; (8001658 <HAL_TIM_Encoder_Init+0x144>)
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4313      	orrs	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_TIM_Encoder_Init+0x148>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4a2b      	ldr	r2, [pc, #172]	; (8001660 <HAL_TIM_Encoder_Init+0x14c>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	4313      	orrs	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	011a      	lsls	r2, r3, #4
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	031b      	lsls	r3, r3, #12
 80015d6:	4313      	orrs	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2222      	movs	r2, #34	; 0x22
 80015e2:	4393      	bics	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2288      	movs	r2, #136	; 0x88
 80015ea:	4393      	bics	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	4313      	orrs	r3, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2246      	movs	r2, #70	; 0x46
 800161c:	2101      	movs	r1, #1
 800161e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	223e      	movs	r2, #62	; 0x3e
 8001624:	2101      	movs	r1, #1
 8001626:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	223f      	movs	r2, #63	; 0x3f
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2242      	movs	r2, #66	; 0x42
 8001634:	2101      	movs	r1, #1
 8001636:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2243      	movs	r2, #67	; 0x43
 800163c:	2101      	movs	r1, #1
 800163e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	223d      	movs	r2, #61	; 0x3d
 8001644:	2101      	movs	r1, #1
 8001646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b006      	add	sp, #24
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	ffffbff8 	.word	0xffffbff8
 8001658:	fffffcfc 	.word	0xfffffcfc
 800165c:	fffff3f3 	.word	0xfffff3f3
 8001660:	ffff0f0f 	.word	0xffff0f0f

08001664 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800166e:	200f      	movs	r0, #15
 8001670:	183b      	adds	r3, r7, r0
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	213e      	movs	r1, #62	; 0x3e
 8001676:	5c52      	ldrb	r2, [r2, r1]
 8001678:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800167a:	230e      	movs	r3, #14
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	213f      	movs	r1, #63	; 0x3f
 8001682:	5c52      	ldrb	r2, [r2, r1]
 8001684:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001686:	240d      	movs	r4, #13
 8001688:	193b      	adds	r3, r7, r4
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	2142      	movs	r1, #66	; 0x42
 800168e:	5c52      	ldrb	r2, [r2, r1]
 8001690:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001692:	230c      	movs	r3, #12
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	2143      	movs	r1, #67	; 0x43
 800169a:	5c52      	ldrb	r2, [r2, r1]
 800169c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d103      	bne.n	80016b4 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d001      	beq.n	80016b8 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e075      	b.n	80017a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	223e      	movs	r2, #62	; 0x3e
 80016bc:	2102      	movs	r1, #2
 80016be:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2242      	movs	r2, #66	; 0x42
 80016c4:	2102      	movs	r1, #2
 80016c6:	5499      	strb	r1, [r3, r2]
 80016c8:	e03d      	b.n	8001746 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d114      	bne.n	80016fa <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80016d0:	230e      	movs	r3, #14
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d104      	bne.n	80016e4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80016da:	230c      	movs	r3, #12
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d001      	beq.n	80016e8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e05d      	b.n	80017a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	223f      	movs	r2, #63	; 0x3f
 80016ec:	2102      	movs	r1, #2
 80016ee:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2243      	movs	r2, #67	; 0x43
 80016f4:	2102      	movs	r1, #2
 80016f6:	5499      	strb	r1, [r3, r2]
 80016f8:	e025      	b.n	8001746 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016fa:	230f      	movs	r3, #15
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10e      	bne.n	8001722 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001704:	230e      	movs	r3, #14
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d109      	bne.n	8001722 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800170e:	230d      	movs	r3, #13
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d104      	bne.n	8001722 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001718:	230c      	movs	r3, #12
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e03e      	b.n	80017a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	223e      	movs	r2, #62	; 0x3e
 800172a:	2102      	movs	r1, #2
 800172c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	223f      	movs	r2, #63	; 0x3f
 8001732:	2102      	movs	r1, #2
 8001734:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2242      	movs	r2, #66	; 0x42
 800173a:	2102      	movs	r1, #2
 800173c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2243      	movs	r2, #67	; 0x43
 8001742:	2102      	movs	r1, #2
 8001744:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_TIM_Encoder_Start+0xf0>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b04      	cmp	r3, #4
 8001750:	d008      	beq.n	8001764 <HAL_TIM_Encoder_Start+0x100>
 8001752:	e00f      	b.n	8001774 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	2100      	movs	r1, #0
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f89b 	bl	8001898 <TIM_CCxChannelCmd>
      break;
 8001762:	e016      	b.n	8001792 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	2104      	movs	r1, #4
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f893 	bl	8001898 <TIM_CCxChannelCmd>
      break;
 8001772:	e00e      	b.n	8001792 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2201      	movs	r2, #1
 800177a:	2100      	movs	r1, #0
 800177c:	0018      	movs	r0, r3
 800177e:	f000 f88b 	bl	8001898 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	2104      	movs	r1, #4
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f884 	bl	8001898 <TIM_CCxChannelCmd>
      break;
 8001790:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	0018      	movs	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b005      	add	sp, #20
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <TIM_Base_SetConfig+0xd4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d008      	beq.n	80017d6 <TIM_Base_SetConfig+0x2a>
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d003      	beq.n	80017d6 <TIM_Base_SetConfig+0x2a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <TIM_Base_SetConfig+0xd8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2270      	movs	r2, #112	; 0x70
 80017da:	4393      	bics	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a25      	ldr	r2, [pc, #148]	; (8001880 <TIM_Base_SetConfig+0xd4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d014      	beq.n	800181a <TIM_Base_SetConfig+0x6e>
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	05db      	lsls	r3, r3, #23
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d00f      	beq.n	800181a <TIM_Base_SetConfig+0x6e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <TIM_Base_SetConfig+0xd8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00b      	beq.n	800181a <TIM_Base_SetConfig+0x6e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a20      	ldr	r2, [pc, #128]	; (8001888 <TIM_Base_SetConfig+0xdc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <TIM_Base_SetConfig+0x6e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1f      	ldr	r2, [pc, #124]	; (800188c <TIM_Base_SetConfig+0xe0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d003      	beq.n	800181a <TIM_Base_SetConfig+0x6e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1e      	ldr	r2, [pc, #120]	; (8001890 <TIM_Base_SetConfig+0xe4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d108      	bne.n	800182c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <TIM_Base_SetConfig+0xe8>)
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	4393      	bics	r3, r2
 8001832:	001a      	movs	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <TIM_Base_SetConfig+0xd4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <TIM_Base_SetConfig+0xbe>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <TIM_Base_SetConfig+0xe0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d003      	beq.n	800186a <TIM_Base_SetConfig+0xbe>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <TIM_Base_SetConfig+0xe4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d103      	bne.n	8001872 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	615a      	str	r2, [r3, #20]
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b004      	add	sp, #16
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40012c00 	.word	0x40012c00
 8001884:	40000400 	.word	0x40000400
 8001888:	40002000 	.word	0x40002000
 800188c:	40014400 	.word	0x40014400
 8001890:	40014800 	.word	0x40014800
 8001894:	fffffcff 	.word	0xfffffcff

08001898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	221f      	movs	r2, #31
 80018a8:	4013      	ands	r3, r2
 80018aa:	2201      	movs	r2, #1
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	401a      	ands	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a1a      	ldr	r2, [r3, #32]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	211f      	movs	r1, #31
 80018c8:	400b      	ands	r3, r1
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4099      	lsls	r1, r3
 80018ce:	000b      	movs	r3, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	621a      	str	r2, [r3, #32]
}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b006      	add	sp, #24
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	223c      	movs	r2, #60	; 0x3c
 80018ee:	5c9b      	ldrb	r3, [r3, r2]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e042      	b.n	800197e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	223c      	movs	r2, #60	; 0x3c
 80018fc:	2101      	movs	r1, #1
 80018fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	223d      	movs	r2, #61	; 0x3d
 8001904:	2102      	movs	r1, #2
 8001906:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2270      	movs	r2, #112	; 0x70
 800191c:	4393      	bics	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00a      	beq.n	8001952 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	05db      	lsls	r3, r3, #23
 8001944:	429a      	cmp	r2, r3
 8001946:	d004      	beq.n	8001952 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10c      	bne.n	800196c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	4393      	bics	r3, r2
 8001958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	4313      	orrs	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	223d      	movs	r2, #61	; 0x3d
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	223c      	movs	r2, #60	; 0x3c
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40000400 	.word	0x40000400

08001990 <__libc_init_array>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	2600      	movs	r6, #0
 8001994:	4d0c      	ldr	r5, [pc, #48]	; (80019c8 <__libc_init_array+0x38>)
 8001996:	4c0d      	ldr	r4, [pc, #52]	; (80019cc <__libc_init_array+0x3c>)
 8001998:	1b64      	subs	r4, r4, r5
 800199a:	10a4      	asrs	r4, r4, #2
 800199c:	42a6      	cmp	r6, r4
 800199e:	d109      	bne.n	80019b4 <__libc_init_array+0x24>
 80019a0:	2600      	movs	r6, #0
 80019a2:	f000 f821 	bl	80019e8 <_init>
 80019a6:	4d0a      	ldr	r5, [pc, #40]	; (80019d0 <__libc_init_array+0x40>)
 80019a8:	4c0a      	ldr	r4, [pc, #40]	; (80019d4 <__libc_init_array+0x44>)
 80019aa:	1b64      	subs	r4, r4, r5
 80019ac:	10a4      	asrs	r4, r4, #2
 80019ae:	42a6      	cmp	r6, r4
 80019b0:	d105      	bne.n	80019be <__libc_init_array+0x2e>
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
 80019b4:	00b3      	lsls	r3, r6, #2
 80019b6:	58eb      	ldr	r3, [r5, r3]
 80019b8:	4798      	blx	r3
 80019ba:	3601      	adds	r6, #1
 80019bc:	e7ee      	b.n	800199c <__libc_init_array+0xc>
 80019be:	00b3      	lsls	r3, r6, #2
 80019c0:	58eb      	ldr	r3, [r5, r3]
 80019c2:	4798      	blx	r3
 80019c4:	3601      	adds	r6, #1
 80019c6:	e7f2      	b.n	80019ae <__libc_init_array+0x1e>
 80019c8:	08001a30 	.word	0x08001a30
 80019cc:	08001a30 	.word	0x08001a30
 80019d0:	08001a30 	.word	0x08001a30
 80019d4:	08001a34 	.word	0x08001a34

080019d8 <memset>:
 80019d8:	0003      	movs	r3, r0
 80019da:	1882      	adds	r2, r0, r2
 80019dc:	4293      	cmp	r3, r2
 80019de:	d100      	bne.n	80019e2 <memset+0xa>
 80019e0:	4770      	bx	lr
 80019e2:	7019      	strb	r1, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e7f9      	b.n	80019dc <memset+0x4>

080019e8 <_init>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ee:	bc08      	pop	{r3}
 80019f0:	469e      	mov	lr, r3
 80019f2:	4770      	bx	lr

080019f4 <_fini>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr
