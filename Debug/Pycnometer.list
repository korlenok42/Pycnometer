
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001b00  08001b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b30  08001b30  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001b30  08001b30  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b30  08001b30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b30  08001b30  00011b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b34  08001b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000010  08001b48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001b48  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed9  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001579  00000000  00000000  00027f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00029490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  00029d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f612  00000000  00000000  0002a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f37  00000000  00000000  00039b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005eb03  00000000  00000000  00043ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a25c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f24  00000000  00000000  000a2618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ae8 	.word	0x08001ae8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001ae8 	.word	0x08001ae8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ReadADCvalue;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d103      	bne.n	800023c <HAL_GPIO_EXTI_Callback+0x1c>
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000236:	2201      	movs	r2, #1
 8000238:	601a      	str	r2, [r3, #0]

    __NOP();

  }

}
 800023a:	e013      	b.n	8000264 <HAL_GPIO_EXTI_Callback+0x44>
  else if(GPIO_Pin == Stop_Pin) {
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10e      	bne.n	8000262 <HAL_GPIO_EXTI_Callback+0x42>
	  TimerFlag = 0;
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
	  TimerCounter = TimStart;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_GPIO_EXTI_Callback+0x50>)
 800024c:	220f      	movs	r2, #15
 800024e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	00d9      	lsls	r1, r3, #3
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2200      	movs	r2, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fd54 	bl	8000d08 <HAL_GPIO_WritePin>
}
 8000260:	e000      	b.n	8000264 <HAL_GPIO_EXTI_Callback+0x44>
    __NOP();
 8000262:	46c0      	nop			; (mov r8, r8)
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000030 	.word	0x20000030
 8000270:	20000000 	.word	0x20000000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fa78 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f82c 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f8cc 	bl	800041c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000284:	f000 f868 	bl	8000358 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0x54>)
 800028a:	213c      	movs	r1, #60	; 0x3c
 800028c:	0018      	movs	r0, r3
 800028e:	f001 fa69 	bl	8001764 <HAL_TIM_Encoder_Start>


  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <main+0x58>)
 8000294:	2201      	movs	r2, #1
 8000296:	2101      	movs	r1, #1
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fd35 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x58>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	2102      	movs	r1, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fd2f 	bl	8000d08 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Enc_Counter = TIM3->CNT;
 80002aa:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <main+0x5c>)
 80002ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <main+0x60>)
 80002b2:	701a      	strb	r2, [r3, #0]
	  HC595SendData(0xFF);
 80002b4:	20ff      	movs	r0, #255	; 0xff
 80002b6:	f000 f944 	bl	8000542 <HC595SendData>
	  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, RESET);
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <main+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	2102      	movs	r1, #2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fd21 	bl	8000d08 <HAL_GPIO_WritePin>
	  Enc_Counter = TIM3->CNT;
 80002c6:	e7f0      	b.n	80002aa <main+0x36>
 80002c8:	20000034 	.word	0x20000034
 80002cc:	48001400 	.word	0x48001400
 80002d0:	40000400 	.word	0x40000400
 80002d4:	2000002c 	.word	0x2000002c

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b091      	sub	sp, #68	; 0x44
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2410      	movs	r4, #16
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2330      	movs	r3, #48	; 0x30
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f001 fbf5 	bl	8001ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	2310      	movs	r3, #16
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f001 fbee 	bl	8001ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	0021      	movs	r1, r4
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2202      	movs	r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2201      	movs	r2, #1
 8000308:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2210      	movs	r2, #16
 800030e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	187b      	adds	r3, r7, r1
 8000318:	0018      	movs	r0, r3
 800031a:	f000 fd2f 	bl	8000d7c <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000322:	f000 f909 	bl	8000538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	003b      	movs	r3, r7
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032c:	003b      	movs	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	003b      	movs	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	003b      	movs	r3, r7
 8000340:	2100      	movs	r1, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 f834 	bl	80013b0 <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800034c:	f000 f8f4 	bl	8000538 <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b011      	add	sp, #68	; 0x44
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b08d      	sub	sp, #52	; 0x34
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800035e:	240c      	movs	r4, #12
 8000360:	193b      	adds	r3, r7, r4
 8000362:	0018      	movs	r0, r3
 8000364:	2324      	movs	r3, #36	; 0x24
 8000366:	001a      	movs	r2, r3
 8000368:	2100      	movs	r1, #0
 800036a:	f001 fbb5 	bl	8001ad8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	0018      	movs	r0, r3
 8000372:	2308      	movs	r3, #8
 8000374:	001a      	movs	r2, r3
 8000376:	2100      	movs	r1, #0
 8000378:	f001 fbae 	bl	8001ad8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_TIM3_Init+0xbc>)
 800037e:	4a26      	ldr	r2, [pc, #152]	; (8000418 <MX_TIM3_Init+0xc0>)
 8000380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000382:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_TIM3_Init+0xbc>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_TIM3_Init+0xbc>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800038e:	4b21      	ldr	r3, [pc, #132]	; (8000414 <MX_TIM3_Init+0xbc>)
 8000390:	2263      	movs	r2, #99	; 0x63
 8000392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_TIM3_Init+0xbc>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <MX_TIM3_Init+0xbc>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003a0:	0021      	movs	r1, r4
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2201      	movs	r2, #1
 80003b2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2201      	movs	r2, #1
 80003ca:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80003d8:	187a      	adds	r2, r7, r1
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <MX_TIM3_Init+0xbc>)
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 f918 	bl	8001614 <HAL_TIM_Encoder_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80003e8:	f000 f8a6 	bl	8000538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003f8:	1d3a      	adds	r2, r7, #4
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_TIM3_Init+0xbc>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 faee 	bl	80019e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000408:	f000 f896 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b00d      	add	sp, #52	; 0x34
 8000412:	bd90      	pop	{r4, r7, pc}
 8000414:	20000034 	.word	0x20000034
 8000418:	40000400 	.word	0x40000400

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	240c      	movs	r4, #12
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2314      	movs	r3, #20
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f001 fb53 	bl	8001ad8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <MX_GPIO_Init+0x114>)
 8000434:	695a      	ldr	r2, [r3, #20]
 8000436:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <MX_GPIO_Init+0x114>)
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	03c9      	lsls	r1, r1, #15
 800043c:	430a      	orrs	r2, r1
 800043e:	615a      	str	r2, [r3, #20]
 8000440:	4b3b      	ldr	r3, [pc, #236]	; (8000530 <MX_GPIO_Init+0x114>)
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	03db      	lsls	r3, r3, #15
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b38      	ldr	r3, [pc, #224]	; (8000530 <MX_GPIO_Init+0x114>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b37      	ldr	r3, [pc, #220]	; (8000530 <MX_GPIO_Init+0x114>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0289      	lsls	r1, r1, #10
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <MX_GPIO_Init+0x114>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800046a:	4b32      	ldr	r3, [pc, #200]	; (8000534 <MX_GPIO_Init+0x118>)
 800046c:	2200      	movs	r2, #0
 800046e:	2103      	movs	r1, #3
 8000470:	0018      	movs	r0, r3
 8000472:	f000 fc49 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin, GPIO_PIN_RESET);
 8000476:	2387      	movs	r3, #135	; 0x87
 8000478:	00d9      	lsls	r1, r3, #3
 800047a:	2390      	movs	r3, #144	; 0x90
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2200      	movs	r2, #0
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fc41 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2203      	movs	r2, #3
 800048a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2201      	movs	r2, #1
 8000490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <MX_GPIO_Init+0x118>)
 80004a2:	0019      	movs	r1, r3
 80004a4:	0010      	movs	r0, r2
 80004a6:	f000 fac7 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2201      	movs	r2, #1
 80004ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2284      	movs	r2, #132	; 0x84
 80004b4:	0392      	lsls	r2, r2, #14
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2202      	movs	r2, #2
 80004bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80004be:	193a      	adds	r2, r7, r4
 80004c0:	2390      	movs	r3, #144	; 0x90
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fab6 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Pin */
  GPIO_InitStruct.Pin = Start_Pin;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2202      	movs	r2, #2
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2288      	movs	r2, #136	; 0x88
 80004d6:	0352      	lsls	r2, r2, #13
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2202      	movs	r2, #2
 80004de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Start_GPIO_Port, &GPIO_InitStruct);
 80004e0:	193a      	adds	r2, r7, r4
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 faa5 	bl	8000a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DS_Pin Latch_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2287      	movs	r2, #135	; 0x87
 80004f4:	00d2      	lsls	r2, r2, #3
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2201      	movs	r2, #1
 80004fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	187a      	adds	r2, r7, r1
 800050c:	2390      	movs	r3, #144	; 0x90
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fa90 	bl	8000a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2005      	movs	r0, #5
 800051e:	f000 fa59 	bl	80009d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000522:	2005      	movs	r0, #5
 8000524:	f000 fa6b 	bl	80009fe <HAL_NVIC_EnableIRQ>

}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b009      	add	sp, #36	; 0x24
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	48001400 	.word	0x48001400

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	e7fe      	b.n	8000540 <Error_Handler+0x8>

08000542 <HC595SendData>:
};

/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void HC595SendData(uint8_t SendVal)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b084      	sub	sp, #16
 8000546:	af00      	add	r7, sp, #0
 8000548:	0002      	movs	r2, r0
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 8; i++)
 800054e:	230f      	movs	r3, #15
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e02f      	b.n	80005b8 <HC595SendData+0x76>
  {
    /* - STEP1, serial input pin*/
    if ((SendVal & (1 << i)) != 0 )
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781a      	ldrb	r2, [r3, #0]
 800055c:	230f      	movs	r3, #15
 800055e:	18fb      	adds	r3, r7, r3
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	411a      	asrs	r2, r3
 8000564:	0013      	movs	r3, r2
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	d007      	beq.n	800057c <HC595SendData+0x3a>
      HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fbc7 	bl	8000d08 <HAL_GPIO_WritePin>
 800057a:	e006      	b.n	800058a <HC595SendData+0x48>
    else
      HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fbbf 	bl	8000d08 <HAL_GPIO_WritePin>

    /* - STEP2, SHCP occurs once, 74HC595 will get current data from the DS pin */
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 800058a:	2390      	movs	r3, #144	; 0x90
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fbb8 	bl	8000d08 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000598:	2064      	movs	r0, #100	; 0x64
 800059a:	f000 f94b 	bl	8000834 <HAL_Delay>
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2201      	movs	r2, #1
 80005a4:	2108      	movs	r1, #8
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fbae 	bl	8000d08 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 8; i++)
 80005ac:	210f      	movs	r1, #15
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	3201      	adds	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	230f      	movs	r3, #15
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b07      	cmp	r3, #7
 80005c0:	d9ca      	bls.n	8000558 <HC595SendData+0x16>
  }

  /* - STEP3, after all the 8-bit data of the shift register is over, the rising edge of the latch clock pin (first pull low level is high) */
  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2200      	movs	r2, #0
 80005c8:	2120      	movs	r1, #32
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 fb9c 	bl	8000d08 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 f92f 	bl	8000834 <HAL_Delay>
  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2201      	movs	r2, #1
 80005dc:	2120      	movs	r1, #32
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fb92 	bl	8000d08 <HAL_GPIO_WritePin>
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bd80      	pop	{r7, pc}

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_MspInit+0x44>)
 80005f4:	699a      	ldr	r2, [r3, #24]
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_MspInit+0x44>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	619a      	str	r2, [r3, #24]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <HAL_MspInit+0x44>)
 800060c:	69da      	ldr	r2, [r3, #28]
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_MspInit+0x44>)
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	0549      	lsls	r1, r1, #21
 8000614:	430a      	orrs	r2, r1
 8000616:	61da      	str	r2, [r3, #28]
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_MspInit+0x44>)
 800061a:	69da      	ldr	r2, [r3, #28]
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	055b      	lsls	r3, r3, #21
 8000620:	4013      	ands	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b002      	add	sp, #8
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08b      	sub	sp, #44	; 0x2c
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	2414      	movs	r4, #20
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	2314      	movs	r3, #20
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f001 fa46 	bl	8001ad8 <memset>
  if(htim_encoder->Instance==TIM3)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d130      	bne.n	80006b8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800065c:	2102      	movs	r1, #2
 800065e:	430a      	orrs	r2, r1
 8000660:	61da      	str	r2, [r3, #28]
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	2202      	movs	r2, #2
 8000668:	4013      	ands	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000670:	695a      	ldr	r2, [r3, #20]
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0289      	lsls	r1, r1, #10
 8000678:	430a      	orrs	r2, r1
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <HAL_TIM_Encoder_MspInit+0x90>)
 800067e:	695a      	ldr	r2, [r3, #20]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	029b      	lsls	r3, r3, #10
 8000684:	4013      	ands	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	22c0      	movs	r2, #192	; 0xc0
 8000690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f9c0 	bl	8000a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b00b      	add	sp, #44	; 0x2c
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40000400 	.word	0x40000400
 80006c4:	40021000 	.word	0x40021000

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f000 f886 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fb22 	bl	8000d44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fb1f 	bl	8000d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490e      	ldr	r1, [pc, #56]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0b      	ldr	r4, [pc, #44]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000742:	f7ff ffe3 	bl	800070c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000746:	f001 f9a3 	bl	8001a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fd93 	bl	8000274 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800075c:	08001b38 	.word	0x08001b38
  ldr r2, =_sbss
 8000760:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000764:	20000084 	.word	0x20000084

08000768 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_Init+0x24>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_Init+0x24>)
 8000776:	2110      	movs	r1, #16
 8000778:	430a      	orrs	r2, r1
 800077a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f809 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000782:	f7ff ff33 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_InitTick+0x5c>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <HAL_InitTick+0x60>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	0019      	movs	r1, r3
 80007a6:	23fa      	movs	r3, #250	; 0xfa
 80007a8:	0098      	lsls	r0, r3, #2
 80007aa:	f7ff fcad 	bl	8000108 <__udivsi3>
 80007ae:	0003      	movs	r3, r0
 80007b0:	0019      	movs	r1, r3
 80007b2:	0020      	movs	r0, r4
 80007b4:	f7ff fca8 	bl	8000108 <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f92f 	bl	8000a1e <HAL_SYSTICK_Config>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e00f      	b.n	80007e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d80b      	bhi.n	80007e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f8fc 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_InitTick+0x64>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b003      	add	sp, #12
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20000004 	.word	0x20000004
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	001a      	movs	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	18d2      	adds	r2, r2, r3
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	2000000c 	.word	0x2000000c
 800081c:	20000080 	.word	0x20000080

08000820 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000080 	.word	0x20000080

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff fff0 	bl	8000820 <HAL_GetTick>
 8000840:	0003      	movs	r3, r0
 8000842:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Delay+0x44>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	001a      	movs	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	189b      	adds	r3, r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	f7ff ffe0 	bl	8000820 <HAL_GetTick>
 8000860:	0002      	movs	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	2000000c 	.word	0x2000000c

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b7f      	cmp	r3, #127	; 0x7f
 800088e:	d809      	bhi.n	80008a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	231f      	movs	r3, #31
 8000898:	401a      	ands	r2, r3
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <__NVIC_EnableIRQ+0x30>)
 800089c:	2101      	movs	r1, #1
 800089e:	4091      	lsls	r1, r2
 80008a0:	000a      	movs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
  }
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b002      	add	sp, #8
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b7f      	cmp	r3, #127	; 0x7f
 80008c4:	d828      	bhi.n	8000918 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <__NVIC_SetPriority+0xd4>)
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	33c0      	adds	r3, #192	; 0xc0
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	589b      	ldr	r3, [r3, r2]
 80008d6:	1dfa      	adds	r2, r7, #7
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	0011      	movs	r1, r2
 80008dc:	2203      	movs	r2, #3
 80008de:	400a      	ands	r2, r1
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	21ff      	movs	r1, #255	; 0xff
 80008e4:	4091      	lsls	r1, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	401a      	ands	r2, r3
 80008ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	401a      	ands	r2, r3
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0018      	movs	r0, r3
 80008fc:	2303      	movs	r3, #3
 80008fe:	4003      	ands	r3, r0
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	481f      	ldr	r0, [pc, #124]	; (8000984 <__NVIC_SetPriority+0xd4>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	b25b      	sxtb	r3, r3
 800090c:	089b      	lsrs	r3, r3, #2
 800090e:	430a      	orrs	r2, r1
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000916:	e031      	b.n	800097c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <__NVIC_SetPriority+0xd8>)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0019      	movs	r1, r3
 8000920:	230f      	movs	r3, #15
 8000922:	400b      	ands	r3, r1
 8000924:	3b08      	subs	r3, #8
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	3306      	adds	r3, #6
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	18d3      	adds	r3, r2, r3
 800092e:	3304      	adds	r3, #4
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1dfa      	adds	r2, r7, #7
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	0011      	movs	r1, r2
 8000938:	2203      	movs	r2, #3
 800093a:	400a      	ands	r2, r1
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	43d2      	mvns	r2, r2
 8000946:	401a      	ands	r2, r3
 8000948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	401a      	ands	r2, r3
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	2303      	movs	r3, #3
 800095a:	4003      	ands	r3, r0
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <__NVIC_SetPriority+0xd8>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	001c      	movs	r4, r3
 8000968:	230f      	movs	r3, #15
 800096a:	4023      	ands	r3, r4
 800096c:	3b08      	subs	r3, #8
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	430a      	orrs	r2, r1
 8000972:	3306      	adds	r3, #6
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	18c3      	adds	r3, r0, r3
 8000978:	3304      	adds	r3, #4
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b003      	add	sp, #12
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	045b      	lsls	r3, r3, #17
 800099c:	429a      	cmp	r2, r3
 800099e:	d301      	bcc.n	80009a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a0:	2301      	movs	r3, #1
 80009a2:	e010      	b.n	80009c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <SysTick_Config+0x44>)
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	3a01      	subs	r2, #1
 80009aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ac:	2301      	movs	r3, #1
 80009ae:	425b      	negs	r3, r3
 80009b0:	2103      	movs	r1, #3
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff7c 	bl	80008b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x44>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x44>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	210f      	movs	r1, #15
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	1c02      	adds	r2, r0, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f7ff ff5d 	bl	80008b0 <__NVIC_SetPriority>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	0002      	movs	r2, r0
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff ff33 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff ffaf 	bl	800098c <SysTick_Config>
 8000a2e:	0003      	movs	r3, r0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a46:	e149      	b.n	8000cdc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	4091      	lsls	r1, r2
 8000a52:	000a      	movs	r2, r1
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d100      	bne.n	8000a60 <HAL_GPIO_Init+0x28>
 8000a5e:	e13a      	b.n	8000cd6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2203      	movs	r2, #3
 8000a66:	4013      	ands	r3, r2
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d005      	beq.n	8000a78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2203      	movs	r2, #3
 8000a72:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d130      	bne.n	8000ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	43da      	mvns	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d017      	beq.n	8000b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	43da      	mvns	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d123      	bne.n	8000b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	58d3      	ldr	r3, [r2, r3]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2207      	movs	r2, #7
 8000b34:	4013      	ands	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	220f      	movs	r2, #15
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	691a      	ldr	r2, [r3, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2107      	movs	r1, #7
 8000b4e:	400b      	ands	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	08da      	lsrs	r2, r3, #3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3208      	adds	r2, #8
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	6939      	ldr	r1, [r7, #16]
 8000b68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2203      	movs	r2, #3
 8000b88:	401a      	ands	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	23c0      	movs	r3, #192	; 0xc0
 8000ba4:	029b      	lsls	r3, r3, #10
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	d100      	bne.n	8000bac <HAL_GPIO_Init+0x174>
 8000baa:	e094      	b.n	8000cd6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bac:	4b51      	ldr	r3, [pc, #324]	; (8000cf4 <HAL_GPIO_Init+0x2bc>)
 8000bae:	699a      	ldr	r2, [r3, #24]
 8000bb0:	4b50      	ldr	r3, [pc, #320]	; (8000cf4 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	619a      	str	r2, [r3, #24]
 8000bb8:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <HAL_GPIO_Init+0x2bc>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc4:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	089b      	lsrs	r3, r3, #2
 8000bca:	3302      	adds	r3, #2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	589b      	ldr	r3, [r3, r2]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	0013      	movs	r3, r2
 8000be0:	43da      	mvns	r2, r3
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	2390      	movs	r3, #144	; 0x90
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d00d      	beq.n	8000c0e <HAL_GPIO_Init+0x1d6>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a41      	ldr	r2, [pc, #260]	; (8000cfc <HAL_GPIO_Init+0x2c4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d007      	beq.n	8000c0a <HAL_GPIO_Init+0x1d2>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_GPIO_Init+0x2c8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_GPIO_Init+0x1ce>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e004      	b.n	8000c10 <HAL_GPIO_Init+0x1d8>
 8000c06:	2305      	movs	r3, #5
 8000c08:	e002      	b.n	8000c10 <HAL_GPIO_Init+0x1d8>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x1d8>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	2103      	movs	r1, #3
 8000c14:	400a      	ands	r2, r1
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	4093      	lsls	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c20:	4935      	ldr	r1, [pc, #212]	; (8000cf8 <HAL_GPIO_Init+0x2c0>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3302      	adds	r3, #2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	43da      	mvns	r2, r3
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	4013      	ands	r3, r2
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	43da      	mvns	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	029b      	lsls	r3, r3, #10
 8000c70:	4013      	ands	r3, r2
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c82:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	035b      	lsls	r3, r3, #13
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43da      	mvns	r2, r3
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	039b      	lsls	r3, r3, #14
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	1e13      	subs	r3, r2, #0
 8000ce6:	d000      	beq.n	8000cea <HAL_GPIO_Init+0x2b2>
 8000ce8:	e6ae      	b.n	8000a48 <HAL_GPIO_Init+0x10>
  } 
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	0008      	movs	r0, r1
 8000d12:	0011      	movs	r1, r2
 8000d14:	1cbb      	adds	r3, r7, #2
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	1c7b      	adds	r3, r7, #1
 8000d1c:	1c0a      	adds	r2, r1, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d20:	1c7b      	adds	r3, r7, #1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d28:	1cbb      	adds	r3, r7, #2
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d32:	1cbb      	adds	r3, r7, #2
 8000d34:	881a      	ldrh	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	1dba      	adds	r2, r7, #6
 8000d56:	8812      	ldrh	r2, [r2, #0]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d008      	beq.n	8000d6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000d5e:	1dba      	adds	r2, r7, #6
 8000d60:	8812      	ldrh	r2, [r2, #0]
 8000d62:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff fa59 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e301      	b.n	8001392 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	4013      	ands	r3, r2
 8000d96:	d100      	bne.n	8000d9a <HAL_RCC_OscConfig+0x1e>
 8000d98:	e08d      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d9a:	4bc3      	ldr	r3, [pc, #780]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	220c      	movs	r2, #12
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d00e      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da6:	4bc0      	ldr	r3, [pc, #768]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	220c      	movs	r2, #12
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d116      	bne.n	8000de0 <HAL_RCC_OscConfig+0x64>
 8000db2:	4bbd      	ldr	r3, [pc, #756]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	401a      	ands	r2, r3
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	025b      	lsls	r3, r3, #9
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d10d      	bne.n	8000de0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc4:	4bb8      	ldr	r3, [pc, #736]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	029b      	lsls	r3, r3, #10
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x56>
 8000dd0:	e070      	b.n	8000eb4 <HAL_RCC_OscConfig+0x138>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d000      	beq.n	8000ddc <HAL_RCC_OscConfig+0x60>
 8000dda:	e06b      	b.n	8000eb4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e2d8      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d107      	bne.n	8000df8 <HAL_RCC_OscConfig+0x7c>
 8000de8:	4baf      	ldr	r3, [pc, #700]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4bae      	ldr	r3, [pc, #696]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e02f      	b.n	8000e58 <HAL_RCC_OscConfig+0xdc>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10c      	bne.n	8000e1a <HAL_RCC_OscConfig+0x9e>
 8000e00:	4ba9      	ldr	r3, [pc, #676]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4ba8      	ldr	r3, [pc, #672]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	49a9      	ldr	r1, [pc, #676]	; (80010ac <HAL_RCC_OscConfig+0x330>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	4ba6      	ldr	r3, [pc, #664]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4ba5      	ldr	r3, [pc, #660]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	49a7      	ldr	r1, [pc, #668]	; (80010b0 <HAL_RCC_OscConfig+0x334>)
 8000e14:	400a      	ands	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e01e      	b.n	8000e58 <HAL_RCC_OscConfig+0xdc>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d10e      	bne.n	8000e40 <HAL_RCC_OscConfig+0xc4>
 8000e22:	4ba1      	ldr	r3, [pc, #644]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4ba0      	ldr	r3, [pc, #640]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	02c9      	lsls	r1, r1, #11
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4b9d      	ldr	r3, [pc, #628]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b9c      	ldr	r3, [pc, #624]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	0249      	lsls	r1, r1, #9
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e00b      	b.n	8000e58 <HAL_RCC_OscConfig+0xdc>
 8000e40:	4b99      	ldr	r3, [pc, #612]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b98      	ldr	r3, [pc, #608]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	4999      	ldr	r1, [pc, #612]	; (80010ac <HAL_RCC_OscConfig+0x330>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b95      	ldr	r3, [pc, #596]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	4997      	ldr	r1, [pc, #604]	; (80010b0 <HAL_RCC_OscConfig+0x334>)
 8000e54:	400a      	ands	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d014      	beq.n	8000e8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fcde 	bl	8000820 <HAL_GetTick>
 8000e64:	0003      	movs	r3, r0
 8000e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fcd9 	bl	8000820 <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e28a      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	4b8a      	ldr	r3, [pc, #552]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	d0f0      	beq.n	8000e6a <HAL_RCC_OscConfig+0xee>
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fcc9 	bl	8000820 <HAL_GetTick>
 8000e8e:	0003      	movs	r3, r0
 8000e90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fcc4 	bl	8000820 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e275      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	4b80      	ldr	r3, [pc, #512]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	029b      	lsls	r3, r3, #10
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x118>
 8000eb2:	e000      	b.n	8000eb6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x146>
 8000ec0:	e069      	b.n	8000f96 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ec2:	4b79      	ldr	r3, [pc, #484]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d00b      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ecc:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d11c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x196>
 8000ed8:	4b73      	ldr	r3, [pc, #460]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	025b      	lsls	r3, r3, #9
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d116      	bne.n	8000f12 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee4:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2202      	movs	r2, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d005      	beq.n	8000efa <HAL_RCC_OscConfig+0x17e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d001      	beq.n	8000efa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e24b      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efa:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	22f8      	movs	r2, #248	; 0xf8
 8000f00:	4393      	bics	r3, r2
 8000f02:	0019      	movs	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	00da      	lsls	r2, r3, #3
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f10:	e041      	b.n	8000f96 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d024      	beq.n	8000f64 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc7b 	bl	8000820 <HAL_GetTick>
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f30:	f7ff fc76 	bl	8000820 <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e227      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2202      	movs	r2, #2
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d0f1      	beq.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	22f8      	movs	r2, #248	; 0xf8
 8000f52:	4393      	bics	r3, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	00da      	lsls	r2, r3, #3
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e018      	b.n	8000f96 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f64:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	438a      	bics	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc56 	bl	8000820 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc51 	bl	8000820 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e202      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8c:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2202      	movs	r2, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d1f1      	bne.n	8000f7a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d036      	beq.n	800100e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d019      	beq.n	8000fdc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc34 	bl	8000820 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc2f 	bl	8000820 <HAL_GetTick>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e1e0      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d0f1      	beq.n	8000fbe <HAL_RCC_OscConfig+0x242>
 8000fda:	e018      	b.n	800100e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fc1a 	bl	8000820 <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fc15 	bl	8000820 <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1c6      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	2202      	movs	r2, #2
 800100a:	4013      	ands	r3, r2
 800100c:	d1f1      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2204      	movs	r2, #4
 8001014:	4013      	ands	r3, r2
 8001016:	d100      	bne.n	800101a <HAL_RCC_OscConfig+0x29e>
 8001018:	e0b4      	b.n	8001184 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101a:	201f      	movs	r0, #31
 800101c:	183b      	adds	r3, r7, r0
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8001024:	69da      	ldr	r2, [r3, #28]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	055b      	lsls	r3, r3, #21
 800102a:	4013      	ands	r3, r2
 800102c:	d110      	bne.n	8001050 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8001030:	69da      	ldr	r2, [r3, #28]
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0549      	lsls	r1, r1, #21
 8001038:	430a      	orrs	r2, r1
 800103a:	61da      	str	r2, [r3, #28]
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	055b      	lsls	r3, r3, #21
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800104a:	183b      	adds	r3, r7, r0
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_RCC_OscConfig+0x338>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4013      	ands	r3, r2
 800105a:	d11a      	bne.n	8001092 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_RCC_OscConfig+0x338>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_RCC_OscConfig+0x338>)
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	0049      	lsls	r1, r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106a:	f7ff fbd9 	bl	8000820 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001074:	f7ff fbd4 	bl	8000820 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e185      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x338>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4013      	ands	r3, r2
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10e      	bne.n	80010b8 <HAL_RCC_OscConfig+0x33c>
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	621a      	str	r2, [r3, #32]
 80010a6:	e035      	b.n	8001114 <HAL_RCC_OscConfig+0x398>
 80010a8:	40021000 	.word	0x40021000
 80010ac:	fffeffff 	.word	0xfffeffff
 80010b0:	fffbffff 	.word	0xfffbffff
 80010b4:	40007000 	.word	0x40007000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10c      	bne.n	80010da <HAL_RCC_OscConfig+0x35e>
 80010c0:	4bb6      	ldr	r3, [pc, #728]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	4bb5      	ldr	r3, [pc, #724]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	438a      	bics	r2, r1
 80010ca:	621a      	str	r2, [r3, #32]
 80010cc:	4bb3      	ldr	r3, [pc, #716]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010ce:	6a1a      	ldr	r2, [r3, #32]
 80010d0:	4bb2      	ldr	r3, [pc, #712]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010d2:	2104      	movs	r1, #4
 80010d4:	438a      	bics	r2, r1
 80010d6:	621a      	str	r2, [r3, #32]
 80010d8:	e01c      	b.n	8001114 <HAL_RCC_OscConfig+0x398>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x380>
 80010e2:	4bae      	ldr	r3, [pc, #696]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010e4:	6a1a      	ldr	r2, [r3, #32]
 80010e6:	4bad      	ldr	r3, [pc, #692]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010e8:	2104      	movs	r1, #4
 80010ea:	430a      	orrs	r2, r1
 80010ec:	621a      	str	r2, [r3, #32]
 80010ee:	4bab      	ldr	r3, [pc, #684]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010f0:	6a1a      	ldr	r2, [r3, #32]
 80010f2:	4baa      	ldr	r3, [pc, #680]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	430a      	orrs	r2, r1
 80010f8:	621a      	str	r2, [r3, #32]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0x398>
 80010fc:	4ba7      	ldr	r3, [pc, #668]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80010fe:	6a1a      	ldr	r2, [r3, #32]
 8001100:	4ba6      	ldr	r3, [pc, #664]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001102:	2101      	movs	r1, #1
 8001104:	438a      	bics	r2, r1
 8001106:	621a      	str	r2, [r3, #32]
 8001108:	4ba4      	ldr	r3, [pc, #656]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800110a:	6a1a      	ldr	r2, [r3, #32]
 800110c:	4ba3      	ldr	r3, [pc, #652]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800110e:	2104      	movs	r1, #4
 8001110:	438a      	bics	r2, r1
 8001112:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d014      	beq.n	8001146 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111c:	f7ff fb80 	bl	8000820 <HAL_GetTick>
 8001120:	0003      	movs	r3, r0
 8001122:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001124:	e009      	b.n	800113a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fb7b 	bl	8000820 <HAL_GetTick>
 800112a:	0002      	movs	r2, r0
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	4a9b      	ldr	r2, [pc, #620]	; (80013a0 <HAL_RCC_OscConfig+0x624>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e12b      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800113a:	4b98      	ldr	r3, [pc, #608]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x3aa>
 8001144:	e013      	b.n	800116e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff fb6b 	bl	8000820 <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114e:	e009      	b.n	8001164 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001150:	f7ff fb66 	bl	8000820 <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	4a91      	ldr	r2, [pc, #580]	; (80013a0 <HAL_RCC_OscConfig+0x624>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e116      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001164:	4b8d      	ldr	r3, [pc, #564]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800116e:	231f      	movs	r3, #31
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800117a:	69da      	ldr	r2, [r3, #28]
 800117c:	4b87      	ldr	r3, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800117e:	4989      	ldr	r1, [pc, #548]	; (80013a4 <HAL_RCC_OscConfig+0x628>)
 8001180:	400a      	ands	r2, r1
 8001182:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2210      	movs	r2, #16
 800118a:	4013      	ands	r3, r2
 800118c:	d063      	beq.n	8001256 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d12a      	bne.n	80011ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119a:	4b80      	ldr	r3, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800119c:	2104      	movs	r1, #4
 800119e:	430a      	orrs	r2, r1
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011a2:	4b7e      	ldr	r3, [pc, #504]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011a8:	2101      	movs	r1, #1
 80011aa:	430a      	orrs	r2, r1
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb37 	bl	8000820 <HAL_GetTick>
 80011b2:	0003      	movs	r3, r0
 80011b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011b8:	f7ff fb32 	bl	8000820 <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0e3      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ca:	4b74      	ldr	r3, [pc, #464]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	2202      	movs	r2, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0f1      	beq.n	80011b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011d4:	4b71      	ldr	r3, [pc, #452]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d8:	22f8      	movs	r2, #248	; 0xf8
 80011da:	4393      	bics	r3, r2
 80011dc:	0019      	movs	r1, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	00da      	lsls	r2, r3, #3
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ea:	e034      	b.n	8001256 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	3305      	adds	r3, #5
 80011f2:	d111      	bne.n	8001218 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011f4:	4b69      	ldr	r3, [pc, #420]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	438a      	bics	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001204:	22f8      	movs	r2, #248	; 0xf8
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001212:	430a      	orrs	r2, r1
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
 8001216:	e01e      	b.n	8001256 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001218:	4b60      	ldr	r3, [pc, #384]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800121a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121c:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800121e:	2104      	movs	r1, #4
 8001220:	430a      	orrs	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001224:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001228:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff faf6 	bl	8000820 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800123a:	f7ff faf1 	bl	8000820 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e0a2      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800124c:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d1f1      	bne.n	800123a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_RCC_OscConfig+0x4e4>
 800125e:	e097      	b.n	8001390 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b4e      	ldr	r3, [pc, #312]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	220c      	movs	r2, #12
 8001266:	4013      	ands	r3, r2
 8001268:	2b08      	cmp	r3, #8
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x4f2>
 800126c:	e06b      	b.n	8001346 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d14c      	bne.n	8001310 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800127c:	494a      	ldr	r1, [pc, #296]	; (80013a8 <HAL_RCC_OscConfig+0x62c>)
 800127e:	400a      	ands	r2, r1
 8001280:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff facd 	bl	8000820 <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128c:	f7ff fac8 	bl	8000820 <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e079      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	4b3f      	ldr	r3, [pc, #252]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	049b      	lsls	r3, r3, #18
 80012a6:	4013      	ands	r3, r2
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012aa:	4b3c      	ldr	r3, [pc, #240]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	220f      	movs	r2, #15
 80012b0:	4393      	bics	r3, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4a3a      	ldr	r2, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x630>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	0019      	movs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012d4:	430a      	orrs	r2, r1
 80012d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d8:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_RCC_OscConfig+0x620>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0449      	lsls	r1, r1, #17
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fa9b 	bl	8000820 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff fa96 	bl	8000820 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e047      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	049b      	lsls	r3, r3, #18
 800130a:	4013      	ands	r3, r2
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x574>
 800130e:	e03f      	b.n	8001390 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001316:	4924      	ldr	r1, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x62c>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fa80 	bl	8000820 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fa7b 	bl	8000820 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e02c      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	049b      	lsls	r3, r3, #18
 8001340:	4013      	ands	r3, r2
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x5aa>
 8001344:	e024      	b.n	8001390 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e01f      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_OscConfig+0x620>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_RCC_OscConfig+0x620>)
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	429a      	cmp	r2, r3
 800136c:	d10e      	bne.n	800138c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	220f      	movs	r2, #15
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	23f0      	movs	r3, #240	; 0xf0
 8001380:	039b      	lsls	r3, r3, #14
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b008      	add	sp, #32
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40021000 	.word	0x40021000
 80013a0:	00001388 	.word	0x00001388
 80013a4:	efffffff 	.word	0xefffffff
 80013a8:	feffffff 	.word	0xfeffffff
 80013ac:	ffc2ffff 	.word	0xffc2ffff

080013b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b3      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c4:	4b5b      	ldr	r3, [pc, #364]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2201      	movs	r2, #1
 80013ca:	4013      	ands	r3, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d911      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2201      	movs	r2, #1
 80013d8:	4393      	bics	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	4b55      	ldr	r3, [pc, #340]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e4:	4b53      	ldr	r3, [pc, #332]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e09a      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d015      	beq.n	800142c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2204      	movs	r2, #4
 8001406:	4013      	ands	r3, r2
 8001408:	d006      	beq.n	8001418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800140a:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001410:	21e0      	movs	r1, #224	; 0xe0
 8001412:	00c9      	lsls	r1, r1, #3
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	22f0      	movs	r2, #240	; 0xf0
 800141e:	4393      	bics	r3, r2
 8001420:	0019      	movs	r1, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	4b44      	ldr	r3, [pc, #272]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001428:	430a      	orrs	r2, r1
 800142a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	d040      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b3e      	ldr	r3, [pc, #248]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d114      	bne.n	8001474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e06e      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	049b      	lsls	r3, r3, #18
 800145e:	4013      	ands	r3, r2
 8001460:	d108      	bne.n	8001474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e062      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e05b      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	4393      	bics	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff f9ca 	bl	8000820 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001490:	e009      	b.n	80014a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f9c5 	bl	8000820 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <HAL_RCC_ClockConfig+0x18c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e042      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	220c      	movs	r2, #12
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1ec      	bne.n	8001492 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d211      	bcs.n	80014ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_RCC_ClockConfig+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e020      	b.n	800152c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2204      	movs	r2, #4
 80014f0:	4013      	ands	r3, r2
 80014f2:	d009      	beq.n	8001508 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_RCC_ClockConfig+0x190>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001504:	430a      	orrs	r2, r1
 8001506:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001508:	f000 f820 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150c:	0001      	movs	r1, r0
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_ClockConfig+0x188>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	220f      	movs	r2, #15
 8001516:	4013      	ands	r3, r2
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x194>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	000a      	movs	r2, r1
 800151e:	40da      	lsrs	r2, r3
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x198>)
 8001522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff f935 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b004      	add	sp, #16
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	00001388 	.word	0x00001388
 8001540:	fffff8ff 	.word	0xfffff8ff
 8001544:	08001b20 	.word	0x08001b20
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08f      	sub	sp, #60	; 0x3c
 8001550:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001552:	2314      	movs	r3, #20
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	4a2b      	ldr	r2, [pc, #172]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001558:	ca13      	ldmia	r2!, {r0, r1, r4}
 800155a:	c313      	stmia	r3!, {r0, r1, r4}
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4a29      	ldr	r2, [pc, #164]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001564:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001566:	c313      	stmia	r3!, {r0, r1, r4}
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
 8001574:	2300      	movs	r3, #0
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001588:	220c      	movs	r2, #12
 800158a:	4013      	ands	r3, r2
 800158c:	2b04      	cmp	r3, #4
 800158e:	d002      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x4a>
 8001590:	2b08      	cmp	r3, #8
 8001592:	d003      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x50>
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800159a:	e02d      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	220f      	movs	r2, #15
 80015a2:	4013      	ands	r3, r2
 80015a4:	2214      	movs	r2, #20
 80015a6:	18ba      	adds	r2, r7, r2
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	220f      	movs	r2, #15
 80015b2:	4013      	ands	r3, r2
 80015b4:	1d3a      	adds	r2, r7, #4
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	025b      	lsls	r3, r3, #9
 80015c0:	4013      	ands	r3, r2
 80015c2:	d009      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015c8:	f7fe fd9e 	bl	8000108 <__udivsi3>
 80015cc:	0003      	movs	r3, r0
 80015ce:	001a      	movs	r2, r3
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	4353      	muls	r3, r2
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
 80015d6:	e009      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80015d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015da:	000a      	movs	r2, r1
 80015dc:	0152      	lsls	r2, r2, #5
 80015de:	1a52      	subs	r2, r2, r1
 80015e0:	0193      	lsls	r3, r2, #6
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	185b      	adds	r3, r3, r1
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80015ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015f0:	e002      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b00f      	add	sp, #60	; 0x3c
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	08001b00 	.word	0x08001b00
 8001608:	08001b10 	.word	0x08001b10
 800160c:	40021000 	.word	0x40021000
 8001610:	007a1200 	.word	0x007a1200

08001614 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e090      	b.n	800174a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	223d      	movs	r2, #61	; 0x3d
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	223c      	movs	r2, #60	; 0x3c
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0018      	movs	r0, r3
 8001640:	f7fe fff8 	bl	8000634 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	223d      	movs	r2, #61	; 0x3d
 8001648:	2102      	movs	r1, #2
 800164a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	493f      	ldr	r1, [pc, #252]	; (8001754 <HAL_TIM_Encoder_Init+0x140>)
 8001658:	400a      	ands	r2, r1
 800165a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f000 f920 	bl	80018ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_TIM_Encoder_Init+0x144>)
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	4313      	orrs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4a2c      	ldr	r2, [pc, #176]	; (800175c <HAL_TIM_Encoder_Init+0x148>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <HAL_TIM_Encoder_Init+0x14c>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	4313      	orrs	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	011a      	lsls	r2, r3, #4
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	031b      	lsls	r3, r3, #12
 80016d6:	4313      	orrs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2222      	movs	r2, #34	; 0x22
 80016e2:	4393      	bics	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2288      	movs	r2, #136	; 0x88
 80016ea:	4393      	bics	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4313      	orrs	r3, r2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2246      	movs	r2, #70	; 0x46
 800171c:	2101      	movs	r1, #1
 800171e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	223e      	movs	r2, #62	; 0x3e
 8001724:	2101      	movs	r1, #1
 8001726:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	223f      	movs	r2, #63	; 0x3f
 800172c:	2101      	movs	r1, #1
 800172e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2242      	movs	r2, #66	; 0x42
 8001734:	2101      	movs	r1, #1
 8001736:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2243      	movs	r2, #67	; 0x43
 800173c:	2101      	movs	r1, #1
 800173e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	223d      	movs	r2, #61	; 0x3d
 8001744:	2101      	movs	r1, #1
 8001746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	0018      	movs	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	b006      	add	sp, #24
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	ffffbff8 	.word	0xffffbff8
 8001758:	fffffcfc 	.word	0xfffffcfc
 800175c:	fffff3f3 	.word	0xfffff3f3
 8001760:	ffff0f0f 	.word	0xffff0f0f

08001764 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800176e:	200f      	movs	r0, #15
 8001770:	183b      	adds	r3, r7, r0
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	213e      	movs	r1, #62	; 0x3e
 8001776:	5c52      	ldrb	r2, [r2, r1]
 8001778:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800177a:	230e      	movs	r3, #14
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	213f      	movs	r1, #63	; 0x3f
 8001782:	5c52      	ldrb	r2, [r2, r1]
 8001784:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001786:	240d      	movs	r4, #13
 8001788:	193b      	adds	r3, r7, r4
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	2142      	movs	r1, #66	; 0x42
 800178e:	5c52      	ldrb	r2, [r2, r1]
 8001790:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001792:	230c      	movs	r3, #12
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	2143      	movs	r1, #67	; 0x43
 800179a:	5c52      	ldrb	r2, [r2, r1]
 800179c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d112      	bne.n	80017ca <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017a4:	183b      	adds	r3, r7, r0
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d103      	bne.n	80017b4 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e075      	b.n	80018a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	223e      	movs	r2, #62	; 0x3e
 80017bc:	2102      	movs	r1, #2
 80017be:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2242      	movs	r2, #66	; 0x42
 80017c4:	2102      	movs	r1, #2
 80017c6:	5499      	strb	r1, [r3, r2]
 80017c8:	e03d      	b.n	8001846 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d114      	bne.n	80017fa <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80017d0:	230e      	movs	r3, #14
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d104      	bne.n	80017e4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80017da:	230c      	movs	r3, #12
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d001      	beq.n	80017e8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e05d      	b.n	80018a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	223f      	movs	r2, #63	; 0x3f
 80017ec:	2102      	movs	r1, #2
 80017ee:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2243      	movs	r2, #67	; 0x43
 80017f4:	2102      	movs	r1, #2
 80017f6:	5499      	strb	r1, [r3, r2]
 80017f8:	e025      	b.n	8001846 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80017fa:	230f      	movs	r3, #15
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d10e      	bne.n	8001822 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001804:	230e      	movs	r3, #14
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d109      	bne.n	8001822 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800180e:	230d      	movs	r3, #13
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d104      	bne.n	8001822 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001818:	230c      	movs	r3, #12
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e03e      	b.n	80018a4 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223e      	movs	r2, #62	; 0x3e
 800182a:	2102      	movs	r1, #2
 800182c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	223f      	movs	r2, #63	; 0x3f
 8001832:	2102      	movs	r1, #2
 8001834:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2242      	movs	r2, #66	; 0x42
 800183a:	2102      	movs	r1, #2
 800183c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2243      	movs	r2, #67	; 0x43
 8001842:	2102      	movs	r1, #2
 8001844:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_TIM_Encoder_Start+0xf0>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d008      	beq.n	8001864 <HAL_TIM_Encoder_Start+0x100>
 8001852:	e00f      	b.n	8001874 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	2100      	movs	r1, #0
 800185c:	0018      	movs	r0, r3
 800185e:	f000 f89b 	bl	8001998 <TIM_CCxChannelCmd>
      break;
 8001862:	e016      	b.n	8001892 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	2104      	movs	r1, #4
 800186c:	0018      	movs	r0, r3
 800186e:	f000 f893 	bl	8001998 <TIM_CCxChannelCmd>
      break;
 8001872:	e00e      	b.n	8001892 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	2100      	movs	r1, #0
 800187c:	0018      	movs	r0, r3
 800187e:	f000 f88b 	bl	8001998 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	2104      	movs	r1, #4
 800188a:	0018      	movs	r0, r3
 800188c:	f000 f884 	bl	8001998 <TIM_CCxChannelCmd>
      break;
 8001890:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b005      	add	sp, #20
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a30      	ldr	r2, [pc, #192]	; (8001980 <TIM_Base_SetConfig+0xd4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d008      	beq.n	80018d6 <TIM_Base_SetConfig+0x2a>
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d003      	beq.n	80018d6 <TIM_Base_SetConfig+0x2a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a2c      	ldr	r2, [pc, #176]	; (8001984 <TIM_Base_SetConfig+0xd8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d108      	bne.n	80018e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2270      	movs	r2, #112	; 0x70
 80018da:	4393      	bics	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <TIM_Base_SetConfig+0xd4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d014      	beq.n	800191a <TIM_Base_SetConfig+0x6e>
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	05db      	lsls	r3, r3, #23
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d00f      	beq.n	800191a <TIM_Base_SetConfig+0x6e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <TIM_Base_SetConfig+0xd8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00b      	beq.n	800191a <TIM_Base_SetConfig+0x6e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a20      	ldr	r2, [pc, #128]	; (8001988 <TIM_Base_SetConfig+0xdc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <TIM_Base_SetConfig+0x6e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <TIM_Base_SetConfig+0xe0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d003      	beq.n	800191a <TIM_Base_SetConfig+0x6e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <TIM_Base_SetConfig+0xe4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d108      	bne.n	800192c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <TIM_Base_SetConfig+0xe8>)
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	4393      	bics	r3, r2
 8001932:	001a      	movs	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <TIM_Base_SetConfig+0xd4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <TIM_Base_SetConfig+0xbe>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <TIM_Base_SetConfig+0xe0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d003      	beq.n	800196a <TIM_Base_SetConfig+0xbe>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <TIM_Base_SetConfig+0xe4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d103      	bne.n	8001972 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	615a      	str	r2, [r3, #20]
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40012c00 	.word	0x40012c00
 8001984:	40000400 	.word	0x40000400
 8001988:	40002000 	.word	0x40002000
 800198c:	40014400 	.word	0x40014400
 8001990:	40014800 	.word	0x40014800
 8001994:	fffffcff 	.word	0xfffffcff

08001998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	221f      	movs	r2, #31
 80019a8:	4013      	ands	r3, r2
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	211f      	movs	r1, #31
 80019c8:	400b      	ands	r3, r1
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4099      	lsls	r1, r3
 80019ce:	000b      	movs	r3, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	621a      	str	r2, [r3, #32]
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b006      	add	sp, #24
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	223c      	movs	r2, #60	; 0x3c
 80019ee:	5c9b      	ldrb	r3, [r3, r2]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e042      	b.n	8001a7e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	223c      	movs	r2, #60	; 0x3c
 80019fc:	2101      	movs	r1, #1
 80019fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	223d      	movs	r2, #61	; 0x3d
 8001a04:	2102      	movs	r1, #2
 8001a06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2270      	movs	r2, #112	; 0x70
 8001a1c:	4393      	bics	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d00a      	beq.n	8001a52 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	05db      	lsls	r3, r3, #23
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d004      	beq.n	8001a52 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10c      	bne.n	8001a6c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4393      	bics	r3, r2
 8001a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	223d      	movs	r2, #61	; 0x3d
 8001a70:	2101      	movs	r1, #1
 8001a72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	223c      	movs	r2, #60	; 0x3c
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b004      	add	sp, #16
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40000400 	.word	0x40000400

08001a90 <__libc_init_array>:
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	2600      	movs	r6, #0
 8001a94:	4d0c      	ldr	r5, [pc, #48]	; (8001ac8 <__libc_init_array+0x38>)
 8001a96:	4c0d      	ldr	r4, [pc, #52]	; (8001acc <__libc_init_array+0x3c>)
 8001a98:	1b64      	subs	r4, r4, r5
 8001a9a:	10a4      	asrs	r4, r4, #2
 8001a9c:	42a6      	cmp	r6, r4
 8001a9e:	d109      	bne.n	8001ab4 <__libc_init_array+0x24>
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	f000 f821 	bl	8001ae8 <_init>
 8001aa6:	4d0a      	ldr	r5, [pc, #40]	; (8001ad0 <__libc_init_array+0x40>)
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <__libc_init_array+0x44>)
 8001aaa:	1b64      	subs	r4, r4, r5
 8001aac:	10a4      	asrs	r4, r4, #2
 8001aae:	42a6      	cmp	r6, r4
 8001ab0:	d105      	bne.n	8001abe <__libc_init_array+0x2e>
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	00b3      	lsls	r3, r6, #2
 8001ab6:	58eb      	ldr	r3, [r5, r3]
 8001ab8:	4798      	blx	r3
 8001aba:	3601      	adds	r6, #1
 8001abc:	e7ee      	b.n	8001a9c <__libc_init_array+0xc>
 8001abe:	00b3      	lsls	r3, r6, #2
 8001ac0:	58eb      	ldr	r3, [r5, r3]
 8001ac2:	4798      	blx	r3
 8001ac4:	3601      	adds	r6, #1
 8001ac6:	e7f2      	b.n	8001aae <__libc_init_array+0x1e>
 8001ac8:	08001b30 	.word	0x08001b30
 8001acc:	08001b30 	.word	0x08001b30
 8001ad0:	08001b30 	.word	0x08001b30
 8001ad4:	08001b34 	.word	0x08001b34

08001ad8 <memset>:
 8001ad8:	0003      	movs	r3, r0
 8001ada:	1882      	adds	r2, r0, r2
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <memset+0xa>
 8001ae0:	4770      	bx	lr
 8001ae2:	7019      	strb	r1, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	e7f9      	b.n	8001adc <memset+0x4>

08001ae8 <_init>:
 8001ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aee:	bc08      	pop	{r3}
 8001af0:	469e      	mov	lr, r3
 8001af2:	4770      	bx	lr

08001af4 <_fini>:
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001afa:	bc08      	pop	{r3}
 8001afc:	469e      	mov	lr, r3
 8001afe:	4770      	bx	lr
