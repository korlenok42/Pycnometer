
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002eb8  08002eb8  00012eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f2c  08002f2c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000084  08002fb8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002fb8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009474  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e4  00000000  00000000  00029520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f96a  00000000  00000000  0002bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6f9  00000000  00000000  0003b91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060eef  00000000  00000000  00046013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002424  00000000  00000000  000a6f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ea0 	.word	0x08002ea0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08002ea0 	.word	0x08002ea0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ReadADCvalue;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2b02      	cmp	r3, #2
 8000246:	d103      	bne.n	8000250 <HAL_GPIO_EXTI_Callback+0x1c>
 8000248:	4b13      	ldr	r3, [pc, #76]	; (8000298 <HAL_GPIO_EXTI_Callback+0x64>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]

    __NOP();

  }

}
 800024e:	e01e      	b.n	800028e <HAL_GPIO_EXTI_Callback+0x5a>
  else if(GPIO_Pin == Stop_Pin) {
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d10e      	bne.n	8000276 <HAL_GPIO_EXTI_Callback+0x42>
	  TimerFlag = 0;
 8000258:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <HAL_GPIO_EXTI_Callback+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
	  TimerCounter = TimStart;
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <HAL_GPIO_EXTI_Callback+0x68>)
 8000260:	220f      	movs	r2, #15
 8000262:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	00d9      	lsls	r1, r3, #3
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2200      	movs	r2, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 ff8e 	bl	8001190 <HAL_GPIO_WritePin>
}
 8000274:	e00b      	b.n	800028e <HAL_GPIO_EXTI_Callback+0x5a>
  else if(GPIO_Pin == ENC_BUT_Pin){
 8000276:	1dbb      	adds	r3, r7, #6
 8000278:	881a      	ldrh	r2, [r3, #0]
 800027a:	2380      	movs	r3, #128	; 0x80
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	429a      	cmp	r2, r3
 8000280:	d104      	bne.n	800028c <HAL_GPIO_EXTI_Callback+0x58>
	  __HAL_TIM_SET_COUNTER(&htim3, 30);
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	221e      	movs	r2, #30
 8000288:	625a      	str	r2, [r3, #36]	; 0x24
}
 800028a:	e000      	b.n	800028e <HAL_GPIO_EXTI_Callback+0x5a>
    __NOP();
 800028c:	46c0      	nop			; (mov r8, r8)
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	200000a4 	.word	0x200000a4
 800029c:	20000010 	.word	0x20000010
 80002a0:	200000c0 	.word	0x200000c0

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a8:	f000 fcc8 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ac:	f000 f85c 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b0:	f000 f94e 	bl	8000550 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002b4:	f000 f8ea 	bl	800048c <MX_TIM3_Init>
  MX_TIM2_Init();
 80002b8:	f000 f896 	bl	80003e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <main+0xa0>)
 80002be:	213c      	movs	r1, #60	; 0x3c
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fd2f 	bl	8001d24 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <main+0xa4>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 fc37 	bl	8001b3c <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <main+0xa8>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	2102      	movs	r1, #2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ff5b 	bl	8001190 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <main+0xa8>)
 80002dc:	2201      	movs	r2, #1
 80002de:	2101      	movs	r1, #1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 ff55 	bl	8001190 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  Enc_Counter = TIM3->CNT;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <main+0xac>)
 80002e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <main+0xb0>)
 80002ee:	701a      	strb	r2, [r3, #0]

	  if(!LEDsFlag && (LED_Counter < DIGITS_NUM))
 80002f0:	4b19      	ldr	r3, [pc, #100]	; (8000358 <main+0xb4>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d116      	bne.n	8000326 <main+0x82>
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <main+0xb8>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d812      	bhi.n	8000326 <main+0x82>
	  {
		  LEDsFlag = 1;
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <main+0xb4>)
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]

		  if(StartFlag) SEG_LCD_Process(LED_Counter);
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <main+0xbc>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <main+0x74>
 800030e:	4b13      	ldr	r3, [pc, #76]	; (800035c <main+0xb8>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fab6 	bl	8000884 <SEG_LCD_Process>
		  if(!StartFlag) StartFlag = 1;
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <main+0xbc>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <main+0x82>
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <main+0xbc>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
	  }

	  if(EncoderFlag)
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <main+0xc0>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0db      	beq.n	80002e6 <main+0x42>
	  {
		  SEG_LCD_WriteNumber((int)Enc_Counter/2);
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <main+0xb0>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	085b      	lsrs	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	0018      	movs	r0, r3
 8000338:	f000 fa8e 	bl	8000858 <SEG_LCD_WriteNumber>
		  EncoderFlag = 0;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <main+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
	  Enc_Counter = TIM3->CNT;
 8000342:	e7d0      	b.n	80002e6 <main+0x42>
 8000344:	200000c0 	.word	0x200000c0
 8000348:	20000108 	.word	0x20000108
 800034c:	48001400 	.word	0x48001400
 8000350:	40000400 	.word	0x40000400
 8000354:	200000a0 	.word	0x200000a0
 8000358:	200000a8 	.word	0x200000a8
 800035c:	200000b2 	.word	0x200000b2
 8000360:	200000a2 	.word	0x200000a2
 8000364:	200000a3 	.word	0x200000a3

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b091      	sub	sp, #68	; 0x44
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	2410      	movs	r4, #16
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2330      	movs	r3, #48	; 0x30
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f002 f94f 	bl	800261c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	003b      	movs	r3, r7
 8000380:	0018      	movs	r0, r3
 8000382:	2310      	movs	r3, #16
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f002 f948 	bl	800261c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	0021      	movs	r1, r4
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2202      	movs	r2, #2
 8000392:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2201      	movs	r2, #1
 8000398:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2210      	movs	r2, #16
 800039e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2200      	movs	r2, #0
 80003a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	0018      	movs	r0, r3
 80003aa:	f000 ff2b 	bl	8001204 <HAL_RCC_OscConfig>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80003b2:	f000 f965 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b6:	003b      	movs	r3, r7
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003bc:	003b      	movs	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ce:	003b      	movs	r3, r7
 80003d0:	2100      	movs	r1, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fa30 	bl	8001838 <HAL_RCC_ClockConfig>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003dc:	f000 f950 	bl	8000680 <Error_Handler>
  }
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b011      	add	sp, #68	; 0x44
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2308      	movs	r3, #8
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f002 f90f 	bl	800261c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	2308      	movs	r3, #8
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f002 f908 	bl	800261c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM2_Init+0xa0>)
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	05d2      	lsls	r2, r2, #23
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000416:	2263      	movs	r2, #99	; 0x63
 8000418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <MX_TIM2_Init+0xa0>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000422:	2227      	movs	r2, #39	; 0x27
 8000424:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_TIM2_Init+0xa0>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fb31 	bl	8001a9c <HAL_TIM_Base_Init>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800043e:	f000 f91f 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000442:	2108      	movs	r1, #8
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0152      	lsls	r2, r2, #5
 800044a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044c:	187a      	adds	r2, r7, r1
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000450:	0011      	movs	r1, r2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fe20 	bl	8002098 <HAL_TIM_ConfigClockSource>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800045c:	f000 f910 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	003b      	movs	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	003b      	movs	r3, r7
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800046c:	003a      	movs	r2, r7
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_TIM2_Init+0xa0>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f002 f840 	bl	80024f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800047c:	f000 f900 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b006      	add	sp, #24
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000108 	.word	0x20000108

0800048c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b08d      	sub	sp, #52	; 0x34
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2324      	movs	r3, #36	; 0x24
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f002 f8bd 	bl	800261c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	0018      	movs	r0, r3
 80004a6:	2308      	movs	r3, #8
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f002 f8b6 	bl	800261c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004b0:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004b2:	4a26      	ldr	r2, [pc, #152]	; (800054c <MX_TIM3_Init+0xc0>)
 80004b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004b6:	4b24      	ldr	r3, [pc, #144]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004bc:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80004c2:	4b21      	ldr	r3, [pc, #132]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004c4:	22c8      	movs	r2, #200	; 0xc8
 80004c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b1f      	ldr	r3, [pc, #124]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_TIM3_Init+0xbc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004d4:	0021      	movs	r1, r4
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2201      	movs	r2, #1
 80004e6:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800050c:	187a      	adds	r2, r7, r1
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_TIM3_Init+0xbc>)
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fb5e 	bl	8001bd4 <HAL_TIM_Encoder_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800051c:	f000 f8b0 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800052c:	1d3a      	adds	r2, r7, #4
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_TIM3_Init+0xbc>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f001 ffe0 	bl	80024f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800053c:	f000 f8a0 	bl	8000680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b00d      	add	sp, #52	; 0x34
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	200000c0 	.word	0x200000c0
 800054c:	40000400 	.word	0x40000400

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	240c      	movs	r4, #12
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2314      	movs	r3, #20
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 f85b 	bl	800261c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000566:	4b43      	ldr	r3, [pc, #268]	; (8000674 <MX_GPIO_Init+0x124>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b42      	ldr	r3, [pc, #264]	; (8000674 <MX_GPIO_Init+0x124>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	03c9      	lsls	r1, r1, #15
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b3f      	ldr	r3, [pc, #252]	; (8000674 <MX_GPIO_Init+0x124>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	03db      	lsls	r3, r3, #15
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <MX_GPIO_Init+0x124>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_GPIO_Init+0x124>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0289      	lsls	r1, r1, #10
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_GPIO_Init+0x124>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	029b      	lsls	r3, r3, #10
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800059e:	4b36      	ldr	r3, [pc, #216]	; (8000678 <MX_GPIO_Init+0x128>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	2103      	movs	r1, #3
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fdf3 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin, GPIO_PIN_RESET);
 80005aa:	2387      	movs	r3, #135	; 0x87
 80005ac:	00d9      	lsls	r1, r3, #3
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fdeb 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2203      	movs	r2, #3
 80005be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2201      	movs	r2, #1
 80005c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x128>)
 80005d6:	0019      	movs	r1, r3
 80005d8:	0010      	movs	r0, r2
 80005da:	f000 fc71 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2201      	movs	r2, #1
 80005e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2284      	movs	r2, #132	; 0x84
 80005e8:	0392      	lsls	r2, r2, #14
 80005ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2202      	movs	r2, #2
 80005f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80005f2:	193a      	adds	r2, r7, r4
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fc60 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Start_Pin ENC_BUT_Pin */
  GPIO_InitStruct.Pin = Start_Pin|ENC_BUT_Pin;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0x12c>)
 8000604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2288      	movs	r2, #136	; 0x88
 800060a:	0352      	lsls	r2, r2, #13
 800060c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2202      	movs	r2, #2
 8000612:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	193a      	adds	r2, r7, r4
 8000616:	2390      	movs	r3, #144	; 0x90
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fc4f 	bl	8000ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DS_Pin Latch_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin;
 8000622:	0021      	movs	r1, r4
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2287      	movs	r2, #135	; 0x87
 8000628:	00d2      	lsls	r2, r2, #3
 800062a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	187a      	adds	r2, r7, r1
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fc3a 	bl	8000ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2005      	movs	r0, #5
 8000652:	f000 fc03 	bl	8000e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000656:	2005      	movs	r0, #5
 8000658:	f000 fc15 	bl	8000e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	2007      	movs	r0, #7
 8000662:	f000 fbfb 	bl	8000e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000666:	2007      	movs	r0, #7
 8000668:	f000 fc0d 	bl	8000e86 <HAL_NVIC_EnableIRQ>

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b009      	add	sp, #36	; 0x24
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	48001400 	.word	0x48001400
 800067c:	00000202 	.word	0x00000202

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HC595SendData>:
static uint8_t currentDigitIndex = 0;

/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void HC595SendData(uint8_t dig_num, uint8_t reg_count)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	0002      	movs	r2, r0
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	1c0a      	adds	r2, r1, #0
 800069c:	701a      	strb	r2, [r3, #0]
   /* - STEP1, serial input pin*/
   if ((currentCharacters[dig_num] & (1 << reg_count)) != 0 )
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <HC595SendData+0x60>)
 80006a4:	5cd3      	ldrb	r3, [r2, r3]
 80006a6:	001a      	movs	r2, r3
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	411a      	asrs	r2, r3
 80006ae:	0013      	movs	r3, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	4013      	ands	r3, r2
 80006b4:	d007      	beq.n	80006c6 <HC595SendData+0x3a>
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fd66 	bl	8001190 <HAL_GPIO_WritePin>
 80006c4:	e006      	b.n	80006d4 <HC595SendData+0x48>
   else
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80006c6:	2390      	movs	r3, #144	; 0x90
 80006c8:	05db      	lsls	r3, r3, #23
 80006ca:	2200      	movs	r2, #0
 80006cc:	2110      	movs	r1, #16
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fd5e 	bl	8001190 <HAL_GPIO_WritePin>

    /* - STEP2, SHCP occurs once, 74HC595 will get current data from the DS pin */
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fd57 	bl	8001190 <HAL_GPIO_WritePin>

  /* - STEP3, after all the 8-bit data of the shift register is over, the rising edge of the latch clock pin (first pull low level is high) */
/*  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
  HAL_Delay(4);
  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);*/
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	200000ac 	.word	0x200000ac

080006f0 <SetOutput>:

/*----------------------------------------------------------------------------*/
static void SetOutput(McuPin output, uint8_t state)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	2408      	movs	r4, #8
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	6018      	str	r0, [r3, #0]
 80006fc:	6059      	str	r1, [r3, #4]
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(output.port, output.pin, (GPIO_PinState)state);
 8000702:	193b      	adds	r3, r7, r4
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	193b      	adds	r3, r7, r4
 8000708:	8899      	ldrh	r1, [r3, #4]
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	001a      	movs	r2, r3
 8000710:	f000 fd3e 	bl	8001190 <HAL_GPIO_WritePin>
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b005      	add	sp, #20
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <SEG_LCD_WriteString>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteString(char* str)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint8_t currentDigitIndex = 0;
 8000724:	230f      	movs	r3, #15
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 800072c:	230e      	movs	r3, #14
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e00f      	b.n	8000756 <SEG_LCD_WriteString+0x3a>
  {
    currentCharacters[i] = 0x00;
 8000736:	200e      	movs	r0, #14
 8000738:	183b      	adds	r3, r7, r0
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4a43      	ldr	r2, [pc, #268]	; (800084c <SEG_LCD_WriteString+0x130>)
 800073e:	2100      	movs	r1, #0
 8000740:	54d1      	strb	r1, [r2, r3]
    currentDots[i] = 0;
 8000742:	183b      	adds	r3, r7, r0
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4a42      	ldr	r2, [pc, #264]	; (8000850 <SEG_LCD_WriteString+0x134>)
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 800074c:	183b      	adds	r3, r7, r0
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	183b      	adds	r3, r7, r0
 8000752:	3201      	adds	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	230e      	movs	r3, #14
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d9ea      	bls.n	8000736 <SEG_LCD_WriteString+0x1a>
  }
  while(*str != '\0')
 8000760:	e023      	b.n	80007aa <SEG_LCD_WriteString+0x8e>
  {
	  if ((*str >= ASCII_NUMBER_FIRST_CODE) && (*str <= ASCII_NUMBER_LAST_CODE))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b2f      	cmp	r3, #47	; 0x2f
 8000768:	d917      	bls.n	800079a <SEG_LCD_WriteString+0x7e>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b39      	cmp	r3, #57	; 0x39
 8000770:	d813      	bhi.n	800079a <SEG_LCD_WriteString+0x7e>
	  {
		  uint8_t currentCharacterIndex = (*str - ASCII_NUMBER_FIRST_CODE);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	210b      	movs	r1, #11
 8000778:	187b      	adds	r3, r7, r1
 800077a:	3a30      	subs	r2, #48	; 0x30
 800077c:	701a      	strb	r2, [r3, #0]
		  currentCharacters[currentDigitIndex] = charactersTable[currentCharacterIndex];
 800077e:	187b      	adds	r3, r7, r1
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	200f      	movs	r0, #15
 8000784:	183b      	adds	r3, r7, r0
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4932      	ldr	r1, [pc, #200]	; (8000854 <SEG_LCD_WriteString+0x138>)
 800078a:	5c89      	ldrb	r1, [r1, r2]
 800078c:	4a2f      	ldr	r2, [pc, #188]	; (800084c <SEG_LCD_WriteString+0x130>)
 800078e:	54d1      	strb	r1, [r2, r3]
		  currentDigitIndex++;
 8000790:	183b      	adds	r3, r7, r0
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	183b      	adds	r3, r7, r0
 8000796:	3201      	adds	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
	  }

	  if (currentDigitIndex == DIGITS_NUM)
 800079a:	230f      	movs	r3, #15
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d007      	beq.n	80007b4 <SEG_LCD_WriteString+0x98>
	  {
		 break;
	  }
	  str++;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1d7      	bne.n	8000762 <SEG_LCD_WriteString+0x46>
 80007b2:	e000      	b.n	80007b6 <SEG_LCD_WriteString+0x9a>
		 break;
 80007b4:	46c0      	nop			; (mov r8, r8)
  }

  if (currentDigitIndex < DIGITS_NUM)
 80007b6:	220f      	movs	r2, #15
 80007b8:	18bb      	adds	r3, r7, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d83f      	bhi.n	8000840 <SEG_LCD_WriteString+0x124>
  {
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 80007c0:	18bb      	adds	r3, r7, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	230d      	movs	r3, #13
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e018      	b.n	8000802 <SEG_LCD_WriteString+0xe6>
    {
      currentCharacters[i + (DIGITS_NUM - currentDigitIndex)] = currentCharacters[i];
 80007d0:	240d      	movs	r4, #13
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2200      	movs	r2, #0
 80007d6:	569a      	ldrsb	r2, [r3, r2]
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2100      	movs	r1, #0
 80007dc:	5659      	ldrsb	r1, [r3, r1]
 80007de:	230f      	movs	r3, #15
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2002      	movs	r0, #2
 80007e6:	1ac3      	subs	r3, r0, r3
 80007e8:	18cb      	adds	r3, r1, r3
 80007ea:	4918      	ldr	r1, [pc, #96]	; (800084c <SEG_LCD_WriteString+0x130>)
 80007ec:	5c89      	ldrb	r1, [r1, r2]
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <SEG_LCD_WriteString+0x130>)
 80007f0:	54d1      	strb	r1, [r2, r3]
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3b01      	subs	r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	230d      	movs	r3, #13
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b7f      	cmp	r3, #127	; 0x7f
 800080a:	d9e1      	bls.n	80007d0 <SEG_LCD_WriteString+0xb4>
    }
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 800080c:	230c      	movs	r3, #12
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
 8000814:	e00a      	b.n	800082c <SEG_LCD_WriteString+0x110>
    {
      currentCharacters[i] = 0xFC;
 8000816:	200c      	movs	r0, #12
 8000818:	183b      	adds	r3, r7, r0
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <SEG_LCD_WriteString+0x130>)
 800081e:	21fc      	movs	r1, #252	; 0xfc
 8000820:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 8000822:	183b      	adds	r3, r7, r0
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	183b      	adds	r3, r7, r0
 8000828:	3201      	adds	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	230c      	movs	r3, #12
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2102      	movs	r1, #2
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	429a      	cmp	r2, r3
 800083e:	dbea      	blt.n	8000816 <SEG_LCD_WriteString+0xfa>
    }
  }
  return SEG_LCD_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b005      	add	sp, #20
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	200000ac 	.word	0x200000ac
 8000850:	200000b0 	.word	0x200000b0
 8000854:	08002edc 	.word	0x08002edc

08000858 <SEG_LCD_WriteNumber>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteNumber(uint32_t number)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  char temp[DIGITS_NUM];
  snprintf(temp, DIGITS_NUM+2, "%d", number);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <SEG_LCD_WriteNumber+0x28>)
 8000864:	240c      	movs	r4, #12
 8000866:	1938      	adds	r0, r7, r4
 8000868:	2104      	movs	r1, #4
 800086a:	f001 fedf 	bl	800262c <sniprintf>



  SEG_LCD_WriteString(temp);
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff53 	bl	800071c <SEG_LCD_WriteString>

  return SEG_LCD_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b005      	add	sp, #20
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	08002eb8 	.word	0x08002eb8

08000884 <SEG_LCD_Process>:

/*----------------------------------------------------------------------------*/
void SEG_LCD_Process(uint8_t dig_num)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
  // выбор земленного пина (на землю)
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000890:	230f      	movs	r3, #15
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e00f      	b.n	80008ba <SEG_LCD_Process+0x36>
  {
    SetOutput(digitPins[i], PIN_ACTIVE);
 800089a:	240f      	movs	r4, #15
 800089c:	193b      	adds	r3, r7, r4
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	490f      	ldr	r1, [pc, #60]	; (80008e0 <SEG_LCD_Process+0x5c>)
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	2201      	movs	r2, #1
 80008a6:	5858      	ldr	r0, [r3, r1]
 80008a8:	18cb      	adds	r3, r1, r3
 80008aa:	6859      	ldr	r1, [r3, #4]
 80008ac:	f7ff ff20 	bl	80006f0 <SetOutput>
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	3201      	adds	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	230f      	movs	r3, #15
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d9ea      	bls.n	800089a <SEG_LCD_Process+0x16>
  // SetOutput(digitPins[dig_num], PIN_ACTIVE);

  // выбор значения на индикаторе
  // HC595SendData(currentCharacters[dig_num]);

  SetOutput(digitPins[dig_num], !PIN_ACTIVE);
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4905      	ldr	r1, [pc, #20]	; (80008e0 <SEG_LCD_Process+0x5c>)
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	2200      	movs	r2, #0
 80008ce:	5858      	ldr	r0, [r3, r1]
 80008d0:	18cb      	adds	r3, r1, r3
 80008d2:	6859      	ldr	r1, [r3, #4]
 80008d4:	f7ff ff0c 	bl	80006f0 <SetOutput>

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b005      	add	sp, #20
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	20000000 	.word	0x20000000

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_MspInit+0x44>)
 80008ec:	699a      	ldr	r2, [r3, #24]
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_MspInit+0x44>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	430a      	orrs	r2, r1
 80008f4:	619a      	str	r2, [r3, #24]
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	2201      	movs	r2, #1
 80008fc:	4013      	ands	r3, r2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_MspInit+0x44>)
 8000904:	69da      	ldr	r2, [r3, #28]
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <HAL_MspInit+0x44>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0549      	lsls	r1, r1, #21
 800090c:	430a      	orrs	r2, r1
 800090e:	61da      	str	r2, [r3, #28]
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_MspInit+0x44>)
 8000912:	69da      	ldr	r2, [r3, #28]
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	055b      	lsls	r3, r3, #21
 8000918:	4013      	ands	r3, r2
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	429a      	cmp	r2, r3
 800093e:	d113      	bne.n	8000968 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_TIM_Base_MspInit+0x44>)
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x44>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	61da      	str	r2, [r3, #28]
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_TIM_Base_MspInit+0x44>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	2201      	movs	r2, #1
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	200f      	movs	r0, #15
 800095e:	f000 fa7d 	bl	8000e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 fa8f 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	2414      	movs	r4, #20
 800097e:	193b      	adds	r3, r7, r4
 8000980:	0018      	movs	r0, r3
 8000982:	2314      	movs	r3, #20
 8000984:	001a      	movs	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	f001 fe48 	bl	800261c <memset>
  if(htim_encoder->Instance==TIM3)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d130      	bne.n	80009f8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 8000998:	69da      	ldr	r2, [r3, #28]
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 800099c:	2102      	movs	r1, #2
 800099e:	430a      	orrs	r2, r1
 80009a0:	61da      	str	r2, [r3, #28]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	2202      	movs	r2, #2
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 80009b0:	695a      	ldr	r2, [r3, #20]
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 80009b4:	2180      	movs	r1, #128	; 0x80
 80009b6:	0289      	lsls	r1, r1, #10
 80009b8:	430a      	orrs	r2, r1
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_TIM_Encoder_MspInit+0x90>)
 80009be:	695a      	ldr	r2, [r3, #20]
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	029b      	lsls	r3, r3, #10
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	22c0      	movs	r2, #192	; 0xc0
 80009d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2202      	movs	r2, #2
 80009d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2201      	movs	r2, #1
 80009dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	187a      	adds	r2, r7, r1
 80009ec:	2390      	movs	r3, #144	; 0x90
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fa64 	bl	8000ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b00b      	add	sp, #44	; 0x2c
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	40000400 	.word	0x40000400
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f94e 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f000 fbc6 	bl	80011cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fbc3 	bl	80011cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fbb9 	bl	80011cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a64:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <TIM2_IRQHandler+0xf4>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 fa00 	bl	8001e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if(LEDsFlag)
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <TIM2_IRQHandler+0xf8>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d06c      	beq.n	8000b4e <TIM2_IRQHandler+0xee>
  {
	  if(Reg_Counter == 0)
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11c      	bne.n	8000ab6 <TIM2_IRQHandler+0x56>
	  {
		  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 8000a7c:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <TIM2_IRQHandler+0x100>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fb84 	bl	8001190 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 8000a88:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <TIM2_IRQHandler+0x100>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 fb7e 	bl	8001190 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000a94:	2390      	movs	r3, #144	; 0x90
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fb77 	bl	8001190 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fb70 	bl	8001190 <HAL_GPIO_WritePin>
		  LEDsFlag = 0;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <TIM2_IRQHandler+0xf8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	  }

	   if((Reg_Counter == 0 || Reg_Counter % 2 == 0) && Data_num < 8)
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <TIM2_IRQHandler+0x6c>
 8000abe:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d112      	bne.n	8000af2 <TIM2_IRQHandler+0x92>
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b07      	cmp	r3, #7
 8000ad2:	d80e      	bhi.n	8000af2 <TIM2_IRQHandler+0x92>
	   {
	  	  HC595SendData(LED_Counter, Data_num);
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <TIM2_IRQHandler+0x108>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f7ff fdd4 	bl	800068c <HC595SendData>
	  	  Data_num++;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	e006      	b.n	8000b00 <TIM2_IRQHandler+0xa0>
	   }
	   else
	   {
		   HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000af2:	2390      	movs	r3, #144	; 0x90
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	2201      	movs	r2, #1
 8000af8:	2108      	movs	r1, #8
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fb48 	bl	8001190 <HAL_GPIO_WritePin>
	   }

	   Reg_Counter++;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000b0a:	701a      	strb	r2, [r3, #0]


	   if(Data_num == 8)
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d112      	bne.n	8000b3a <TIM2_IRQHandler+0xda>
	   {
	  	  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2120      	movs	r1, #32
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fb37 	bl	8001190 <HAL_GPIO_WritePin>
	  	  Data_num = 0;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <TIM2_IRQHandler+0x104>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]

	  	  Reg_Counter = 0;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <TIM2_IRQHandler+0xfc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]


		  LED_Counter++;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <TIM2_IRQHandler+0x108>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <TIM2_IRQHandler+0x108>)
 8000b38:	701a      	strb	r2, [r3, #0]
	   }

	   if(LED_Counter >= DIGITS_NUM) { LED_Counter = 0; EncoderFlag = 1;}
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <TIM2_IRQHandler+0x108>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d905      	bls.n	8000b4e <TIM2_IRQHandler+0xee>
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <TIM2_IRQHandler+0x108>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <TIM2_IRQHandler+0x10c>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000108 	.word	0x20000108
 8000b58:	200000a8 	.word	0x200000a8
 8000b5c:	200000a1 	.word	0x200000a1
 8000b60:	48001400 	.word	0x48001400
 8000b64:	200000b3 	.word	0x200000b3
 8000b68:	200000b2 	.word	0x200000b2
 8000b6c:	200000a3 	.word	0x200000a3

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f001 fd12 	bl	80025c8 <__errno>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	425b      	negs	r3, r3
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	18d2      	adds	r2, r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b006      	add	sp, #24
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20001000 	.word	0x20001000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	200000b4 	.word	0x200000b4
 8000bd8:	20000168 	.word	0x20000168

08000bdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c12:	f7ff ffe3 	bl	8000bdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c16:	f001 fcdd 	bl	80025d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff fb43 	bl	80002a4 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c2c:	08002f34 	.word	0x08002f34
  ldr r2, =_sbss
 8000c30:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c34:	20000168 	.word	0x20000168

08000c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_IRQHandler>
	...

08000c3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_Init+0x24>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_Init+0x24>)
 8000c46:	2110      	movs	r1, #16
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f809 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff fe47 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000c6e:	681c      	ldr	r4, [r3, #0]
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_InitTick+0x60>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	0019      	movs	r1, r3
 8000c76:	23fa      	movs	r3, #250	; 0xfa
 8000c78:	0098      	lsls	r0, r3, #2
 8000c7a:	f7ff fa4f 	bl	800011c <__udivsi3>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	0019      	movs	r1, r3
 8000c82:	0020      	movs	r0, r4
 8000c84:	f7ff fa4a 	bl	800011c <__udivsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 f90b 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e00f      	b.n	8000cb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d80b      	bhi.n	8000cb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f8d8 	bl	8000e5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_InitTick+0x64>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd90      	pop	{r4, r7, pc}
 8000cc0:	20000014 	.word	0x20000014
 8000cc4:	2000001c 	.word	0x2000001c
 8000cc8:	20000018 	.word	0x20000018

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	18d2      	adds	r2, r2, r3
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	2000001c 	.word	0x2000001c
 8000cec:	20000154 	.word	0x20000154

08000cf0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000154 	.word	0x20000154

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b7f      	cmp	r3, #127	; 0x7f
 8000d16:	d809      	bhi.n	8000d2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	231f      	movs	r3, #31
 8000d20:	401a      	ands	r2, r3
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_EnableIRQ+0x30>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
  }
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4c:	d828      	bhi.n	8000da0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	33c0      	adds	r3, #192	; 0xc0
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	589b      	ldr	r3, [r3, r2]
 8000d5e:	1dfa      	adds	r2, r7, #7
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	0011      	movs	r1, r2
 8000d64:	2203      	movs	r2, #3
 8000d66:	400a      	ands	r2, r1
 8000d68:	00d2      	lsls	r2, r2, #3
 8000d6a:	21ff      	movs	r1, #255	; 0xff
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	401a      	ands	r2, r3
 8000d74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0018      	movs	r0, r3
 8000d84:	2303      	movs	r3, #3
 8000d86:	4003      	ands	r3, r0
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d8c:	481f      	ldr	r0, [pc, #124]	; (8000e0c <__NVIC_SetPriority+0xd4>)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	430a      	orrs	r2, r1
 8000d98:	33c0      	adds	r3, #192	; 0xc0
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d9e:	e031      	b.n	8000e04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	0019      	movs	r1, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	400b      	ands	r3, r1
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3306      	adds	r3, #6
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	3304      	adds	r3, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	1dfa      	adds	r2, r7, #7
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	400a      	ands	r2, r1
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	21ff      	movs	r1, #255	; 0xff
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	019b      	lsls	r3, r3, #6
 8000dd6:	22ff      	movs	r2, #255	; 0xff
 8000dd8:	401a      	ands	r2, r3
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	0018      	movs	r0, r3
 8000de0:	2303      	movs	r3, #3
 8000de2:	4003      	ands	r3, r0
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	001c      	movs	r4, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	4023      	ands	r3, r4
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	3306      	adds	r3, #6
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	18c3      	adds	r3, r0, r3
 8000e00:	3304      	adds	r3, #4
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b003      	add	sp, #12
 8000e0a:	bd90      	pop	{r4, r7, pc}
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	045b      	lsls	r3, r3, #17
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d301      	bcc.n	8000e2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e010      	b.n	8000e4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <SysTick_Config+0x44>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	3a01      	subs	r2, #1
 8000e32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e34:	2301      	movs	r3, #1
 8000e36:	425b      	negs	r3, r3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff ff7c 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x44>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x44>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff33 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff ffaf 	bl	8000e14 <SysTick_Config>
 8000eb6:	0003      	movs	r3, r0
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ece:	e149      	b.n	8001164 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x28>
 8000ee6:	e13a      	b.n	800115e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d005      	beq.n	8000f00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d017      	beq.n	8000f9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d123      	bne.n	8000ff2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3208      	adds	r2, #8
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	58d3      	ldr	r3, [r2, r3]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	2207      	movs	r2, #7
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	220f      	movs	r2, #15
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	6939      	ldr	r1, [r7, #16]
 8000ff0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2203      	movs	r2, #3
 8001010:	401a      	ands	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	23c0      	movs	r3, #192	; 0xc0
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x174>
 8001032:	e094      	b.n	800115e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	4b51      	ldr	r3, [pc, #324]	; (800117c <HAL_GPIO_Init+0x2bc>)
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <HAL_GPIO_Init+0x2bc>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <HAL_GPIO_Init+0x2bc>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800104c:	4a4c      	ldr	r2, [pc, #304]	; (8001180 <HAL_GPIO_Init+0x2c0>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	589b      	ldr	r3, [r3, r2]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	43da      	mvns	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2390      	movs	r3, #144	; 0x90
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	429a      	cmp	r2, r3
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1d6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a41      	ldr	r2, [pc, #260]	; (8001184 <HAL_GPIO_Init+0x2c4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1d2>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a40      	ldr	r2, [pc, #256]	; (8001188 <HAL_GPIO_Init+0x2c8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1ce>
 800108a:	2302      	movs	r3, #2
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x1d8>
 800108e:	2305      	movs	r3, #5
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x1d8>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x1d8>
 8001096:	2300      	movs	r3, #0
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	2103      	movs	r1, #3
 800109c:	400a      	ands	r2, r1
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a8:	4935      	ldr	r1, [pc, #212]	; (8001180 <HAL_GPIO_Init+0x2c0>)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2cc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	025b      	lsls	r3, r3, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_GPIO_Init+0x2cc>)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_GPIO_Init+0x2cc>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43da      	mvns	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_GPIO_Init+0x2cc>)
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_GPIO_Init+0x2cc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	035b      	lsls	r3, r3, #13
 8001122:	4013      	ands	r3, r2
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_GPIO_Init+0x2cc>)
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_GPIO_Init+0x2cc>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	039b      	lsls	r3, r3, #14
 800114c:	4013      	ands	r3, r2
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_GPIO_Init+0x2cc>)
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e13      	subs	r3, r2, #0
 800116e:	d000      	beq.n	8001172 <HAL_GPIO_Init+0x2b2>
 8001170:	e6ae      	b.n	8000ed0 <HAL_GPIO_Init+0x10>
  } 
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b006      	add	sp, #24
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	0008      	movs	r0, r1
 800119a:	0011      	movs	r1, r2
 800119c:	1cbb      	adds	r3, r7, #2
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	801a      	strh	r2, [r3, #0]
 80011a2:	1c7b      	adds	r3, r7, #1
 80011a4:	1c0a      	adds	r2, r1, #0
 80011a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	1c7b      	adds	r3, r7, #1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b0:	1cbb      	adds	r3, r7, #2
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	0002      	movs	r2, r0
 80011d4:	1dbb      	adds	r3, r7, #6
 80011d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	1dba      	adds	r2, r7, #6
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	4013      	ands	r3, r2
 80011e2:	d008      	beq.n	80011f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80011e6:	1dba      	adds	r2, r7, #6
 80011e8:	8812      	ldrh	r2, [r2, #0]
 80011ea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011ec:	1dbb      	adds	r3, r7, #6
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff f81f 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e301      	b.n	800181a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	d100      	bne.n	8001222 <HAL_RCC_OscConfig+0x1e>
 8001220:	e08d      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001222:	4bc3      	ldr	r3, [pc, #780]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	220c      	movs	r2, #12
 8001228:	4013      	ands	r3, r2
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00e      	beq.n	800124c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122e:	4bc0      	ldr	r3, [pc, #768]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	220c      	movs	r2, #12
 8001234:	4013      	ands	r3, r2
 8001236:	2b08      	cmp	r3, #8
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x64>
 800123a:	4bbd      	ldr	r3, [pc, #756]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	401a      	ands	r2, r3
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d10d      	bne.n	8001268 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4bb8      	ldr	r3, [pc, #736]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x56>
 8001258:	e070      	b.n	800133c <HAL_RCC_OscConfig+0x138>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d000      	beq.n	8001264 <HAL_RCC_OscConfig+0x60>
 8001262:	e06b      	b.n	800133c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e2d8      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001270:	4baf      	ldr	r3, [pc, #700]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4bae      	ldr	r3, [pc, #696]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0249      	lsls	r1, r1, #9
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e02f      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x9e>
 8001288:	4ba9      	ldr	r3, [pc, #676]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4ba8      	ldr	r3, [pc, #672]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800128e:	49a9      	ldr	r1, [pc, #676]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba5      	ldr	r3, [pc, #660]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800129a:	49a7      	ldr	r1, [pc, #668]	; (8001538 <HAL_RCC_OscConfig+0x334>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e01e      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0xc4>
 80012aa:	4ba1      	ldr	r3, [pc, #644]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4ba0      	ldr	r3, [pc, #640]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	02c9      	lsls	r1, r1, #11
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4b9d      	ldr	r3, [pc, #628]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b9c      	ldr	r3, [pc, #624]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0249      	lsls	r1, r1, #9
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 80012c8:	4b99      	ldr	r3, [pc, #612]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b98      	ldr	r3, [pc, #608]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	4999      	ldr	r1, [pc, #612]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	4b96      	ldr	r3, [pc, #600]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b95      	ldr	r3, [pc, #596]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012da:	4997      	ldr	r1, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x334>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fd02 	bl	8000cf0 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff fcfd 	bl	8000cf0 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e28a      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0xee>
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fced 	bl	8000cf0 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fce8 	bl	8000cf0 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e275      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x118>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x146>
 8001348:	e069      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134a:	4b79      	ldr	r3, [pc, #484]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	220c      	movs	r2, #12
 8001350:	4013      	ands	r3, r2
 8001352:	d00b      	beq.n	800136c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001354:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	220c      	movs	r2, #12
 800135a:	4013      	ands	r3, r2
 800135c:	2b08      	cmp	r3, #8
 800135e:	d11c      	bne.n	800139a <HAL_RCC_OscConfig+0x196>
 8001360:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	4013      	ands	r3, r2
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e24b      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	22f8      	movs	r2, #248	; 0xf8
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	00da      	lsls	r2, r3, #3
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	e041      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d024      	beq.n	80013ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc9f 	bl	8000cf0 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc9a 	bl	8000cf0 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e227      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d0f1      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	22f8      	movs	r2, #248	; 0xf8
 80013da:	4393      	bics	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00da      	lsls	r2, r3, #3
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e018      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc7a 	bl	8000cf0 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fc75 	bl	8000cf0 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e202      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d1f1      	bne.n	8001402 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	4013      	ands	r3, r2
 8001426:	d036      	beq.n	8001496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff fc58 	bl	8000cf0 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff fc53 	bl	8000cf0 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1e0      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d0f1      	beq.n	8001446 <HAL_RCC_OscConfig+0x242>
 8001462:	e018      	b.n	8001496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800146a:	2101      	movs	r1, #1
 800146c:	438a      	bics	r2, r1
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fc3e 	bl	8000cf0 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc39 	bl	8000cf0 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1c6      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d1f1      	bne.n	800147a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x29e>
 80014a0:	e0b4      	b.n	800160c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	201f      	movs	r0, #31
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	055b      	lsls	r3, r3, #21
 80014b2:	4013      	ands	r3, r2
 80014b4:	d110      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0549      	lsls	r1, r1, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	61da      	str	r2, [r3, #28]
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	055b      	lsls	r3, r3, #21
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d11a      	bne.n	800151a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0049      	lsls	r1, r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbfd 	bl	8000cf0 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fc:	f7ff fbf8 	bl	8000cf0 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e185      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x338>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4013      	ands	r3, r2
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10e      	bne.n	8001540 <HAL_RCC_OscConfig+0x33c>
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	e035      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001530:	40021000 	.word	0x40021000
 8001534:	fffeffff 	.word	0xfffeffff
 8001538:	fffbffff 	.word	0xfffbffff
 800153c:	40007000 	.word	0x40007000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001548:	4bb6      	ldr	r3, [pc, #728]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4bb5      	ldr	r3, [pc, #724]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800154e:	2101      	movs	r1, #1
 8001550:	438a      	bics	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
 8001554:	4bb3      	ldr	r3, [pc, #716]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x380>
 800156a:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	4bad      	ldr	r3, [pc, #692]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001570:	2104      	movs	r1, #4
 8001572:	430a      	orrs	r2, r1
 8001574:	621a      	str	r2, [r3, #32]
 8001576:	4bab      	ldr	r3, [pc, #684]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	4baa      	ldr	r3, [pc, #680]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	621a      	str	r2, [r3, #32]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001584:	4ba7      	ldr	r3, [pc, #668]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	621a      	str	r2, [r3, #32]
 8001590:	4ba4      	ldr	r3, [pc, #656]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4ba3      	ldr	r3, [pc, #652]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001596:	2104      	movs	r1, #4
 8001598:	438a      	bics	r2, r1
 800159a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fba4 	bl	8000cf0 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb9f 	bl	8000cf0 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_RCC_OscConfig+0x624>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e12b      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	4b98      	ldr	r3, [pc, #608]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x3aa>
 80015cc:	e013      	b.n	80015f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fb8f 	bl	8000cf0 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	e009      	b.n	80015ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb8a 	bl	8000cf0 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a91      	ldr	r2, [pc, #580]	; (8001828 <HAL_RCC_OscConfig+0x624>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e116      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	4b8d      	ldr	r3, [pc, #564]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015f6:	231f      	movs	r3, #31
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	4b87      	ldr	r3, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001606:	4989      	ldr	r1, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0x628>)
 8001608:	400a      	ands	r2, r1
 800160a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	4013      	ands	r3, r2
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d12a      	bne.n	8001674 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001622:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001624:	2104      	movs	r1, #4
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001630:	2101      	movs	r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fb5b 	bl	8000cf0 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001640:	f7ff fb56 	bl	8000cf0 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0e3      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d0f1      	beq.n	8001640 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800165e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001660:	22f8      	movs	r2, #248	; 0xf8
 8001662:	4393      	bics	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	00da      	lsls	r2, r3, #3
 800166c:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
 8001672:	e034      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	3305      	adds	r3, #5
 800167a:	d111      	bne.n	80016a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800167c:	4b69      	ldr	r3, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001682:	2104      	movs	r1, #4
 8001684:	438a      	bics	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001688:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	22f8      	movs	r2, #248	; 0xf8
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	00da      	lsls	r2, r3, #3
 8001698:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800169a:	430a      	orrs	r2, r1
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
 800169e:	e01e      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a4:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2104      	movs	r1, #4
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016ac:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b0:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb1a 	bl	8000cf0 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c2:	f7ff fb15 	bl	8000cf0 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0a2      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d100      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4e4>
 80016e6:	e097      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4f2>
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d14c      	bne.n	8001798 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001704:	494a      	ldr	r1, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x62c>)
 8001706:	400a      	ands	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff faf1 	bl	8000cf0 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff faec 	bl	8000cf0 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e079      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	049b      	lsls	r3, r3, #18
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	220f      	movs	r2, #15
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x630>)
 800174c:	4013      	ands	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	431a      	orrs	r2, r3
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	0449      	lsls	r1, r1, #17
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fabf 	bl	8000cf0 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff faba 	bl	8000cf0 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e047      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	049b      	lsls	r3, r3, #18
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x574>
 8001796:	e03f      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800179e:	4924      	ldr	r1, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x62c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff faa4 	bl	8000cf0 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fa9f 	bl	8000cf0 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e02c      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	049b      	lsls	r3, r3, #18
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x5aa>
 80017cc:	e024      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01f      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d10e      	bne.n	8001814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	220f      	movs	r2, #15
 80017fa:	401a      	ands	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	23f0      	movs	r3, #240	; 0xf0
 8001808:	039b      	lsls	r3, r3, #14
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b008      	add	sp, #32
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000
 8001828:	00001388 	.word	0x00001388
 800182c:	efffffff 	.word	0xefffffff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	ffc2ffff 	.word	0xffc2ffff

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b3      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b5b      	ldr	r3, [pc, #364]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d911      	bls.n	800187e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e09a      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d015      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d006      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001898:	21e0      	movs	r1, #224	; 0xe0
 800189a:	00c9      	lsls	r1, r1, #3
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	22f0      	movs	r2, #240	; 0xf0
 80018a6:	4393      	bics	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	d040      	beq.n	8001940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	029b      	lsls	r3, r3, #10
 80018ce:	4013      	ands	r3, r2
 80018d0:	d114      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06e      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	049b      	lsls	r3, r3, #18
 80018e6:	4013      	ands	r3, r2
 80018e8:	d108      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e062      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e05b      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800190c:	430a      	orrs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff f9ee 	bl	8000cf0 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001918:	e009      	b.n	800192e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7ff f9e9 	bl	8000cf0 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_RCC_ClockConfig+0x18c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e042      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	220c      	movs	r2, #12
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1ec      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d211      	bcs.n	8001972 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e020      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_RCC_ClockConfig+0x190>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001990:	f000 f820 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001994:	0001      	movs	r1, r0
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	220f      	movs	r2, #15
 800199e:	4013      	ands	r3, r2
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x194>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	000a      	movs	r2, r1
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x198>)
 80019aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff f959 	bl	8000c64 <HAL_InitTick>
  
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	00001388 	.word	0x00001388
 80019c8:	fffff8ff 	.word	0xfffff8ff
 80019cc:	08002ee8 	.word	0x08002ee8
 80019d0:	20000014 	.word	0x20000014

080019d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b08f      	sub	sp, #60	; 0x3c
 80019d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80019da:	2314      	movs	r3, #20
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019e2:	c313      	stmia	r3!, {r0, r1, r4}
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80019ee:	c313      	stmia	r3!, {r0, r1, r4}
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a10:	220c      	movs	r2, #12
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d002      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x4a>
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d003      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x50>
 8001a1c:	e02d      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a22:	e02d      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	220f      	movs	r2, #15
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2214      	movs	r2, #20
 8001a2e:	18ba      	adds	r2, r7, r2
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	220f      	movs	r2, #15
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	1d3a      	adds	r2, r7, #4
 8001a3e:	5cd3      	ldrb	r3, [r2, r3]
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d009      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a50:	f7fe fb64 	bl	800011c <__udivsi3>
 8001a54:	0003      	movs	r3, r0
 8001a56:	001a      	movs	r2, r3
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	4353      	muls	r3, r2
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5e:	e009      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a62:	000a      	movs	r2, r1
 8001a64:	0152      	lsls	r2, r2, #5
 8001a66:	1a52      	subs	r2, r2, r1
 8001a68:	0193      	lsls	r3, r2, #6
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	185b      	adds	r3, r3, r1
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a78:	e002      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a7e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b00f      	add	sp, #60	; 0x3c
 8001a88:	bd90      	pop	{r4, r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	08002ebc 	.word	0x08002ebc
 8001a90:	08002ecc 	.word	0x08002ecc
 8001a94:	40021000 	.word	0x40021000
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e042      	b.n	8001b34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	223d      	movs	r2, #61	; 0x3d
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	223c      	movs	r2, #60	; 0x3c
 8001abe:	2100      	movs	r1, #0
 8001ac0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7fe ff31 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	223d      	movs	r2, #61	; 0x3d
 8001ace:	2102      	movs	r1, #2
 8001ad0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	0019      	movs	r1, r3
 8001adc:	0010      	movs	r0, r2
 8001ade:	f000 fbd7 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2246      	movs	r2, #70	; 0x46
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223e      	movs	r2, #62	; 0x3e
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	223f      	movs	r2, #63	; 0x3f
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	2101      	movs	r1, #1
 8001b00:	5499      	strb	r1, [r3, r2]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2241      	movs	r2, #65	; 0x41
 8001b06:	2101      	movs	r1, #1
 8001b08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2242      	movs	r2, #66	; 0x42
 8001b0e:	2101      	movs	r1, #1
 8001b10:	5499      	strb	r1, [r3, r2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2243      	movs	r2, #67	; 0x43
 8001b16:	2101      	movs	r1, #1
 8001b18:	5499      	strb	r1, [r3, r2]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2244      	movs	r2, #68	; 0x44
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2245      	movs	r2, #69	; 0x45
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	223d      	movs	r2, #61	; 0x3d
 8001b2e:	2101      	movs	r1, #1
 8001b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b002      	add	sp, #8
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	223d      	movs	r2, #61	; 0x3d
 8001b48:	5c9b      	ldrb	r3, [r3, r2]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d001      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e036      	b.n	8001bc2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	223d      	movs	r2, #61	; 0x3d
 8001b58:	2102      	movs	r1, #2
 8001b5a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_TIM_Base_Start_IT+0x90>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00a      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x50>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d004      	beq.n	8001b8c <HAL_TIM_Base_Start_IT+0x50>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_TIM_Base_Start_IT+0x94>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d111      	bne.n	8001bb0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2207      	movs	r2, #7
 8001b94:	4013      	ands	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d010      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2101      	movs	r1, #1
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bae:	e007      	b.n	8001bc0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40012c00 	.word	0x40012c00
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e090      	b.n	8001d0a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	223d      	movs	r2, #61	; 0x3d
 8001bec:	5c9b      	ldrb	r3, [r3, r2]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	223c      	movs	r2, #60	; 0x3c
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7fe feb8 	bl	8000974 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	223d      	movs	r2, #61	; 0x3d
 8001c08:	2102      	movs	r1, #2
 8001c0a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	493f      	ldr	r1, [pc, #252]	; (8001d14 <HAL_TIM_Encoder_Init+0x140>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f000 fb32 	bl	8002290 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <HAL_TIM_Encoder_Init+0x144>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4313      	orrs	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <HAL_TIM_Encoder_Init+0x148>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <HAL_TIM_Encoder_Init+0x14c>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	4313      	orrs	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	011a      	lsls	r2, r3, #4
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	031b      	lsls	r3, r3, #12
 8001c96:	4313      	orrs	r3, r2
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2222      	movs	r2, #34	; 0x22
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2288      	movs	r2, #136	; 0x88
 8001caa:	4393      	bics	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2246      	movs	r2, #70	; 0x46
 8001cdc:	2101      	movs	r1, #1
 8001cde:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	223e      	movs	r2, #62	; 0x3e
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	223f      	movs	r2, #63	; 0x3f
 8001cec:	2101      	movs	r1, #1
 8001cee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2242      	movs	r2, #66	; 0x42
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2243      	movs	r2, #67	; 0x43
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	223d      	movs	r2, #61	; 0x3d
 8001d04:	2101      	movs	r1, #1
 8001d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	ffffbff8 	.word	0xffffbff8
 8001d18:	fffffcfc 	.word	0xfffffcfc
 8001d1c:	fffff3f3 	.word	0xfffff3f3
 8001d20:	ffff0f0f 	.word	0xffff0f0f

08001d24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	183b      	adds	r3, r7, r0
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	213e      	movs	r1, #62	; 0x3e
 8001d36:	5c52      	ldrb	r2, [r2, r1]
 8001d38:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001d3a:	230e      	movs	r3, #14
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	213f      	movs	r1, #63	; 0x3f
 8001d42:	5c52      	ldrb	r2, [r2, r1]
 8001d44:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001d46:	240d      	movs	r4, #13
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	2142      	movs	r1, #66	; 0x42
 8001d4e:	5c52      	ldrb	r2, [r2, r1]
 8001d50:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001d52:	230c      	movs	r3, #12
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	2143      	movs	r1, #67	; 0x43
 8001d5a:	5c52      	ldrb	r2, [r2, r1]
 8001d5c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d103      	bne.n	8001d74 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d001      	beq.n	8001d78 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e075      	b.n	8001e64 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	223e      	movs	r2, #62	; 0x3e
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2242      	movs	r2, #66	; 0x42
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]
 8001d88:	e03d      	b.n	8001e06 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d114      	bne.n	8001dba <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d90:	230e      	movs	r3, #14
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d104      	bne.n	8001da4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e05d      	b.n	8001e64 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	223f      	movs	r2, #63	; 0x3f
 8001dac:	2102      	movs	r1, #2
 8001dae:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2243      	movs	r2, #67	; 0x43
 8001db4:	2102      	movs	r1, #2
 8001db6:	5499      	strb	r1, [r3, r2]
 8001db8:	e025      	b.n	8001e06 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dba:	230f      	movs	r3, #15
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d10e      	bne.n	8001de2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dc4:	230e      	movs	r3, #14
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d109      	bne.n	8001de2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001dce:	230d      	movs	r3, #13
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d104      	bne.n	8001de2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001dd8:	230c      	movs	r3, #12
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e03e      	b.n	8001e64 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	223e      	movs	r2, #62	; 0x3e
 8001dea:	2102      	movs	r1, #2
 8001dec:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	2102      	movs	r1, #2
 8001df4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2242      	movs	r2, #66	; 0x42
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2243      	movs	r2, #67	; 0x43
 8001e02:	2102      	movs	r1, #2
 8001e04:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_TIM_Encoder_Start+0xf0>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d008      	beq.n	8001e24 <HAL_TIM_Encoder_Start+0x100>
 8001e12:	e00f      	b.n	8001e34 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 fb47 	bl	80024b0 <TIM_CCxChannelCmd>
      break;
 8001e22:	e016      	b.n	8001e52 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 fb3f 	bl	80024b0 <TIM_CCxChannelCmd>
      break;
 8001e32:	e00e      	b.n	8001e52 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 fb37 	bl	80024b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	2104      	movs	r1, #4
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fb30 	bl	80024b0 <TIM_CCxChannelCmd>
      break;
 8001e50:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b005      	add	sp, #20
 8001e6a:	bd90      	pop	{r4, r7, pc}

08001e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d124      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d11d      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	4252      	negs	r2, r2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f9d6 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e007      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f9c9 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f000 f9d5 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d125      	bne.n	8001f26 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d11e      	bne.n	8001f26 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2205      	movs	r2, #5
 8001eee:	4252      	negs	r2, r2
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f000 f9a9 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f99c 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 f9a8 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d124      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d11d      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2209      	movs	r2, #9
 8001f48:	4252      	negs	r2, r2
 8001f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f000 f97d 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 f970 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 f97c 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2210      	movs	r2, #16
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d125      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2210      	movs	r2, #16
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d11e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2211      	movs	r2, #17
 8001fa0:	4252      	negs	r2, r2
 8001fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f950 	bl	8002260 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e007      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f943 	bl	8002250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f000 f94f 	bl	8002270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10f      	bne.n	8002006 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f91d 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	4013      	ands	r3, r2
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d10f      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	4013      	ands	r3, r2
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d108      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2281      	movs	r2, #129	; 0x81
 8002028:	4252      	negs	r2, r2
 800202a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 fac2 	bl	80025b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	4013      	ands	r3, r2
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10f      	bne.n	8002062 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	4013      	ands	r3, r2
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d108      	bne.n	8002062 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	4252      	negs	r2, r2
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f90f 	bl	8002280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	2b20      	cmp	r3, #32
 800206e:	d10f      	bne.n	8002090 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	4013      	ands	r3, r2
 800207a:	2b20      	cmp	r3, #32
 800207c:	d108      	bne.n	8002090 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2221      	movs	r2, #33	; 0x21
 8002084:	4252      	negs	r2, r2
 8002086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 fa8c 	bl	80025a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020a2:	230f      	movs	r3, #15
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	223c      	movs	r2, #60	; 0x3c
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_TIM_ConfigClockSource+0x20>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0bc      	b.n	8002232 <HAL_TIM_ConfigClockSource+0x19a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	223c      	movs	r2, #60	; 0x3c
 80020bc:	2101      	movs	r1, #1
 80020be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	223d      	movs	r2, #61	; 0x3d
 80020c4:	2102      	movs	r1, #2
 80020c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2277      	movs	r2, #119	; 0x77
 80020d4:	4393      	bics	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_TIM_ConfigClockSource+0x1a4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	0192      	lsls	r2, r2, #6
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d040      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xde>
 80020f4:	2280      	movs	r2, #128	; 0x80
 80020f6:	0192      	lsls	r2, r2, #6
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d900      	bls.n	80020fe <HAL_TIM_ConfigClockSource+0x66>
 80020fc:	e088      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	0152      	lsls	r2, r2, #5
 8002102:	4293      	cmp	r3, r2
 8002104:	d100      	bne.n	8002108 <HAL_TIM_ConfigClockSource+0x70>
 8002106:	e088      	b.n	800221a <HAL_TIM_ConfigClockSource+0x182>
 8002108:	2280      	movs	r2, #128	; 0x80
 800210a:	0152      	lsls	r2, r2, #5
 800210c:	4293      	cmp	r3, r2
 800210e:	d900      	bls.n	8002112 <HAL_TIM_ConfigClockSource+0x7a>
 8002110:	e07e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 8002112:	2b70      	cmp	r3, #112	; 0x70
 8002114:	d018      	beq.n	8002148 <HAL_TIM_ConfigClockSource+0xb0>
 8002116:	d900      	bls.n	800211a <HAL_TIM_ConfigClockSource+0x82>
 8002118:	e07a      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 800211a:	2b60      	cmp	r3, #96	; 0x60
 800211c:	d04f      	beq.n	80021be <HAL_TIM_ConfigClockSource+0x126>
 800211e:	d900      	bls.n	8002122 <HAL_TIM_ConfigClockSource+0x8a>
 8002120:	e076      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 8002122:	2b50      	cmp	r3, #80	; 0x50
 8002124:	d03b      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x106>
 8002126:	d900      	bls.n	800212a <HAL_TIM_ConfigClockSource+0x92>
 8002128:	e072      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d057      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x146>
 800212e:	d900      	bls.n	8002132 <HAL_TIM_ConfigClockSource+0x9a>
 8002130:	e06e      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 8002132:	2b30      	cmp	r3, #48	; 0x30
 8002134:	d063      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x166>
 8002136:	d86b      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 8002138:	2b20      	cmp	r3, #32
 800213a:	d060      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x166>
 800213c:	d868      	bhi.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
 800213e:	2b00      	cmp	r3, #0
 8002140:	d05d      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x166>
 8002142:	2b10      	cmp	r3, #16
 8002144:	d05b      	beq.n	80021fe <HAL_TIM_ConfigClockSource+0x166>
 8002146:	e063      	b.n	8002210 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f000 f98a 	bl	8002470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2277      	movs	r2, #119	; 0x77
 8002168:	4313      	orrs	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
      break;
 8002174:	e052      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f000 f973 	bl	8002470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	01c9      	lsls	r1, r1, #7
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
      break;
 800219c:	e03e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	001a      	movs	r2, r3
 80021ac:	f000 f8e6 	bl	800237c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2150      	movs	r1, #80	; 0x50
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f940 	bl	800243c <TIM_ITRx_SetConfig>
      break;
 80021bc:	e02e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6859      	ldr	r1, [r3, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	001a      	movs	r2, r3
 80021cc:	f000 f904 	bl	80023d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2160      	movs	r1, #96	; 0x60
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f930 	bl	800243c <TIM_ITRx_SetConfig>
      break;
 80021dc:	e01e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	001a      	movs	r2, r3
 80021ec:	f000 f8c6 	bl	800237c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2140      	movs	r1, #64	; 0x40
 80021f6:	0018      	movs	r0, r3
 80021f8:	f000 f920 	bl	800243c <TIM_ITRx_SetConfig>
      break;
 80021fc:	e00e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0019      	movs	r1, r3
 8002208:	0010      	movs	r0, r2
 800220a:	f000 f917 	bl	800243c <TIM_ITRx_SetConfig>
      break;
 800220e:	e005      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002210:	230f      	movs	r3, #15
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
      break;
 8002218:	e000      	b.n	800221c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800221a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223d      	movs	r2, #61	; 0x3d
 8002220:	2101      	movs	r1, #1
 8002222:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223c      	movs	r2, #60	; 0x3c
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]

  return status;
 800222c:	230f      	movs	r3, #15
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	781b      	ldrb	r3, [r3, #0]
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	ffff00ff 	.word	0xffff00ff

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <TIM_Base_SetConfig+0xd4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d008      	beq.n	80022ba <TIM_Base_SetConfig+0x2a>
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	05db      	lsls	r3, r3, #23
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0x2a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2c      	ldr	r2, [pc, #176]	; (8002368 <TIM_Base_SetConfig+0xd8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2270      	movs	r2, #112	; 0x70
 80022be:	4393      	bics	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a25      	ldr	r2, [pc, #148]	; (8002364 <TIM_Base_SetConfig+0xd4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d014      	beq.n	80022fe <TIM_Base_SetConfig+0x6e>
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	05db      	lsls	r3, r3, #23
 80022da:	429a      	cmp	r2, r3
 80022dc:	d00f      	beq.n	80022fe <TIM_Base_SetConfig+0x6e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a21      	ldr	r2, [pc, #132]	; (8002368 <TIM_Base_SetConfig+0xd8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00b      	beq.n	80022fe <TIM_Base_SetConfig+0x6e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <TIM_Base_SetConfig+0xdc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <TIM_Base_SetConfig+0x6e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <TIM_Base_SetConfig+0xe0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d003      	beq.n	80022fe <TIM_Base_SetConfig+0x6e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <TIM_Base_SetConfig+0xe4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d108      	bne.n	8002310 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <TIM_Base_SetConfig+0xe8>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	4393      	bics	r3, r2
 8002316:	001a      	movs	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <TIM_Base_SetConfig+0xd4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <TIM_Base_SetConfig+0xbe>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <TIM_Base_SetConfig+0xe0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0xbe>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <TIM_Base_SetConfig+0xe4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d103      	bne.n	8002356 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	615a      	str	r2, [r3, #20]
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b004      	add	sp, #16
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40000400 	.word	0x40000400
 800236c:	40002000 	.word	0x40002000
 8002370:	40014400 	.word	0x40014400
 8002374:	40014800 	.word	0x40014800
 8002378:	fffffcff 	.word	0xfffffcff

0800237c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	2201      	movs	r2, #1
 8002394:	4393      	bics	r3, r2
 8002396:	001a      	movs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	22f0      	movs	r2, #240	; 0xf0
 80023a6:	4393      	bics	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	220a      	movs	r2, #10
 80023b8:	4393      	bics	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b006      	add	sp, #24
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	2210      	movs	r2, #16
 80023ea:	4393      	bics	r3, r2
 80023ec:	001a      	movs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <TIM_TI2_ConfigInputStage+0x60>)
 8002402:	4013      	ands	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	031b      	lsls	r3, r3, #12
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	22a0      	movs	r2, #160	; 0xa0
 8002414:	4393      	bics	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	621a      	str	r2, [r3, #32]
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b006      	add	sp, #24
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	ffff0fff 	.word	0xffff0fff

0800243c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2270      	movs	r2, #112	; 0x70
 8002450:	4393      	bics	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	2207      	movs	r2, #7
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	609a      	str	r2, [r3, #8]
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <TIM_ETR_SetConfig+0x3c>)
 8002488:	4013      	ands	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	609a      	str	r2, [r3, #8]
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b006      	add	sp, #24
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	ffff00ff 	.word	0xffff00ff

080024b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	221f      	movs	r2, #31
 80024c0:	4013      	ands	r3, r2
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	43d2      	mvns	r2, r2
 80024d2:	401a      	ands	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	211f      	movs	r1, #31
 80024e0:	400b      	ands	r3, r1
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4099      	lsls	r1, r3
 80024e6:	000b      	movs	r3, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b006      	add	sp, #24
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223c      	movs	r2, #60	; 0x3c
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800250c:	2302      	movs	r3, #2
 800250e:	e042      	b.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	223c      	movs	r2, #60	; 0x3c
 8002514:	2101      	movs	r1, #1
 8002516:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	223d      	movs	r2, #61	; 0x3d
 800251c:	2102      	movs	r1, #2
 800251e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2270      	movs	r2, #112	; 0x70
 8002534:	4393      	bics	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00a      	beq.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	05db      	lsls	r3, r3, #23
 800255c:	429a      	cmp	r2, r3
 800255e:	d004      	beq.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10c      	bne.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	4393      	bics	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4313      	orrs	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223d      	movs	r2, #61	; 0x3d
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	223c      	movs	r2, #60	; 0x3c
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b004      	add	sp, #16
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400

080025a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <__errno>:
 80025c8:	4b01      	ldr	r3, [pc, #4]	; (80025d0 <__errno+0x8>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	4770      	bx	lr
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	20000020 	.word	0x20000020

080025d4 <__libc_init_array>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	2600      	movs	r6, #0
 80025d8:	4d0c      	ldr	r5, [pc, #48]	; (800260c <__libc_init_array+0x38>)
 80025da:	4c0d      	ldr	r4, [pc, #52]	; (8002610 <__libc_init_array+0x3c>)
 80025dc:	1b64      	subs	r4, r4, r5
 80025de:	10a4      	asrs	r4, r4, #2
 80025e0:	42a6      	cmp	r6, r4
 80025e2:	d109      	bne.n	80025f8 <__libc_init_array+0x24>
 80025e4:	2600      	movs	r6, #0
 80025e6:	f000 fc5b 	bl	8002ea0 <_init>
 80025ea:	4d0a      	ldr	r5, [pc, #40]	; (8002614 <__libc_init_array+0x40>)
 80025ec:	4c0a      	ldr	r4, [pc, #40]	; (8002618 <__libc_init_array+0x44>)
 80025ee:	1b64      	subs	r4, r4, r5
 80025f0:	10a4      	asrs	r4, r4, #2
 80025f2:	42a6      	cmp	r6, r4
 80025f4:	d105      	bne.n	8002602 <__libc_init_array+0x2e>
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	00b3      	lsls	r3, r6, #2
 80025fa:	58eb      	ldr	r3, [r5, r3]
 80025fc:	4798      	blx	r3
 80025fe:	3601      	adds	r6, #1
 8002600:	e7ee      	b.n	80025e0 <__libc_init_array+0xc>
 8002602:	00b3      	lsls	r3, r6, #2
 8002604:	58eb      	ldr	r3, [r5, r3]
 8002606:	4798      	blx	r3
 8002608:	3601      	adds	r6, #1
 800260a:	e7f2      	b.n	80025f2 <__libc_init_array+0x1e>
 800260c:	08002f2c 	.word	0x08002f2c
 8002610:	08002f2c 	.word	0x08002f2c
 8002614:	08002f2c 	.word	0x08002f2c
 8002618:	08002f30 	.word	0x08002f30

0800261c <memset>:
 800261c:	0003      	movs	r3, r0
 800261e:	1882      	adds	r2, r0, r2
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	7019      	strb	r1, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <sniprintf>:
 800262c:	b40c      	push	{r2, r3}
 800262e:	b530      	push	{r4, r5, lr}
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <sniprintf+0x64>)
 8002632:	000c      	movs	r4, r1
 8002634:	681d      	ldr	r5, [r3, #0]
 8002636:	b09d      	sub	sp, #116	; 0x74
 8002638:	2900      	cmp	r1, #0
 800263a:	da08      	bge.n	800264e <sniprintf+0x22>
 800263c:	238b      	movs	r3, #139	; 0x8b
 800263e:	2001      	movs	r0, #1
 8002640:	602b      	str	r3, [r5, #0]
 8002642:	4240      	negs	r0, r0
 8002644:	b01d      	add	sp, #116	; 0x74
 8002646:	bc30      	pop	{r4, r5}
 8002648:	bc08      	pop	{r3}
 800264a:	b002      	add	sp, #8
 800264c:	4718      	bx	r3
 800264e:	2382      	movs	r3, #130	; 0x82
 8002650:	466a      	mov	r2, sp
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	8293      	strh	r3, [r2, #20]
 8002656:	2300      	movs	r3, #0
 8002658:	9002      	str	r0, [sp, #8]
 800265a:	9006      	str	r0, [sp, #24]
 800265c:	4299      	cmp	r1, r3
 800265e:	d000      	beq.n	8002662 <sniprintf+0x36>
 8002660:	1e4b      	subs	r3, r1, #1
 8002662:	9304      	str	r3, [sp, #16]
 8002664:	9307      	str	r3, [sp, #28]
 8002666:	2301      	movs	r3, #1
 8002668:	466a      	mov	r2, sp
 800266a:	425b      	negs	r3, r3
 800266c:	82d3      	strh	r3, [r2, #22]
 800266e:	0028      	movs	r0, r5
 8002670:	ab21      	add	r3, sp, #132	; 0x84
 8002672:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002674:	a902      	add	r1, sp, #8
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	f000 f86e 	bl	8002758 <_svfiprintf_r>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	da01      	bge.n	8002684 <sniprintf+0x58>
 8002680:	238b      	movs	r3, #139	; 0x8b
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	2c00      	cmp	r4, #0
 8002686:	d0dd      	beq.n	8002644 <sniprintf+0x18>
 8002688:	2300      	movs	r3, #0
 800268a:	9a02      	ldr	r2, [sp, #8]
 800268c:	7013      	strb	r3, [r2, #0]
 800268e:	e7d9      	b.n	8002644 <sniprintf+0x18>
 8002690:	20000020 	.word	0x20000020

08002694 <__ssputs_r>:
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	688e      	ldr	r6, [r1, #8]
 8002698:	b085      	sub	sp, #20
 800269a:	0007      	movs	r7, r0
 800269c:	000c      	movs	r4, r1
 800269e:	9203      	str	r2, [sp, #12]
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	429e      	cmp	r6, r3
 80026a4:	d83c      	bhi.n	8002720 <__ssputs_r+0x8c>
 80026a6:	2390      	movs	r3, #144	; 0x90
 80026a8:	898a      	ldrh	r2, [r1, #12]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	421a      	tst	r2, r3
 80026ae:	d034      	beq.n	800271a <__ssputs_r+0x86>
 80026b0:	2503      	movs	r5, #3
 80026b2:	6909      	ldr	r1, [r1, #16]
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	1a5b      	subs	r3, r3, r1
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	6963      	ldr	r3, [r4, #20]
 80026bc:	9802      	ldr	r0, [sp, #8]
 80026be:	435d      	muls	r5, r3
 80026c0:	0feb      	lsrs	r3, r5, #31
 80026c2:	195d      	adds	r5, r3, r5
 80026c4:	9b01      	ldr	r3, [sp, #4]
 80026c6:	106d      	asrs	r5, r5, #1
 80026c8:	3301      	adds	r3, #1
 80026ca:	181b      	adds	r3, r3, r0
 80026cc:	42ab      	cmp	r3, r5
 80026ce:	d900      	bls.n	80026d2 <__ssputs_r+0x3e>
 80026d0:	001d      	movs	r5, r3
 80026d2:	0553      	lsls	r3, r2, #21
 80026d4:	d532      	bpl.n	800273c <__ssputs_r+0xa8>
 80026d6:	0029      	movs	r1, r5
 80026d8:	0038      	movs	r0, r7
 80026da:	f000 fb31 	bl	8002d40 <_malloc_r>
 80026de:	1e06      	subs	r6, r0, #0
 80026e0:	d109      	bne.n	80026f6 <__ssputs_r+0x62>
 80026e2:	230c      	movs	r3, #12
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	2340      	movs	r3, #64	; 0x40
 80026e8:	2001      	movs	r0, #1
 80026ea:	89a2      	ldrh	r2, [r4, #12]
 80026ec:	4240      	negs	r0, r0
 80026ee:	4313      	orrs	r3, r2
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	b005      	add	sp, #20
 80026f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f6:	9a02      	ldr	r2, [sp, #8]
 80026f8:	6921      	ldr	r1, [r4, #16]
 80026fa:	f000 faba 	bl	8002c72 <memcpy>
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <__ssputs_r+0xc0>)
 8002702:	401a      	ands	r2, r3
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	4313      	orrs	r3, r2
 8002708:	81a3      	strh	r3, [r4, #12]
 800270a:	9b02      	ldr	r3, [sp, #8]
 800270c:	6126      	str	r6, [r4, #16]
 800270e:	18f6      	adds	r6, r6, r3
 8002710:	6026      	str	r6, [r4, #0]
 8002712:	6165      	str	r5, [r4, #20]
 8002714:	9e01      	ldr	r6, [sp, #4]
 8002716:	1aed      	subs	r5, r5, r3
 8002718:	60a5      	str	r5, [r4, #8]
 800271a:	9b01      	ldr	r3, [sp, #4]
 800271c:	429e      	cmp	r6, r3
 800271e:	d900      	bls.n	8002722 <__ssputs_r+0x8e>
 8002720:	9e01      	ldr	r6, [sp, #4]
 8002722:	0032      	movs	r2, r6
 8002724:	9903      	ldr	r1, [sp, #12]
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	f000 faac 	bl	8002c84 <memmove>
 800272c:	68a3      	ldr	r3, [r4, #8]
 800272e:	2000      	movs	r0, #0
 8002730:	1b9b      	subs	r3, r3, r6
 8002732:	60a3      	str	r3, [r4, #8]
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	199e      	adds	r6, r3, r6
 8002738:	6026      	str	r6, [r4, #0]
 800273a:	e7da      	b.n	80026f2 <__ssputs_r+0x5e>
 800273c:	002a      	movs	r2, r5
 800273e:	0038      	movs	r0, r7
 8002740:	f000 fb5c 	bl	8002dfc <_realloc_r>
 8002744:	1e06      	subs	r6, r0, #0
 8002746:	d1e0      	bne.n	800270a <__ssputs_r+0x76>
 8002748:	0038      	movs	r0, r7
 800274a:	6921      	ldr	r1, [r4, #16]
 800274c:	f000 faae 	bl	8002cac <_free_r>
 8002750:	e7c7      	b.n	80026e2 <__ssputs_r+0x4e>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	fffffb7f 	.word	0xfffffb7f

08002758 <_svfiprintf_r>:
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b0a1      	sub	sp, #132	; 0x84
 800275c:	9003      	str	r0, [sp, #12]
 800275e:	001d      	movs	r5, r3
 8002760:	898b      	ldrh	r3, [r1, #12]
 8002762:	000f      	movs	r7, r1
 8002764:	0016      	movs	r6, r2
 8002766:	061b      	lsls	r3, r3, #24
 8002768:	d511      	bpl.n	800278e <_svfiprintf_r+0x36>
 800276a:	690b      	ldr	r3, [r1, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10e      	bne.n	800278e <_svfiprintf_r+0x36>
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	f000 fae5 	bl	8002d40 <_malloc_r>
 8002776:	6038      	str	r0, [r7, #0]
 8002778:	6138      	str	r0, [r7, #16]
 800277a:	2800      	cmp	r0, #0
 800277c:	d105      	bne.n	800278a <_svfiprintf_r+0x32>
 800277e:	230c      	movs	r3, #12
 8002780:	9a03      	ldr	r2, [sp, #12]
 8002782:	3801      	subs	r0, #1
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	b021      	add	sp, #132	; 0x84
 8002788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278a:	2340      	movs	r3, #64	; 0x40
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	2300      	movs	r3, #0
 8002790:	ac08      	add	r4, sp, #32
 8002792:	6163      	str	r3, [r4, #20]
 8002794:	3320      	adds	r3, #32
 8002796:	7663      	strb	r3, [r4, #25]
 8002798:	3310      	adds	r3, #16
 800279a:	76a3      	strb	r3, [r4, #26]
 800279c:	9507      	str	r5, [sp, #28]
 800279e:	0035      	movs	r5, r6
 80027a0:	782b      	ldrb	r3, [r5, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <_svfiprintf_r+0x52>
 80027a6:	2b25      	cmp	r3, #37	; 0x25
 80027a8:	d147      	bne.n	800283a <_svfiprintf_r+0xe2>
 80027aa:	1bab      	subs	r3, r5, r6
 80027ac:	9305      	str	r3, [sp, #20]
 80027ae:	42b5      	cmp	r5, r6
 80027b0:	d00c      	beq.n	80027cc <_svfiprintf_r+0x74>
 80027b2:	0032      	movs	r2, r6
 80027b4:	0039      	movs	r1, r7
 80027b6:	9803      	ldr	r0, [sp, #12]
 80027b8:	f7ff ff6c 	bl	8002694 <__ssputs_r>
 80027bc:	1c43      	adds	r3, r0, #1
 80027be:	d100      	bne.n	80027c2 <_svfiprintf_r+0x6a>
 80027c0:	e0ae      	b.n	8002920 <_svfiprintf_r+0x1c8>
 80027c2:	6962      	ldr	r2, [r4, #20]
 80027c4:	9b05      	ldr	r3, [sp, #20]
 80027c6:	4694      	mov	ip, r2
 80027c8:	4463      	add	r3, ip
 80027ca:	6163      	str	r3, [r4, #20]
 80027cc:	782b      	ldrb	r3, [r5, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d100      	bne.n	80027d4 <_svfiprintf_r+0x7c>
 80027d2:	e0a5      	b.n	8002920 <_svfiprintf_r+0x1c8>
 80027d4:	2201      	movs	r2, #1
 80027d6:	2300      	movs	r3, #0
 80027d8:	4252      	negs	r2, r2
 80027da:	6062      	str	r2, [r4, #4]
 80027dc:	a904      	add	r1, sp, #16
 80027de:	3254      	adds	r2, #84	; 0x54
 80027e0:	1852      	adds	r2, r2, r1
 80027e2:	1c6e      	adds	r6, r5, #1
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	60e3      	str	r3, [r4, #12]
 80027e8:	60a3      	str	r3, [r4, #8]
 80027ea:	7013      	strb	r3, [r2, #0]
 80027ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80027ee:	2205      	movs	r2, #5
 80027f0:	7831      	ldrb	r1, [r6, #0]
 80027f2:	4854      	ldr	r0, [pc, #336]	; (8002944 <_svfiprintf_r+0x1ec>)
 80027f4:	f000 fa32 	bl	8002c5c <memchr>
 80027f8:	1c75      	adds	r5, r6, #1
 80027fa:	2800      	cmp	r0, #0
 80027fc:	d11f      	bne.n	800283e <_svfiprintf_r+0xe6>
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	06d3      	lsls	r3, r2, #27
 8002802:	d504      	bpl.n	800280e <_svfiprintf_r+0xb6>
 8002804:	2353      	movs	r3, #83	; 0x53
 8002806:	a904      	add	r1, sp, #16
 8002808:	185b      	adds	r3, r3, r1
 800280a:	2120      	movs	r1, #32
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	0713      	lsls	r3, r2, #28
 8002810:	d504      	bpl.n	800281c <_svfiprintf_r+0xc4>
 8002812:	2353      	movs	r3, #83	; 0x53
 8002814:	a904      	add	r1, sp, #16
 8002816:	185b      	adds	r3, r3, r1
 8002818:	212b      	movs	r1, #43	; 0x2b
 800281a:	7019      	strb	r1, [r3, #0]
 800281c:	7833      	ldrb	r3, [r6, #0]
 800281e:	2b2a      	cmp	r3, #42	; 0x2a
 8002820:	d016      	beq.n	8002850 <_svfiprintf_r+0xf8>
 8002822:	0035      	movs	r5, r6
 8002824:	2100      	movs	r1, #0
 8002826:	200a      	movs	r0, #10
 8002828:	68e3      	ldr	r3, [r4, #12]
 800282a:	782a      	ldrb	r2, [r5, #0]
 800282c:	1c6e      	adds	r6, r5, #1
 800282e:	3a30      	subs	r2, #48	; 0x30
 8002830:	2a09      	cmp	r2, #9
 8002832:	d94e      	bls.n	80028d2 <_svfiprintf_r+0x17a>
 8002834:	2900      	cmp	r1, #0
 8002836:	d111      	bne.n	800285c <_svfiprintf_r+0x104>
 8002838:	e017      	b.n	800286a <_svfiprintf_r+0x112>
 800283a:	3501      	adds	r5, #1
 800283c:	e7b0      	b.n	80027a0 <_svfiprintf_r+0x48>
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <_svfiprintf_r+0x1ec>)
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	1ac0      	subs	r0, r0, r3
 8002844:	2301      	movs	r3, #1
 8002846:	4083      	lsls	r3, r0
 8002848:	4313      	orrs	r3, r2
 800284a:	002e      	movs	r6, r5
 800284c:	6023      	str	r3, [r4, #0]
 800284e:	e7ce      	b.n	80027ee <_svfiprintf_r+0x96>
 8002850:	9b07      	ldr	r3, [sp, #28]
 8002852:	1d19      	adds	r1, r3, #4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	9107      	str	r1, [sp, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db01      	blt.n	8002860 <_svfiprintf_r+0x108>
 800285c:	930b      	str	r3, [sp, #44]	; 0x2c
 800285e:	e004      	b.n	800286a <_svfiprintf_r+0x112>
 8002860:	425b      	negs	r3, r3
 8002862:	60e3      	str	r3, [r4, #12]
 8002864:	2302      	movs	r3, #2
 8002866:	4313      	orrs	r3, r2
 8002868:	6023      	str	r3, [r4, #0]
 800286a:	782b      	ldrb	r3, [r5, #0]
 800286c:	2b2e      	cmp	r3, #46	; 0x2e
 800286e:	d10a      	bne.n	8002886 <_svfiprintf_r+0x12e>
 8002870:	786b      	ldrb	r3, [r5, #1]
 8002872:	2b2a      	cmp	r3, #42	; 0x2a
 8002874:	d135      	bne.n	80028e2 <_svfiprintf_r+0x18a>
 8002876:	9b07      	ldr	r3, [sp, #28]
 8002878:	3502      	adds	r5, #2
 800287a:	1d1a      	adds	r2, r3, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	9207      	str	r2, [sp, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db2b      	blt.n	80028dc <_svfiprintf_r+0x184>
 8002884:	9309      	str	r3, [sp, #36]	; 0x24
 8002886:	4e30      	ldr	r6, [pc, #192]	; (8002948 <_svfiprintf_r+0x1f0>)
 8002888:	2203      	movs	r2, #3
 800288a:	0030      	movs	r0, r6
 800288c:	7829      	ldrb	r1, [r5, #0]
 800288e:	f000 f9e5 	bl	8002c5c <memchr>
 8002892:	2800      	cmp	r0, #0
 8002894:	d006      	beq.n	80028a4 <_svfiprintf_r+0x14c>
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	1b80      	subs	r0, r0, r6
 800289a:	4083      	lsls	r3, r0
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	3501      	adds	r5, #1
 80028a0:	4313      	orrs	r3, r2
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	7829      	ldrb	r1, [r5, #0]
 80028a6:	2206      	movs	r2, #6
 80028a8:	4828      	ldr	r0, [pc, #160]	; (800294c <_svfiprintf_r+0x1f4>)
 80028aa:	1c6e      	adds	r6, r5, #1
 80028ac:	7621      	strb	r1, [r4, #24]
 80028ae:	f000 f9d5 	bl	8002c5c <memchr>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d03c      	beq.n	8002930 <_svfiprintf_r+0x1d8>
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <_svfiprintf_r+0x1f8>)
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d125      	bne.n	8002908 <_svfiprintf_r+0x1b0>
 80028bc:	2207      	movs	r2, #7
 80028be:	9b07      	ldr	r3, [sp, #28]
 80028c0:	3307      	adds	r3, #7
 80028c2:	4393      	bics	r3, r2
 80028c4:	3308      	adds	r3, #8
 80028c6:	9307      	str	r3, [sp, #28]
 80028c8:	6963      	ldr	r3, [r4, #20]
 80028ca:	9a04      	ldr	r2, [sp, #16]
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	6163      	str	r3, [r4, #20]
 80028d0:	e765      	b.n	800279e <_svfiprintf_r+0x46>
 80028d2:	4343      	muls	r3, r0
 80028d4:	0035      	movs	r5, r6
 80028d6:	2101      	movs	r1, #1
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	e7a6      	b.n	800282a <_svfiprintf_r+0xd2>
 80028dc:	2301      	movs	r3, #1
 80028de:	425b      	negs	r3, r3
 80028e0:	e7d0      	b.n	8002884 <_svfiprintf_r+0x12c>
 80028e2:	2300      	movs	r3, #0
 80028e4:	200a      	movs	r0, #10
 80028e6:	001a      	movs	r2, r3
 80028e8:	3501      	adds	r5, #1
 80028ea:	6063      	str	r3, [r4, #4]
 80028ec:	7829      	ldrb	r1, [r5, #0]
 80028ee:	1c6e      	adds	r6, r5, #1
 80028f0:	3930      	subs	r1, #48	; 0x30
 80028f2:	2909      	cmp	r1, #9
 80028f4:	d903      	bls.n	80028fe <_svfiprintf_r+0x1a6>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0c5      	beq.n	8002886 <_svfiprintf_r+0x12e>
 80028fa:	9209      	str	r2, [sp, #36]	; 0x24
 80028fc:	e7c3      	b.n	8002886 <_svfiprintf_r+0x12e>
 80028fe:	4342      	muls	r2, r0
 8002900:	0035      	movs	r5, r6
 8002902:	2301      	movs	r3, #1
 8002904:	1852      	adds	r2, r2, r1
 8002906:	e7f1      	b.n	80028ec <_svfiprintf_r+0x194>
 8002908:	ab07      	add	r3, sp, #28
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	003a      	movs	r2, r7
 800290e:	0021      	movs	r1, r4
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_svfiprintf_r+0x1fc>)
 8002912:	9803      	ldr	r0, [sp, #12]
 8002914:	e000      	b.n	8002918 <_svfiprintf_r+0x1c0>
 8002916:	bf00      	nop
 8002918:	9004      	str	r0, [sp, #16]
 800291a:	9b04      	ldr	r3, [sp, #16]
 800291c:	3301      	adds	r3, #1
 800291e:	d1d3      	bne.n	80028c8 <_svfiprintf_r+0x170>
 8002920:	89bb      	ldrh	r3, [r7, #12]
 8002922:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002924:	065b      	lsls	r3, r3, #25
 8002926:	d400      	bmi.n	800292a <_svfiprintf_r+0x1d2>
 8002928:	e72d      	b.n	8002786 <_svfiprintf_r+0x2e>
 800292a:	2001      	movs	r0, #1
 800292c:	4240      	negs	r0, r0
 800292e:	e72a      	b.n	8002786 <_svfiprintf_r+0x2e>
 8002930:	ab07      	add	r3, sp, #28
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	003a      	movs	r2, r7
 8002936:	0021      	movs	r1, r4
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <_svfiprintf_r+0x1fc>)
 800293a:	9803      	ldr	r0, [sp, #12]
 800293c:	f000 f87c 	bl	8002a38 <_printf_i>
 8002940:	e7ea      	b.n	8002918 <_svfiprintf_r+0x1c0>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	08002ef8 	.word	0x08002ef8
 8002948:	08002efe 	.word	0x08002efe
 800294c:	08002f02 	.word	0x08002f02
 8002950:	00000000 	.word	0x00000000
 8002954:	08002695 	.word	0x08002695

08002958 <_printf_common>:
 8002958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800295a:	0015      	movs	r5, r2
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	688a      	ldr	r2, [r1, #8]
 8002960:	690b      	ldr	r3, [r1, #16]
 8002962:	000c      	movs	r4, r1
 8002964:	9000      	str	r0, [sp, #0]
 8002966:	4293      	cmp	r3, r2
 8002968:	da00      	bge.n	800296c <_printf_common+0x14>
 800296a:	0013      	movs	r3, r2
 800296c:	0022      	movs	r2, r4
 800296e:	602b      	str	r3, [r5, #0]
 8002970:	3243      	adds	r2, #67	; 0x43
 8002972:	7812      	ldrb	r2, [r2, #0]
 8002974:	2a00      	cmp	r2, #0
 8002976:	d001      	beq.n	800297c <_printf_common+0x24>
 8002978:	3301      	adds	r3, #1
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	d502      	bpl.n	8002988 <_printf_common+0x30>
 8002982:	682b      	ldr	r3, [r5, #0]
 8002984:	3302      	adds	r3, #2
 8002986:	602b      	str	r3, [r5, #0]
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	2306      	movs	r3, #6
 800298c:	0017      	movs	r7, r2
 800298e:	401f      	ands	r7, r3
 8002990:	421a      	tst	r2, r3
 8002992:	d027      	beq.n	80029e4 <_printf_common+0x8c>
 8002994:	0023      	movs	r3, r4
 8002996:	3343      	adds	r3, #67	; 0x43
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	4193      	sbcs	r3, r2
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	0692      	lsls	r2, r2, #26
 80029a2:	d430      	bmi.n	8002a06 <_printf_common+0xae>
 80029a4:	0022      	movs	r2, r4
 80029a6:	9901      	ldr	r1, [sp, #4]
 80029a8:	9800      	ldr	r0, [sp, #0]
 80029aa:	9e08      	ldr	r6, [sp, #32]
 80029ac:	3243      	adds	r2, #67	; 0x43
 80029ae:	47b0      	blx	r6
 80029b0:	1c43      	adds	r3, r0, #1
 80029b2:	d025      	beq.n	8002a00 <_printf_common+0xa8>
 80029b4:	2306      	movs	r3, #6
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	682a      	ldr	r2, [r5, #0]
 80029ba:	68e1      	ldr	r1, [r4, #12]
 80029bc:	2500      	movs	r5, #0
 80029be:	4003      	ands	r3, r0
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d103      	bne.n	80029cc <_printf_common+0x74>
 80029c4:	1a8d      	subs	r5, r1, r2
 80029c6:	43eb      	mvns	r3, r5
 80029c8:	17db      	asrs	r3, r3, #31
 80029ca:	401d      	ands	r5, r3
 80029cc:	68a3      	ldr	r3, [r4, #8]
 80029ce:	6922      	ldr	r2, [r4, #16]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	dd01      	ble.n	80029d8 <_printf_common+0x80>
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	18ed      	adds	r5, r5, r3
 80029d8:	2700      	movs	r7, #0
 80029da:	42bd      	cmp	r5, r7
 80029dc:	d120      	bne.n	8002a20 <_printf_common+0xc8>
 80029de:	2000      	movs	r0, #0
 80029e0:	e010      	b.n	8002a04 <_printf_common+0xac>
 80029e2:	3701      	adds	r7, #1
 80029e4:	68e3      	ldr	r3, [r4, #12]
 80029e6:	682a      	ldr	r2, [r5, #0]
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	42bb      	cmp	r3, r7
 80029ec:	ddd2      	ble.n	8002994 <_printf_common+0x3c>
 80029ee:	0022      	movs	r2, r4
 80029f0:	2301      	movs	r3, #1
 80029f2:	9901      	ldr	r1, [sp, #4]
 80029f4:	9800      	ldr	r0, [sp, #0]
 80029f6:	9e08      	ldr	r6, [sp, #32]
 80029f8:	3219      	adds	r2, #25
 80029fa:	47b0      	blx	r6
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d1f0      	bne.n	80029e2 <_printf_common+0x8a>
 8002a00:	2001      	movs	r0, #1
 8002a02:	4240      	negs	r0, r0
 8002a04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a06:	2030      	movs	r0, #48	; 0x30
 8002a08:	18e1      	adds	r1, r4, r3
 8002a0a:	3143      	adds	r1, #67	; 0x43
 8002a0c:	7008      	strb	r0, [r1, #0]
 8002a0e:	0021      	movs	r1, r4
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	3145      	adds	r1, #69	; 0x45
 8002a14:	7809      	ldrb	r1, [r1, #0]
 8002a16:	18a2      	adds	r2, r4, r2
 8002a18:	3243      	adds	r2, #67	; 0x43
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	7011      	strb	r1, [r2, #0]
 8002a1e:	e7c1      	b.n	80029a4 <_printf_common+0x4c>
 8002a20:	0022      	movs	r2, r4
 8002a22:	2301      	movs	r3, #1
 8002a24:	9901      	ldr	r1, [sp, #4]
 8002a26:	9800      	ldr	r0, [sp, #0]
 8002a28:	9e08      	ldr	r6, [sp, #32]
 8002a2a:	321a      	adds	r2, #26
 8002a2c:	47b0      	blx	r6
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	d0e6      	beq.n	8002a00 <_printf_common+0xa8>
 8002a32:	3701      	adds	r7, #1
 8002a34:	e7d1      	b.n	80029da <_printf_common+0x82>
	...

08002a38 <_printf_i>:
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	9206      	str	r2, [sp, #24]
 8002a3e:	000a      	movs	r2, r1
 8002a40:	3243      	adds	r2, #67	; 0x43
 8002a42:	9307      	str	r3, [sp, #28]
 8002a44:	9005      	str	r0, [sp, #20]
 8002a46:	9204      	str	r2, [sp, #16]
 8002a48:	7e0a      	ldrb	r2, [r1, #24]
 8002a4a:	000c      	movs	r4, r1
 8002a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a4e:	2a78      	cmp	r2, #120	; 0x78
 8002a50:	d806      	bhi.n	8002a60 <_printf_i+0x28>
 8002a52:	2a62      	cmp	r2, #98	; 0x62
 8002a54:	d808      	bhi.n	8002a68 <_printf_i+0x30>
 8002a56:	2a00      	cmp	r2, #0
 8002a58:	d100      	bne.n	8002a5c <_printf_i+0x24>
 8002a5a:	e0c0      	b.n	8002bde <_printf_i+0x1a6>
 8002a5c:	2a58      	cmp	r2, #88	; 0x58
 8002a5e:	d052      	beq.n	8002b06 <_printf_i+0xce>
 8002a60:	0026      	movs	r6, r4
 8002a62:	3642      	adds	r6, #66	; 0x42
 8002a64:	7032      	strb	r2, [r6, #0]
 8002a66:	e022      	b.n	8002aae <_printf_i+0x76>
 8002a68:	0010      	movs	r0, r2
 8002a6a:	3863      	subs	r0, #99	; 0x63
 8002a6c:	2815      	cmp	r0, #21
 8002a6e:	d8f7      	bhi.n	8002a60 <_printf_i+0x28>
 8002a70:	f7fd fb4a 	bl	8000108 <__gnu_thumb1_case_shi>
 8002a74:	001f0016 	.word	0x001f0016
 8002a78:	fff6fff6 	.word	0xfff6fff6
 8002a7c:	fff6fff6 	.word	0xfff6fff6
 8002a80:	fff6001f 	.word	0xfff6001f
 8002a84:	fff6fff6 	.word	0xfff6fff6
 8002a88:	00a8fff6 	.word	0x00a8fff6
 8002a8c:	009a0036 	.word	0x009a0036
 8002a90:	fff6fff6 	.word	0xfff6fff6
 8002a94:	fff600b9 	.word	0xfff600b9
 8002a98:	fff60036 	.word	0xfff60036
 8002a9c:	009efff6 	.word	0x009efff6
 8002aa0:	0026      	movs	r6, r4
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	3642      	adds	r6, #66	; 0x42
 8002aa6:	1d11      	adds	r1, r2, #4
 8002aa8:	6019      	str	r1, [r3, #0]
 8002aaa:	6813      	ldr	r3, [r2, #0]
 8002aac:	7033      	strb	r3, [r6, #0]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a7      	b.n	8002c02 <_printf_i+0x1ca>
 8002ab2:	6808      	ldr	r0, [r1, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	1d0a      	adds	r2, r1, #4
 8002ab8:	0605      	lsls	r5, r0, #24
 8002aba:	d50b      	bpl.n	8002ad4 <_printf_i+0x9c>
 8002abc:	680d      	ldr	r5, [r1, #0]
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	da03      	bge.n	8002acc <_printf_i+0x94>
 8002ac4:	232d      	movs	r3, #45	; 0x2d
 8002ac6:	9a04      	ldr	r2, [sp, #16]
 8002ac8:	426d      	negs	r5, r5
 8002aca:	7013      	strb	r3, [r2, #0]
 8002acc:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <_printf_i+0x21c>)
 8002ace:	270a      	movs	r7, #10
 8002ad0:	9303      	str	r3, [sp, #12]
 8002ad2:	e032      	b.n	8002b3a <_printf_i+0x102>
 8002ad4:	680d      	ldr	r5, [r1, #0]
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	0641      	lsls	r1, r0, #25
 8002ada:	d5f1      	bpl.n	8002ac0 <_printf_i+0x88>
 8002adc:	b22d      	sxth	r5, r5
 8002ade:	e7ef      	b.n	8002ac0 <_printf_i+0x88>
 8002ae0:	680d      	ldr	r5, [r1, #0]
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	1d08      	adds	r0, r1, #4
 8002ae6:	6018      	str	r0, [r3, #0]
 8002ae8:	062e      	lsls	r6, r5, #24
 8002aea:	d501      	bpl.n	8002af0 <_printf_i+0xb8>
 8002aec:	680d      	ldr	r5, [r1, #0]
 8002aee:	e003      	b.n	8002af8 <_printf_i+0xc0>
 8002af0:	066d      	lsls	r5, r5, #25
 8002af2:	d5fb      	bpl.n	8002aec <_printf_i+0xb4>
 8002af4:	680d      	ldr	r5, [r1, #0]
 8002af6:	b2ad      	uxth	r5, r5
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <_printf_i+0x21c>)
 8002afa:	270a      	movs	r7, #10
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	2a6f      	cmp	r2, #111	; 0x6f
 8002b00:	d117      	bne.n	8002b32 <_printf_i+0xfa>
 8002b02:	2708      	movs	r7, #8
 8002b04:	e015      	b.n	8002b32 <_printf_i+0xfa>
 8002b06:	3145      	adds	r1, #69	; 0x45
 8002b08:	700a      	strb	r2, [r1, #0]
 8002b0a:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <_printf_i+0x21c>)
 8002b0c:	9203      	str	r2, [sp, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	6821      	ldr	r1, [r4, #0]
 8002b12:	ca20      	ldmia	r2!, {r5}
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	0608      	lsls	r0, r1, #24
 8002b18:	d550      	bpl.n	8002bbc <_printf_i+0x184>
 8002b1a:	07cb      	lsls	r3, r1, #31
 8002b1c:	d502      	bpl.n	8002b24 <_printf_i+0xec>
 8002b1e:	2320      	movs	r3, #32
 8002b20:	4319      	orrs	r1, r3
 8002b22:	6021      	str	r1, [r4, #0]
 8002b24:	2710      	movs	r7, #16
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	d103      	bne.n	8002b32 <_printf_i+0xfa>
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	6822      	ldr	r2, [r4, #0]
 8002b2e:	439a      	bics	r2, r3
 8002b30:	6022      	str	r2, [r4, #0]
 8002b32:	0023      	movs	r3, r4
 8002b34:	2200      	movs	r2, #0
 8002b36:	3343      	adds	r3, #67	; 0x43
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	6863      	ldr	r3, [r4, #4]
 8002b3c:	60a3      	str	r3, [r4, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db03      	blt.n	8002b4a <_printf_i+0x112>
 8002b42:	2204      	movs	r2, #4
 8002b44:	6821      	ldr	r1, [r4, #0]
 8002b46:	4391      	bics	r1, r2
 8002b48:	6021      	str	r1, [r4, #0]
 8002b4a:	2d00      	cmp	r5, #0
 8002b4c:	d102      	bne.n	8002b54 <_printf_i+0x11c>
 8002b4e:	9e04      	ldr	r6, [sp, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00c      	beq.n	8002b6e <_printf_i+0x136>
 8002b54:	9e04      	ldr	r6, [sp, #16]
 8002b56:	0028      	movs	r0, r5
 8002b58:	0039      	movs	r1, r7
 8002b5a:	f7fd fb65 	bl	8000228 <__aeabi_uidivmod>
 8002b5e:	9b03      	ldr	r3, [sp, #12]
 8002b60:	3e01      	subs	r6, #1
 8002b62:	5c5b      	ldrb	r3, [r3, r1]
 8002b64:	7033      	strb	r3, [r6, #0]
 8002b66:	002b      	movs	r3, r5
 8002b68:	0005      	movs	r5, r0
 8002b6a:	429f      	cmp	r7, r3
 8002b6c:	d9f3      	bls.n	8002b56 <_printf_i+0x11e>
 8002b6e:	2f08      	cmp	r7, #8
 8002b70:	d109      	bne.n	8002b86 <_printf_i+0x14e>
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	07db      	lsls	r3, r3, #31
 8002b76:	d506      	bpl.n	8002b86 <_printf_i+0x14e>
 8002b78:	6863      	ldr	r3, [r4, #4]
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	dc02      	bgt.n	8002b86 <_printf_i+0x14e>
 8002b80:	2330      	movs	r3, #48	; 0x30
 8002b82:	3e01      	subs	r6, #1
 8002b84:	7033      	strb	r3, [r6, #0]
 8002b86:	9b04      	ldr	r3, [sp, #16]
 8002b88:	1b9b      	subs	r3, r3, r6
 8002b8a:	6123      	str	r3, [r4, #16]
 8002b8c:	9b07      	ldr	r3, [sp, #28]
 8002b8e:	0021      	movs	r1, r4
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	9805      	ldr	r0, [sp, #20]
 8002b94:	9b06      	ldr	r3, [sp, #24]
 8002b96:	aa09      	add	r2, sp, #36	; 0x24
 8002b98:	f7ff fede 	bl	8002958 <_printf_common>
 8002b9c:	1c43      	adds	r3, r0, #1
 8002b9e:	d135      	bne.n	8002c0c <_printf_i+0x1d4>
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	4240      	negs	r0, r0
 8002ba4:	b00b      	add	sp, #44	; 0x2c
 8002ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba8:	2220      	movs	r2, #32
 8002baa:	6809      	ldr	r1, [r1, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	6022      	str	r2, [r4, #0]
 8002bb0:	0022      	movs	r2, r4
 8002bb2:	2178      	movs	r1, #120	; 0x78
 8002bb4:	3245      	adds	r2, #69	; 0x45
 8002bb6:	7011      	strb	r1, [r2, #0]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <_printf_i+0x220>)
 8002bba:	e7a7      	b.n	8002b0c <_printf_i+0xd4>
 8002bbc:	0648      	lsls	r0, r1, #25
 8002bbe:	d5ac      	bpl.n	8002b1a <_printf_i+0xe2>
 8002bc0:	b2ad      	uxth	r5, r5
 8002bc2:	e7aa      	b.n	8002b1a <_printf_i+0xe2>
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	680d      	ldr	r5, [r1, #0]
 8002bc8:	1d10      	adds	r0, r2, #4
 8002bca:	6949      	ldr	r1, [r1, #20]
 8002bcc:	6018      	str	r0, [r3, #0]
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	062e      	lsls	r6, r5, #24
 8002bd2:	d501      	bpl.n	8002bd8 <_printf_i+0x1a0>
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <_printf_i+0x1a6>
 8002bd8:	066d      	lsls	r5, r5, #25
 8002bda:	d5fb      	bpl.n	8002bd4 <_printf_i+0x19c>
 8002bdc:	8019      	strh	r1, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9e04      	ldr	r6, [sp, #16]
 8002be2:	6123      	str	r3, [r4, #16]
 8002be4:	e7d2      	b.n	8002b8c <_printf_i+0x154>
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	1d11      	adds	r1, r2, #4
 8002bea:	6019      	str	r1, [r3, #0]
 8002bec:	6816      	ldr	r6, [r2, #0]
 8002bee:	2100      	movs	r1, #0
 8002bf0:	0030      	movs	r0, r6
 8002bf2:	6862      	ldr	r2, [r4, #4]
 8002bf4:	f000 f832 	bl	8002c5c <memchr>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d001      	beq.n	8002c00 <_printf_i+0x1c8>
 8002bfc:	1b80      	subs	r0, r0, r6
 8002bfe:	6060      	str	r0, [r4, #4]
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	6123      	str	r3, [r4, #16]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9a04      	ldr	r2, [sp, #16]
 8002c08:	7013      	strb	r3, [r2, #0]
 8002c0a:	e7bf      	b.n	8002b8c <_printf_i+0x154>
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	0032      	movs	r2, r6
 8002c10:	9906      	ldr	r1, [sp, #24]
 8002c12:	9805      	ldr	r0, [sp, #20]
 8002c14:	9d07      	ldr	r5, [sp, #28]
 8002c16:	47a8      	blx	r5
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	d0c1      	beq.n	8002ba0 <_printf_i+0x168>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	079b      	lsls	r3, r3, #30
 8002c20:	d415      	bmi.n	8002c4e <_printf_i+0x216>
 8002c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c24:	68e0      	ldr	r0, [r4, #12]
 8002c26:	4298      	cmp	r0, r3
 8002c28:	dabc      	bge.n	8002ba4 <_printf_i+0x16c>
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	e7ba      	b.n	8002ba4 <_printf_i+0x16c>
 8002c2e:	0022      	movs	r2, r4
 8002c30:	2301      	movs	r3, #1
 8002c32:	9906      	ldr	r1, [sp, #24]
 8002c34:	9805      	ldr	r0, [sp, #20]
 8002c36:	9e07      	ldr	r6, [sp, #28]
 8002c38:	3219      	adds	r2, #25
 8002c3a:	47b0      	blx	r6
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d0af      	beq.n	8002ba0 <_printf_i+0x168>
 8002c40:	3501      	adds	r5, #1
 8002c42:	68e3      	ldr	r3, [r4, #12]
 8002c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	42ab      	cmp	r3, r5
 8002c4a:	dcf0      	bgt.n	8002c2e <_printf_i+0x1f6>
 8002c4c:	e7e9      	b.n	8002c22 <_printf_i+0x1ea>
 8002c4e:	2500      	movs	r5, #0
 8002c50:	e7f7      	b.n	8002c42 <_printf_i+0x20a>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	08002f09 	.word	0x08002f09
 8002c58:	08002f1a 	.word	0x08002f1a

08002c5c <memchr>:
 8002c5c:	b2c9      	uxtb	r1, r1
 8002c5e:	1882      	adds	r2, r0, r2
 8002c60:	4290      	cmp	r0, r2
 8002c62:	d101      	bne.n	8002c68 <memchr+0xc>
 8002c64:	2000      	movs	r0, #0
 8002c66:	4770      	bx	lr
 8002c68:	7803      	ldrb	r3, [r0, #0]
 8002c6a:	428b      	cmp	r3, r1
 8002c6c:	d0fb      	beq.n	8002c66 <memchr+0xa>
 8002c6e:	3001      	adds	r0, #1
 8002c70:	e7f6      	b.n	8002c60 <memchr+0x4>

08002c72 <memcpy>:
 8002c72:	2300      	movs	r3, #0
 8002c74:	b510      	push	{r4, lr}
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d100      	bne.n	8002c7c <memcpy+0xa>
 8002c7a:	bd10      	pop	{r4, pc}
 8002c7c:	5ccc      	ldrb	r4, [r1, r3]
 8002c7e:	54c4      	strb	r4, [r0, r3]
 8002c80:	3301      	adds	r3, #1
 8002c82:	e7f8      	b.n	8002c76 <memcpy+0x4>

08002c84 <memmove>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4288      	cmp	r0, r1
 8002c88:	d902      	bls.n	8002c90 <memmove+0xc>
 8002c8a:	188b      	adds	r3, r1, r2
 8002c8c:	4298      	cmp	r0, r3
 8002c8e:	d303      	bcc.n	8002c98 <memmove+0x14>
 8002c90:	2300      	movs	r3, #0
 8002c92:	e007      	b.n	8002ca4 <memmove+0x20>
 8002c94:	5c8b      	ldrb	r3, [r1, r2]
 8002c96:	5483      	strb	r3, [r0, r2]
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	d2fb      	bcs.n	8002c94 <memmove+0x10>
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	5ccc      	ldrb	r4, [r1, r3]
 8002ca0:	54c4      	strb	r4, [r0, r3]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d1fa      	bne.n	8002c9e <memmove+0x1a>
 8002ca8:	e7f8      	b.n	8002c9c <memmove+0x18>
	...

08002cac <_free_r>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	0005      	movs	r5, r0
 8002cb0:	2900      	cmp	r1, #0
 8002cb2:	d010      	beq.n	8002cd6 <_free_r+0x2a>
 8002cb4:	1f0c      	subs	r4, r1, #4
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da00      	bge.n	8002cbe <_free_r+0x12>
 8002cbc:	18e4      	adds	r4, r4, r3
 8002cbe:	0028      	movs	r0, r5
 8002cc0:	f000 f8d4 	bl	8002e6c <__malloc_lock>
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <_free_r+0x90>)
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <_free_r+0x2c>
 8002ccc:	6063      	str	r3, [r4, #4]
 8002cce:	6014      	str	r4, [r2, #0]
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	f000 f8d3 	bl	8002e7c <__malloc_unlock>
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d908      	bls.n	8002cee <_free_r+0x42>
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	1860      	adds	r0, r4, r1
 8002ce0:	4283      	cmp	r3, r0
 8002ce2:	d1f3      	bne.n	8002ccc <_free_r+0x20>
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	1841      	adds	r1, r0, r1
 8002cea:	6021      	str	r1, [r4, #0]
 8002cec:	e7ee      	b.n	8002ccc <_free_r+0x20>
 8002cee:	001a      	movs	r2, r3
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <_free_r+0x4e>
 8002cf6:	42a3      	cmp	r3, r4
 8002cf8:	d9f9      	bls.n	8002cee <_free_r+0x42>
 8002cfa:	6811      	ldr	r1, [r2, #0]
 8002cfc:	1850      	adds	r0, r2, r1
 8002cfe:	42a0      	cmp	r0, r4
 8002d00:	d10b      	bne.n	8002d1a <_free_r+0x6e>
 8002d02:	6820      	ldr	r0, [r4, #0]
 8002d04:	1809      	adds	r1, r1, r0
 8002d06:	1850      	adds	r0, r2, r1
 8002d08:	6011      	str	r1, [r2, #0]
 8002d0a:	4283      	cmp	r3, r0
 8002d0c:	d1e0      	bne.n	8002cd0 <_free_r+0x24>
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	1841      	adds	r1, r0, r1
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	6053      	str	r3, [r2, #4]
 8002d18:	e7da      	b.n	8002cd0 <_free_r+0x24>
 8002d1a:	42a0      	cmp	r0, r4
 8002d1c:	d902      	bls.n	8002d24 <_free_r+0x78>
 8002d1e:	230c      	movs	r3, #12
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	e7d5      	b.n	8002cd0 <_free_r+0x24>
 8002d24:	6821      	ldr	r1, [r4, #0]
 8002d26:	1860      	adds	r0, r4, r1
 8002d28:	4283      	cmp	r3, r0
 8002d2a:	d103      	bne.n	8002d34 <_free_r+0x88>
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	1841      	adds	r1, r0, r1
 8002d32:	6021      	str	r1, [r4, #0]
 8002d34:	6063      	str	r3, [r4, #4]
 8002d36:	6054      	str	r4, [r2, #4]
 8002d38:	e7ca      	b.n	8002cd0 <_free_r+0x24>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	200000b8 	.word	0x200000b8

08002d40 <_malloc_r>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	2303      	movs	r3, #3
 8002d44:	1ccd      	adds	r5, r1, #3
 8002d46:	439d      	bics	r5, r3
 8002d48:	3508      	adds	r5, #8
 8002d4a:	0006      	movs	r6, r0
 8002d4c:	2d0c      	cmp	r5, #12
 8002d4e:	d21f      	bcs.n	8002d90 <_malloc_r+0x50>
 8002d50:	250c      	movs	r5, #12
 8002d52:	42a9      	cmp	r1, r5
 8002d54:	d81e      	bhi.n	8002d94 <_malloc_r+0x54>
 8002d56:	0030      	movs	r0, r6
 8002d58:	f000 f888 	bl	8002e6c <__malloc_lock>
 8002d5c:	4925      	ldr	r1, [pc, #148]	; (8002df4 <_malloc_r+0xb4>)
 8002d5e:	680a      	ldr	r2, [r1, #0]
 8002d60:	0014      	movs	r4, r2
 8002d62:	2c00      	cmp	r4, #0
 8002d64:	d11a      	bne.n	8002d9c <_malloc_r+0x5c>
 8002d66:	4f24      	ldr	r7, [pc, #144]	; (8002df8 <_malloc_r+0xb8>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <_malloc_r+0x38>
 8002d6e:	0021      	movs	r1, r4
 8002d70:	0030      	movs	r0, r6
 8002d72:	f000 f869 	bl	8002e48 <_sbrk_r>
 8002d76:	6038      	str	r0, [r7, #0]
 8002d78:	0029      	movs	r1, r5
 8002d7a:	0030      	movs	r0, r6
 8002d7c:	f000 f864 	bl	8002e48 <_sbrk_r>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	d12b      	bne.n	8002ddc <_malloc_r+0x9c>
 8002d84:	230c      	movs	r3, #12
 8002d86:	0030      	movs	r0, r6
 8002d88:	6033      	str	r3, [r6, #0]
 8002d8a:	f000 f877 	bl	8002e7c <__malloc_unlock>
 8002d8e:	e003      	b.n	8002d98 <_malloc_r+0x58>
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	dade      	bge.n	8002d52 <_malloc_r+0x12>
 8002d94:	230c      	movs	r3, #12
 8002d96:	6033      	str	r3, [r6, #0]
 8002d98:	2000      	movs	r0, #0
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	1b5b      	subs	r3, r3, r5
 8002da0:	d419      	bmi.n	8002dd6 <_malloc_r+0x96>
 8002da2:	2b0b      	cmp	r3, #11
 8002da4:	d903      	bls.n	8002dae <_malloc_r+0x6e>
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	18e4      	adds	r4, r4, r3
 8002daa:	6025      	str	r5, [r4, #0]
 8002dac:	e003      	b.n	8002db6 <_malloc_r+0x76>
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	42a2      	cmp	r2, r4
 8002db2:	d10e      	bne.n	8002dd2 <_malloc_r+0x92>
 8002db4:	600b      	str	r3, [r1, #0]
 8002db6:	0030      	movs	r0, r6
 8002db8:	f000 f860 	bl	8002e7c <__malloc_unlock>
 8002dbc:	0020      	movs	r0, r4
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	300b      	adds	r0, #11
 8002dc2:	1d23      	adds	r3, r4, #4
 8002dc4:	4390      	bics	r0, r2
 8002dc6:	1ac2      	subs	r2, r0, r3
 8002dc8:	4298      	cmp	r0, r3
 8002dca:	d0e6      	beq.n	8002d9a <_malloc_r+0x5a>
 8002dcc:	1a1b      	subs	r3, r3, r0
 8002dce:	50a3      	str	r3, [r4, r2]
 8002dd0:	e7e3      	b.n	8002d9a <_malloc_r+0x5a>
 8002dd2:	6053      	str	r3, [r2, #4]
 8002dd4:	e7ef      	b.n	8002db6 <_malloc_r+0x76>
 8002dd6:	0022      	movs	r2, r4
 8002dd8:	6864      	ldr	r4, [r4, #4]
 8002dda:	e7c2      	b.n	8002d62 <_malloc_r+0x22>
 8002ddc:	2303      	movs	r3, #3
 8002dde:	1cc4      	adds	r4, r0, #3
 8002de0:	439c      	bics	r4, r3
 8002de2:	42a0      	cmp	r0, r4
 8002de4:	d0e1      	beq.n	8002daa <_malloc_r+0x6a>
 8002de6:	1a21      	subs	r1, r4, r0
 8002de8:	0030      	movs	r0, r6
 8002dea:	f000 f82d 	bl	8002e48 <_sbrk_r>
 8002dee:	1c43      	adds	r3, r0, #1
 8002df0:	d1db      	bne.n	8002daa <_malloc_r+0x6a>
 8002df2:	e7c7      	b.n	8002d84 <_malloc_r+0x44>
 8002df4:	200000b8 	.word	0x200000b8
 8002df8:	200000bc 	.word	0x200000bc

08002dfc <_realloc_r>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	0007      	movs	r7, r0
 8002e00:	000d      	movs	r5, r1
 8002e02:	0016      	movs	r6, r2
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d105      	bne.n	8002e14 <_realloc_r+0x18>
 8002e08:	0011      	movs	r1, r2
 8002e0a:	f7ff ff99 	bl	8002d40 <_malloc_r>
 8002e0e:	0004      	movs	r4, r0
 8002e10:	0020      	movs	r0, r4
 8002e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d103      	bne.n	8002e20 <_realloc_r+0x24>
 8002e18:	f7ff ff48 	bl	8002cac <_free_r>
 8002e1c:	0034      	movs	r4, r6
 8002e1e:	e7f7      	b.n	8002e10 <_realloc_r+0x14>
 8002e20:	f000 f834 	bl	8002e8c <_malloc_usable_size_r>
 8002e24:	002c      	movs	r4, r5
 8002e26:	42b0      	cmp	r0, r6
 8002e28:	d2f2      	bcs.n	8002e10 <_realloc_r+0x14>
 8002e2a:	0031      	movs	r1, r6
 8002e2c:	0038      	movs	r0, r7
 8002e2e:	f7ff ff87 	bl	8002d40 <_malloc_r>
 8002e32:	1e04      	subs	r4, r0, #0
 8002e34:	d0ec      	beq.n	8002e10 <_realloc_r+0x14>
 8002e36:	0029      	movs	r1, r5
 8002e38:	0032      	movs	r2, r6
 8002e3a:	f7ff ff1a 	bl	8002c72 <memcpy>
 8002e3e:	0029      	movs	r1, r5
 8002e40:	0038      	movs	r0, r7
 8002e42:	f7ff ff33 	bl	8002cac <_free_r>
 8002e46:	e7e3      	b.n	8002e10 <_realloc_r+0x14>

08002e48 <_sbrk_r>:
 8002e48:	2300      	movs	r3, #0
 8002e4a:	b570      	push	{r4, r5, r6, lr}
 8002e4c:	4d06      	ldr	r5, [pc, #24]	; (8002e68 <_sbrk_r+0x20>)
 8002e4e:	0004      	movs	r4, r0
 8002e50:	0008      	movs	r0, r1
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f7fd fe8c 	bl	8000b70 <_sbrk>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_sbrk_r+0x1c>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d000      	beq.n	8002e64 <_sbrk_r+0x1c>
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20000158 	.word	0x20000158

08002e6c <__malloc_lock>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4802      	ldr	r0, [pc, #8]	; (8002e78 <__malloc_lock+0xc>)
 8002e70:	f000 f814 	bl	8002e9c <__retarget_lock_acquire_recursive>
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	20000160 	.word	0x20000160

08002e7c <__malloc_unlock>:
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	4802      	ldr	r0, [pc, #8]	; (8002e88 <__malloc_unlock+0xc>)
 8002e80:	f000 f80d 	bl	8002e9e <__retarget_lock_release_recursive>
 8002e84:	bd10      	pop	{r4, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000160 	.word	0x20000160

08002e8c <_malloc_usable_size_r>:
 8002e8c:	1f0b      	subs	r3, r1, #4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1f18      	subs	r0, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da01      	bge.n	8002e9a <_malloc_usable_size_r+0xe>
 8002e96:	580b      	ldr	r3, [r1, r0]
 8002e98:	18c0      	adds	r0, r0, r3
 8002e9a:	4770      	bx	lr

08002e9c <__retarget_lock_acquire_recursive>:
 8002e9c:	4770      	bx	lr

08002e9e <__retarget_lock_release_recursive>:
 8002e9e:	4770      	bx	lr

08002ea0 <_init>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

08002eac <_fini>:
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb2:	bc08      	pop	{r3}
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4770      	bx	lr
