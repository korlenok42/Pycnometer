
Pycnometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002e58  08002e58  00012e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000084  08002f58  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002f58  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009447  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018db  00000000  00000000  000294f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f958  00000000  00000000  0002bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6d1  00000000  00000000  0003b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060e9a  00000000  00000000  00045f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  000a6e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e40 	.word	0x08002e40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08002e40 	.word	0x08002e40

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t ReadADCvalue;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == Start_Pin) TimerFlag = 1;
 8000240:	1dbb      	adds	r3, r7, #6
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2b02      	cmp	r3, #2
 8000246:	d103      	bne.n	8000250 <HAL_GPIO_EXTI_Callback+0x1c>
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <HAL_GPIO_EXTI_Callback+0x4c>)
 800024a:	2201      	movs	r2, #1
 800024c:	601a      	str	r2, [r3, #0]

    __NOP();

  }

}
 800024e:	e013      	b.n	8000278 <HAL_GPIO_EXTI_Callback+0x44>
  else if(GPIO_Pin == Stop_Pin) {
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d10e      	bne.n	8000276 <HAL_GPIO_EXTI_Callback+0x42>
	  TimerFlag = 0;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_GPIO_EXTI_Callback+0x4c>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
	  TimerCounter = TimStart;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <HAL_GPIO_EXTI_Callback+0x50>)
 8000260:	220f      	movs	r2, #15
 8000262:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(OUTPUT_GPIO_Port, OUTPUT_Pin, RESET);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	00d9      	lsls	r1, r3, #3
 8000268:	2390      	movs	r3, #144	; 0x90
 800026a:	05db      	lsls	r3, r3, #23
 800026c:	2200      	movs	r2, #0
 800026e:	0018      	movs	r0, r3
 8000270:	f000 ff5e 	bl	8001130 <HAL_GPIO_WritePin>
}
 8000274:	e000      	b.n	8000278 <HAL_GPIO_EXTI_Callback+0x44>
    __NOP();
 8000276:	46c0      	nop			; (mov r8, r8)
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}
 8000280:	200000a4 	.word	0x200000a4
 8000284:	20000010 	.word	0x20000010

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 fca6 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f85c 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f000 f94e 	bl	8000534 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000298:	f000 f8ea 	bl	8000470 <MX_TIM3_Init>
  MX_TIM2_Init();
 800029c:	f000 f896 	bl	80003cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <main+0xa0>)
 80002a2:	213c      	movs	r1, #60	; 0x3c
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 fd0d 	bl	8001cc4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <main+0xa4>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 fc15 	bl	8001adc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(DIG3_GPIO_Port, DIG3_Pin, SET);
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <main+0xa8>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	2102      	movs	r1, #2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 ff39 	bl	8001130 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIG4_GPIO_Port, DIG4_Pin, SET);
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <main+0xa8>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	2101      	movs	r1, #1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 ff33 	bl	8001130 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  Enc_Counter = TIM3->CNT;
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0xac>)
 80002cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <main+0xb0>)
 80002d2:	701a      	strb	r2, [r3, #0]

	  if(!LEDsFlag && (LED_Counter < DIGITS_NUM))
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <main+0xb4>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d116      	bne.n	800030a <main+0x82>
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <main+0xb8>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b01      	cmp	r3, #1
 80002e2:	d812      	bhi.n	800030a <main+0x82>
	  {
		  LEDsFlag = 1;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <main+0xb4>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]

		  if(StartFlag) SEG_LCD_Process(LED_Counter);
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <main+0xbc>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d004      	beq.n	80002fc <main+0x74>
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <main+0xb8>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 faac 	bl	8000854 <SEG_LCD_Process>
		  if(!StartFlag) StartFlag = 1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <main+0xbc>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d102      	bne.n	800030a <main+0x82>
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <main+0xbc>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	  }

	  if(EncoderFlag)
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <main+0xc0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0db      	beq.n	80002ca <main+0x42>
	  {
		  SEG_LCD_WriteNumber(Enc_Counter/2);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <main+0xb0>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	085b      	lsrs	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	0018      	movs	r0, r3
 800031c:	f000 fa84 	bl	8000828 <SEG_LCD_WriteNumber>
		  EncoderFlag = 0;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <main+0xc0>)
 8000322:	2200      	movs	r2, #0
 8000324:	701a      	strb	r2, [r3, #0]
	  Enc_Counter = TIM3->CNT;
 8000326:	e7d0      	b.n	80002ca <main+0x42>
 8000328:	200000c0 	.word	0x200000c0
 800032c:	20000108 	.word	0x20000108
 8000330:	48001400 	.word	0x48001400
 8000334:	40000400 	.word	0x40000400
 8000338:	200000a0 	.word	0x200000a0
 800033c:	200000a8 	.word	0x200000a8
 8000340:	200000b2 	.word	0x200000b2
 8000344:	200000a2 	.word	0x200000a2
 8000348:	200000a3 	.word	0x200000a3

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	b091      	sub	sp, #68	; 0x44
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	2410      	movs	r4, #16
 8000354:	193b      	adds	r3, r7, r4
 8000356:	0018      	movs	r0, r3
 8000358:	2330      	movs	r3, #48	; 0x30
 800035a:	001a      	movs	r2, r3
 800035c:	2100      	movs	r1, #0
 800035e:	f002 f92d 	bl	80025bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2310      	movs	r3, #16
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f002 f926 	bl	80025bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000370:	0021      	movs	r1, r4
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2202      	movs	r2, #2
 8000376:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2201      	movs	r2, #1
 800037c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	187b      	adds	r3, r7, r1
 8000380:	2210      	movs	r2, #16
 8000382:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000384:	187b      	adds	r3, r7, r1
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	187b      	adds	r3, r7, r1
 800038c:	0018      	movs	r0, r3
 800038e:	f000 ff09 	bl	80011a4 <HAL_RCC_OscConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000396:	f000 f95b 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	003b      	movs	r3, r7
 800039c:	2207      	movs	r2, #7
 800039e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	003b      	movs	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b2:	003b      	movs	r3, r7
 80003b4:	2100      	movs	r1, #0
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fa0e 	bl	80017d8 <HAL_RCC_ClockConfig>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80003c0:	f000 f946 	bl	8000650 <Error_Handler>
  }
}
 80003c4:	46c0      	nop			; (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b011      	add	sp, #68	; 0x44
 80003ca:	bd90      	pop	{r4, r7, pc}

080003cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2308      	movs	r3, #8
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 f8ed 	bl	80025bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	003b      	movs	r3, r7
 80003e4:	0018      	movs	r0, r3
 80003e6:	2308      	movs	r3, #8
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f002 f8e6 	bl	80025bc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_TIM2_Init+0xa0>)
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	05d2      	lsls	r2, r2, #23
 80003f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_TIM2_Init+0xa0>)
 80003fa:	2263      	movs	r2, #99	; 0x63
 80003fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_TIM2_Init+0xa0>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_TIM2_Init+0xa0>)
 8000406:	2227      	movs	r2, #39	; 0x27
 8000408:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_TIM2_Init+0xa0>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_TIM2_Init+0xa0>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_TIM2_Init+0xa0>)
 8000418:	0018      	movs	r0, r3
 800041a:	f001 fb0f 	bl	8001a3c <HAL_TIM_Base_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000422:	f000 f915 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000426:	2108      	movs	r1, #8
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	0152      	lsls	r2, r2, #5
 800042e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000430:	187a      	adds	r2, r7, r1
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_TIM2_Init+0xa0>)
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fdfe 	bl	8002038 <HAL_TIM_ConfigClockSource>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000440:	f000 f906 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044a:	003b      	movs	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000450:	003a      	movs	r2, r7
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_TIM2_Init+0xa0>)
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f002 f81e 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000460:	f000 f8f6 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b006      	add	sp, #24
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000108 	.word	0x20000108

08000470 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b08d      	sub	sp, #52	; 0x34
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000476:	240c      	movs	r4, #12
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2324      	movs	r3, #36	; 0x24
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f002 f89b 	bl	80025bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	0018      	movs	r0, r3
 800048a:	2308      	movs	r3, #8
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f002 f894 	bl	80025bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_TIM3_Init+0xbc>)
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <MX_TIM3_Init+0xc0>)
 8000498:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_TIM3_Init+0xbc>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_TIM3_Init+0xbc>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 198;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_TIM3_Init+0xbc>)
 80004a8:	22c6      	movs	r2, #198	; 0xc6
 80004aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_TIM3_Init+0xbc>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_TIM3_Init+0xbc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2201      	movs	r2, #1
 80004e2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80004f0:	187a      	adds	r2, r7, r1
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_TIM3_Init+0xbc>)
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 fb3c 	bl	8001b74 <HAL_TIM_Encoder_Init>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000500:	f000 f8a6 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000510:	1d3a      	adds	r2, r7, #4
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_TIM3_Init+0xbc>)
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f001 ffbe 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000520:	f000 f896 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b00d      	add	sp, #52	; 0x34
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	200000c0 	.word	0x200000c0
 8000530:	40000400 	.word	0x40000400

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b089      	sub	sp, #36	; 0x24
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	240c      	movs	r4, #12
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 f839 	bl	80025bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <MX_GPIO_Init+0x114>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <MX_GPIO_Init+0x114>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	03c9      	lsls	r1, r1, #15
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <MX_GPIO_Init+0x114>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	03db      	lsls	r3, r3, #15
 8000560:	4013      	ands	r3, r2
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <MX_GPIO_Init+0x114>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <MX_GPIO_Init+0x114>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <MX_GPIO_Init+0x114>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIG4_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <MX_GPIO_Init+0x118>)
 8000584:	2200      	movs	r2, #0
 8000586:	2103      	movs	r1, #3
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fdd1 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin, GPIO_PIN_RESET);
 800058e:	2387      	movs	r3, #135	; 0x87
 8000590:	00d9      	lsls	r1, r3, #3
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2200      	movs	r2, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fdc9 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIG4_Pin DIG3_Pin */
  GPIO_InitStruct.Pin = DIG4_Pin|DIG3_Pin;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2203      	movs	r2, #3
 80005a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	4a24      	ldr	r2, [pc, #144]	; (800064c <MX_GPIO_Init+0x118>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	0010      	movs	r0, r2
 80005be:	f000 fc4f 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Pin */
  GPIO_InitStruct.Pin = Stop_Pin;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2284      	movs	r2, #132	; 0x84
 80005cc:	0392      	lsls	r2, r2, #14
 80005ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2202      	movs	r2, #2
 80005d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Stop_GPIO_Port, &GPIO_InitStruct);
 80005d6:	193a      	adds	r2, r7, r4
 80005d8:	2390      	movs	r3, #144	; 0x90
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fc3e 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Start_Pin */
  GPIO_InitStruct.Pin = Start_Pin;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2202      	movs	r2, #2
 80005e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2288      	movs	r2, #136	; 0x88
 80005ee:	0352      	lsls	r2, r2, #13
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2202      	movs	r2, #2
 80005f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Start_GPIO_Port, &GPIO_InitStruct);
 80005f8:	193a      	adds	r2, r7, r4
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fc2d 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DS_Pin Latch_Pin OUTPUT_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DS_Pin|Latch_Pin|OUTPUT_Pin;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2287      	movs	r2, #135	; 0x87
 800060c:	00d2      	lsls	r2, r2, #3
 800060e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	187a      	adds	r2, r7, r1
 8000624:	2390      	movs	r3, #144	; 0x90
 8000626:	05db      	lsls	r3, r3, #23
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fc18 	bl	8000e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2005      	movs	r0, #5
 8000636:	f000 fbe1 	bl	8000dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fbf3 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b009      	add	sp, #36	; 0x24
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48001400 	.word	0x48001400

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HC595SendData>:
static uint8_t currentDigitIndex = 0;

/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void HC595SendData(uint8_t dig_num, uint8_t reg_count)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	0002      	movs	r2, r0
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	1dbb      	adds	r3, r7, #6
 800066a:	1c0a      	adds	r2, r1, #0
 800066c:	701a      	strb	r2, [r3, #0]
   /* - STEP1, serial input pin*/
   if ((currentCharacters[dig_num] & (1 << reg_count)) != 0 )
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <HC595SendData+0x60>)
 8000674:	5cd3      	ldrb	r3, [r2, r3]
 8000676:	001a      	movs	r2, r3
 8000678:	1dbb      	adds	r3, r7, #6
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	411a      	asrs	r2, r3
 800067e:	0013      	movs	r3, r2
 8000680:	2201      	movs	r2, #1
 8000682:	4013      	ands	r3, r2
 8000684:	d007      	beq.n	8000696 <HC595SendData+0x3a>
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2201      	movs	r2, #1
 800068c:	2110      	movs	r1, #16
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fd4e 	bl	8001130 <HAL_GPIO_WritePin>
 8000694:	e006      	b.n	80006a4 <HC595SendData+0x48>
   else
     HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2110      	movs	r1, #16
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fd46 	bl	8001130 <HAL_GPIO_WritePin>

    /* - STEP2, SHCP occurs once, 74HC595 will get current data from the DS pin */
    HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_RESET);
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2200      	movs	r2, #0
 80006aa:	2108      	movs	r1, #8
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 fd3f 	bl	8001130 <HAL_GPIO_WritePin>

  /* - STEP3, after all the 8-bit data of the shift register is over, the rising edge of the latch clock pin (first pull low level is high) */
/*  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
  HAL_Delay(4);
  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);*/
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200000ac 	.word	0x200000ac

080006c0 <SetOutput>:

/*----------------------------------------------------------------------------*/
static void SetOutput(McuPin output, uint8_t state)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	2408      	movs	r4, #8
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	6059      	str	r1, [r3, #4]
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(output.port, output.pin, (GPIO_PinState)state);
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	8899      	ldrh	r1, [r3, #4]
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	001a      	movs	r2, r3
 80006e0:	f000 fd26 	bl	8001130 <HAL_GPIO_WritePin>
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	b005      	add	sp, #20
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <SEG_LCD_WriteString>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteString(char* str)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint8_t currentDigitIndex = 0;
 80006f4:	230f      	movs	r3, #15
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 80006fc:	230e      	movs	r3, #14
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e00f      	b.n	8000726 <SEG_LCD_WriteString+0x3a>
  {
    currentCharacters[i] = 0x00;
 8000706:	200e      	movs	r0, #14
 8000708:	183b      	adds	r3, r7, r0
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4a43      	ldr	r2, [pc, #268]	; (800081c <SEG_LCD_WriteString+0x130>)
 800070e:	2100      	movs	r1, #0
 8000710:	54d1      	strb	r1, [r2, r3]
    currentDots[i] = 0;
 8000712:	183b      	adds	r3, r7, r0
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4a42      	ldr	r2, [pc, #264]	; (8000820 <SEG_LCD_WriteString+0x134>)
 8000718:	2100      	movs	r1, #0
 800071a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 800071c:	183b      	adds	r3, r7, r0
 800071e:	781a      	ldrb	r2, [r3, #0]
 8000720:	183b      	adds	r3, r7, r0
 8000722:	3201      	adds	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
 8000726:	230e      	movs	r3, #14
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d9ea      	bls.n	8000706 <SEG_LCD_WriteString+0x1a>
  }
  while(*str != '\0')
 8000730:	e023      	b.n	800077a <SEG_LCD_WriteString+0x8e>
  {
	  if ((*str >= ASCII_NUMBER_FIRST_CODE) && (*str <= ASCII_NUMBER_LAST_CODE))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b2f      	cmp	r3, #47	; 0x2f
 8000738:	d917      	bls.n	800076a <SEG_LCD_WriteString+0x7e>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b39      	cmp	r3, #57	; 0x39
 8000740:	d813      	bhi.n	800076a <SEG_LCD_WriteString+0x7e>
	  {
		  uint8_t currentCharacterIndex = (*str - ASCII_NUMBER_FIRST_CODE);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	210b      	movs	r1, #11
 8000748:	187b      	adds	r3, r7, r1
 800074a:	3a30      	subs	r2, #48	; 0x30
 800074c:	701a      	strb	r2, [r3, #0]
		  currentCharacters[currentDigitIndex] = charactersTable[currentCharacterIndex];
 800074e:	187b      	adds	r3, r7, r1
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	200f      	movs	r0, #15
 8000754:	183b      	adds	r3, r7, r0
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4932      	ldr	r1, [pc, #200]	; (8000824 <SEG_LCD_WriteString+0x138>)
 800075a:	5c89      	ldrb	r1, [r1, r2]
 800075c:	4a2f      	ldr	r2, [pc, #188]	; (800081c <SEG_LCD_WriteString+0x130>)
 800075e:	54d1      	strb	r1, [r2, r3]
		  currentDigitIndex++;
 8000760:	183b      	adds	r3, r7, r0
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	183b      	adds	r3, r7, r0
 8000766:	3201      	adds	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
	  }

	  if (currentDigitIndex == DIGITS_NUM)
 800076a:	230f      	movs	r3, #15
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b02      	cmp	r3, #2
 8000772:	d007      	beq.n	8000784 <SEG_LCD_WriteString+0x98>
	  {
		 break;
	  }
	  str++;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
  while(*str != '\0')
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1d7      	bne.n	8000732 <SEG_LCD_WriteString+0x46>
 8000782:	e000      	b.n	8000786 <SEG_LCD_WriteString+0x9a>
		 break;
 8000784:	46c0      	nop			; (mov r8, r8)
  }

  if (currentDigitIndex < DIGITS_NUM)
 8000786:	220f      	movs	r2, #15
 8000788:	18bb      	adds	r3, r7, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d83f      	bhi.n	8000810 <SEG_LCD_WriteString+0x124>
  {
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 8000790:	18bb      	adds	r3, r7, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	230d      	movs	r3, #13
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	701a      	strb	r2, [r3, #0]
 800079e:	e018      	b.n	80007d2 <SEG_LCD_WriteString+0xe6>
    {
      currentCharacters[i + (DIGITS_NUM - currentDigitIndex)] = currentCharacters[i];
 80007a0:	240d      	movs	r4, #13
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	569a      	ldrsb	r2, [r3, r2]
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2100      	movs	r1, #0
 80007ac:	5659      	ldrsb	r1, [r3, r1]
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2002      	movs	r0, #2
 80007b6:	1ac3      	subs	r3, r0, r3
 80007b8:	18cb      	adds	r3, r1, r3
 80007ba:	4918      	ldr	r1, [pc, #96]	; (800081c <SEG_LCD_WriteString+0x130>)
 80007bc:	5c89      	ldrb	r1, [r1, r2]
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <SEG_LCD_WriteString+0x130>)
 80007c0:	54d1      	strb	r1, [r2, r3]
    for (int8_t i = currentDigitIndex - 1; i >= 0; i--)
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	3b01      	subs	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	230d      	movs	r3, #13
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b7f      	cmp	r3, #127	; 0x7f
 80007da:	d9e1      	bls.n	80007a0 <SEG_LCD_WriteString+0xb4>
    }
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 80007dc:	230c      	movs	r3, #12
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e00a      	b.n	80007fc <SEG_LCD_WriteString+0x110>
    {
      currentCharacters[i] = 0xFC;
 80007e6:	200c      	movs	r0, #12
 80007e8:	183b      	adds	r3, r7, r0
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <SEG_LCD_WriteString+0x130>)
 80007ee:	21fc      	movs	r1, #252	; 0xfc
 80007f0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < (DIGITS_NUM - currentDigitIndex); i++)
 80007f2:	183b      	adds	r3, r7, r0
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	3201      	adds	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	230c      	movs	r3, #12
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	230f      	movs	r3, #15
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2102      	movs	r1, #2
 800080a:	1acb      	subs	r3, r1, r3
 800080c:	429a      	cmp	r2, r3
 800080e:	dbea      	blt.n	80007e6 <SEG_LCD_WriteString+0xfa>
    }
  }
  return SEG_LCD_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b005      	add	sp, #20
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	200000ac 	.word	0x200000ac
 8000820:	200000b0 	.word	0x200000b0
 8000824:	08002e7c 	.word	0x08002e7c

08000828 <SEG_LCD_WriteNumber>:
/*----------------------------------------------------------------------------*/
SEG_LCD_Result SEG_LCD_WriteNumber(uint32_t number)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  char temp[DIGITS_NUM];
  snprintf(temp, DIGITS_NUM+2, "%d", number);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <SEG_LCD_WriteNumber+0x28>)
 8000834:	240c      	movs	r4, #12
 8000836:	1938      	adds	r0, r7, r4
 8000838:	2104      	movs	r1, #4
 800083a:	f001 fec7 	bl	80025cc <sniprintf>



  SEG_LCD_WriteString(temp);
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ff53 	bl	80006ec <SEG_LCD_WriteString>

  return SEG_LCD_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b005      	add	sp, #20
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	08002e58 	.word	0x08002e58

08000854 <SEG_LCD_Process>:

/*----------------------------------------------------------------------------*/
void SEG_LCD_Process(uint8_t dig_num)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	0002      	movs	r2, r0
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	701a      	strb	r2, [r3, #0]
  // выбор земленного пина (на землю)
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000860:	230f      	movs	r3, #15
 8000862:	18fb      	adds	r3, r7, r3
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e00f      	b.n	800088a <SEG_LCD_Process+0x36>
  {
    SetOutput(digitPins[i], PIN_ACTIVE);
 800086a:	240f      	movs	r4, #15
 800086c:	193b      	adds	r3, r7, r4
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	490f      	ldr	r1, [pc, #60]	; (80008b0 <SEG_LCD_Process+0x5c>)
 8000872:	00db      	lsls	r3, r3, #3
 8000874:	2201      	movs	r2, #1
 8000876:	5858      	ldr	r0, [r3, r1]
 8000878:	18cb      	adds	r3, r1, r3
 800087a:	6859      	ldr	r1, [r3, #4]
 800087c:	f7ff ff20 	bl	80006c0 <SetOutput>
  for (uint8_t i = 0; i < DIGITS_NUM; i++)
 8000880:	193b      	adds	r3, r7, r4
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	193b      	adds	r3, r7, r4
 8000886:	3201      	adds	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	230f      	movs	r3, #15
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d9ea      	bls.n	800086a <SEG_LCD_Process+0x16>
  // SetOutput(digitPins[dig_num], PIN_ACTIVE);

  // выбор значения на индикаторе
  // HC595SendData(currentCharacters[dig_num]);

  SetOutput(digitPins[dig_num], !PIN_ACTIVE);
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4905      	ldr	r1, [pc, #20]	; (80008b0 <SEG_LCD_Process+0x5c>)
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	2200      	movs	r2, #0
 800089e:	5858      	ldr	r0, [r3, r1]
 80008a0:	18cb      	adds	r3, r1, r3
 80008a2:	6859      	ldr	r1, [r3, #4]
 80008a4:	f7ff ff0c 	bl	80006c0 <SetOutput>

}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b005      	add	sp, #20
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000000 	.word	0x20000000

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	619a      	str	r2, [r3, #24]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	69da      	ldr	r2, [r3, #28]
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0549      	lsls	r1, r1, #21
 80008dc:	430a      	orrs	r2, r1
 80008de:	61da      	str	r2, [r3, #28]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_MspInit+0x44>)
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	4013      	ands	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	05db      	lsls	r3, r3, #23
 800090c:	429a      	cmp	r2, r3
 800090e:	d113      	bne.n	8000938 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 8000912:	69da      	ldr	r2, [r3, #28]
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 8000916:	2101      	movs	r1, #1
 8000918:	430a      	orrs	r2, r1
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_TIM_Base_MspInit+0x44>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	200f      	movs	r0, #15
 800092e:	f000 fa65 	bl	8000dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 fa77 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b004      	add	sp, #16
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	2414      	movs	r4, #20
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	2314      	movs	r3, #20
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f001 fe30 	bl	80025bc <memset>
  if(htim_encoder->Instance==TIM3)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1b      	ldr	r2, [pc, #108]	; (80009d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d130      	bne.n	80009c8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800096c:	2102      	movs	r1, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	61da      	str	r2, [r3, #28]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	2202      	movs	r2, #2
 8000978:	4013      	ands	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	0289      	lsls	r1, r1, #10
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	029b      	lsls	r3, r3, #10
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	22c0      	movs	r2, #192	; 0xc0
 80009a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2201      	movs	r2, #1
 80009b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	2390      	movs	r3, #144	; 0x90
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fa4c 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b00b      	add	sp, #44	; 0x2c
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40000400 	.word	0x40000400
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f936 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fbae 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a10:	2002      	movs	r0, #2
 8000a12:	f000 fbab 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <TIM2_IRQHandler+0xdc>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 f9f2 	bl	8001e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if(LEDsFlag)
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <TIM2_IRQHandler+0xe0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d060      	beq.n	8000af2 <TIM2_IRQHandler+0xd6>
  {
	  if(Reg_Counter == 0)
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d110      	bne.n	8000a5a <TIM2_IRQHandler+0x3e>
	  {
		  HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000a38:	2390      	movs	r3, #144	; 0x90
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2108      	movs	r1, #8
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fb75 	bl	8001130 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_SET);
 8000a46:	2390      	movs	r3, #144	; 0x90
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fb6e 	bl	8001130 <HAL_GPIO_WritePin>
		  LEDsFlag = 0;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <TIM2_IRQHandler+0xe0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	  }

	   if((Reg_Counter == 0 || Reg_Counter % 2 == 0) && Data_num < 8)
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <TIM2_IRQHandler+0x54>
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d112      	bne.n	8000a96 <TIM2_IRQHandler+0x7a>
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b07      	cmp	r3, #7
 8000a76:	d80e      	bhi.n	8000a96 <TIM2_IRQHandler+0x7a>
	   {
	  	  HC595SendData(LED_Counter, Data_num);
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <TIM2_IRQHandler+0xec>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f7ff fdea 	bl	800065c <HC595SendData>
	  	  Data_num++;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e006      	b.n	8000aa4 <TIM2_IRQHandler+0x88>
	   }
	   else
	   {
		   HAL_GPIO_WritePin(CLK_GPIO_Port, CLK_Pin, GPIO_PIN_SET);
 8000a96:	2390      	movs	r3, #144	; 0x90
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fb46 	bl	8001130 <HAL_GPIO_WritePin>
	   }

	   Reg_Counter++;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000aae:	701a      	strb	r2, [r3, #0]


	   if(Data_num == 8)
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d112      	bne.n	8000ade <TIM2_IRQHandler+0xc2>
	   {
	  	  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, GPIO_PIN_RESET);
 8000ab8:	2390      	movs	r3, #144	; 0x90
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	2200      	movs	r2, #0
 8000abe:	2120      	movs	r1, #32
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 fb35 	bl	8001130 <HAL_GPIO_WritePin>
	  	  Data_num = 0;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <TIM2_IRQHandler+0xe8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

	  	  Reg_Counter = 0;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <TIM2_IRQHandler+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]


		  LED_Counter++;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <TIM2_IRQHandler+0xec>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <TIM2_IRQHandler+0xec>)
 8000adc:	701a      	strb	r2, [r3, #0]
	   }

	   if(LED_Counter >= DIGITS_NUM) { LED_Counter = 0; EncoderFlag = 1;}
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <TIM2_IRQHandler+0xec>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d905      	bls.n	8000af2 <TIM2_IRQHandler+0xd6>
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <TIM2_IRQHandler+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <TIM2_IRQHandler+0xf0>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000108 	.word	0x20000108
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	200000a1 	.word	0x200000a1
 8000b04:	200000b3 	.word	0x200000b3
 8000b08:	200000b2 	.word	0x200000b2
 8000b0c:	200000a3 	.word	0x200000a3

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f001 fd12 	bl	8002568 <__errno>
 8000b44:	0003      	movs	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	18d2      	adds	r2, r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b006      	add	sp, #24
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20001000 	.word	0x20001000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200000b4 	.word	0x200000b4
 8000b78:	20000168 	.word	0x20000168

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb2:	f7ff ffe3 	bl	8000b7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f001 fcdd 	bl	8002574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fb65 	bl	8000288 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000bcc:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 8000bd0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000bd4:	20000168 	.word	0x20000168

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_Init+0x24>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_Init+0x24>)
 8000be6:	2110      	movs	r1, #16
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 f809 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fe5f 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c0e:	681c      	ldr	r4, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_InitTick+0x60>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	0019      	movs	r1, r3
 8000c16:	23fa      	movs	r3, #250	; 0xfa
 8000c18:	0098      	lsls	r0, r3, #2
 8000c1a:	f7ff fa7f 	bl	800011c <__udivsi3>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0019      	movs	r1, r3
 8000c22:	0020      	movs	r0, r4
 8000c24:	f7ff fa7a 	bl	800011c <__udivsi3>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 f90b 	bl	8000e46 <HAL_SYSTICK_Config>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00f      	b.n	8000c58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d80b      	bhi.n	8000c56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2200      	movs	r2, #0
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f8d8 	bl	8000dfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_InitTick+0x64>)
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	20000014 	.word	0x20000014
 8000c64:	2000001c 	.word	0x2000001c
 8000c68:	20000018 	.word	0x20000018

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	2000001c 	.word	0x2000001c
 8000c8c:	20000154 	.word	0x20000154

08000c90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	20000154 	.word	0x20000154

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	0002      	movs	r2, r0
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb6:	d809      	bhi.n	8000ccc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb8:	1dfb      	adds	r3, r7, #7
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	231f      	movs	r3, #31
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_EnableIRQ+0x30>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	000a      	movs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
  }
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d828      	bhi.n	8000d40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	33c0      	adds	r3, #192	; 0xc0
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	589b      	ldr	r3, [r3, r2]
 8000cfe:	1dfa      	adds	r2, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	0011      	movs	r1, r2
 8000d04:	2203      	movs	r2, #3
 8000d06:	400a      	ands	r2, r1
 8000d08:	00d2      	lsls	r2, r2, #3
 8000d0a:	21ff      	movs	r1, #255	; 0xff
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	43d2      	mvns	r2, r2
 8000d12:	401a      	ands	r2, r3
 8000d14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	019b      	lsls	r3, r3, #6
 8000d1a:	22ff      	movs	r2, #255	; 0xff
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	0018      	movs	r0, r3
 8000d24:	2303      	movs	r3, #3
 8000d26:	4003      	ands	r3, r0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <__NVIC_SetPriority+0xd4>)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b25b      	sxtb	r3, r3
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	430a      	orrs	r2, r1
 8000d38:	33c0      	adds	r3, #192	; 0xc0
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d3e:	e031      	b.n	8000da4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0019      	movs	r1, r3
 8000d48:	230f      	movs	r3, #15
 8000d4a:	400b      	ands	r3, r1
 8000d4c:	3b08      	subs	r3, #8
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3306      	adds	r3, #6
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	18d3      	adds	r3, r2, r3
 8000d56:	3304      	adds	r3, #4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	1dfa      	adds	r2, r7, #7
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	0011      	movs	r1, r2
 8000d60:	2203      	movs	r2, #3
 8000d62:	400a      	ands	r2, r1
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	21ff      	movs	r1, #255	; 0xff
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	22ff      	movs	r2, #255	; 0xff
 8000d78:	401a      	ands	r2, r3
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2303      	movs	r3, #3
 8000d82:	4003      	ands	r3, r0
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <__NVIC_SetPriority+0xd8>)
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	001c      	movs	r4, r3
 8000d90:	230f      	movs	r3, #15
 8000d92:	4023      	ands	r3, r4
 8000d94:	3b08      	subs	r3, #8
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	18c3      	adds	r3, r0, r3
 8000da0:	3304      	adds	r3, #4
 8000da2:	601a      	str	r2, [r3, #0]
}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b003      	add	sp, #12
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	045b      	lsls	r3, r3, #17
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d301      	bcc.n	8000dcc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e010      	b.n	8000dee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <SysTick_Config+0x44>)
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	2103      	movs	r1, #3
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff ff7c 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x44>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x44>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	210f      	movs	r1, #15
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	1c02      	adds	r2, r0, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b004      	add	sp, #16
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	0002      	movs	r2, r0
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff ffaf 	bl	8000db4 <SysTick_Config>
 8000e56:	0003      	movs	r3, r0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	e149      	b.n	8001104 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2101      	movs	r1, #1
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <HAL_GPIO_Init+0x28>
 8000e86:	e13a      	b.n	80010fe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d005      	beq.n	8000ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	2201      	movs	r2, #1
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2203      	movs	r2, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	0013      	movs	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d123      	bne.n	8000f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691a      	ldr	r2, [r3, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2107      	movs	r1, #7
 8000f76:	400b      	ands	r3, r1
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	6939      	ldr	r1, [r7, #16]
 8000f90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	23c0      	movs	r3, #192	; 0xc0
 8000fcc:	029b      	lsls	r3, r3, #10
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_GPIO_Init+0x174>
 8000fd2:	e094      	b.n	80010fe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd4:	4b51      	ldr	r3, [pc, #324]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	4b50      	ldr	r3, [pc, #320]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	619a      	str	r2, [r3, #24]
 8000fe0:	4b4e      	ldr	r3, [pc, #312]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_GPIO_Init+0x2c0>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	589b      	ldr	r3, [r3, r2]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	4013      	ands	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	2390      	movs	r3, #144	; 0x90
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	429a      	cmp	r2, r3
 8001018:	d00d      	beq.n	8001036 <HAL_GPIO_Init+0x1d6>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a41      	ldr	r2, [pc, #260]	; (8001124 <HAL_GPIO_Init+0x2c4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d007      	beq.n	8001032 <HAL_GPIO_Init+0x1d2>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a40      	ldr	r2, [pc, #256]	; (8001128 <HAL_GPIO_Init+0x2c8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <HAL_GPIO_Init+0x1ce>
 800102a:	2302      	movs	r3, #2
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x1d8>
 800102e:	2305      	movs	r3, #5
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x1d8>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x1d8>
 8001036:	2300      	movs	r3, #0
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	2103      	movs	r1, #3
 800103c:	400a      	ands	r2, r1
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	; (8001120 <HAL_GPIO_Init+0x2c0>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	4013      	ands	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_GPIO_Init+0x2cc>)
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43da      	mvns	r2, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_GPIO_Init+0x2cc>)
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_GPIO_Init+0x2cc>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	035b      	lsls	r3, r3, #13
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_GPIO_Init+0x2cc>)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_GPIO_Init+0x2cc>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	039b      	lsls	r3, r3, #14
 80010ec:	4013      	ands	r3, r2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_GPIO_Init+0x2cc>)
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	40da      	lsrs	r2, r3
 800110c:	1e13      	subs	r3, r2, #0
 800110e:	d000      	beq.n	8001112 <HAL_GPIO_Init+0x2b2>
 8001110:	e6ae      	b.n	8000e70 <HAL_GPIO_Init+0x10>
  } 
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b006      	add	sp, #24
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	48000400 	.word	0x48000400
 8001128:	48000800 	.word	0x48000800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	0008      	movs	r0, r1
 800113a:	0011      	movs	r1, r2
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	1c7b      	adds	r3, r7, #1
 8001144:	1c0a      	adds	r2, r1, #0
 8001146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001148:	1c7b      	adds	r3, r7, #1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001150:	1cbb      	adds	r3, r7, #2
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	1cbb      	adds	r3, r7, #2
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	0002      	movs	r2, r0
 8001174:	1dbb      	adds	r3, r7, #6
 8001176:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	1dba      	adds	r2, r7, #6
 800117e:	8812      	ldrh	r2, [r2, #0]
 8001180:	4013      	ands	r3, r2
 8001182:	d008      	beq.n	8001196 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001186:	1dba      	adds	r2, r7, #6
 8001188:	8812      	ldrh	r2, [r2, #0]
 800118a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff f84f 	bl	8000234 <HAL_GPIO_EXTI_Callback>
  }
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e301      	b.n	80017ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x1e>
 80011c0:	e08d      	b.n	80012de <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011c2:	4bc3      	ldr	r3, [pc, #780]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	220c      	movs	r2, #12
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	d00e      	beq.n	80011ec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ce:	4bc0      	ldr	r3, [pc, #768]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	220c      	movs	r2, #12
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d116      	bne.n	8001208 <HAL_RCC_OscConfig+0x64>
 80011da:	4bbd      	ldr	r3, [pc, #756]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	025b      	lsls	r3, r3, #9
 80011e2:	401a      	ands	r2, r3
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d10d      	bne.n	8001208 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4bb8      	ldr	r3, [pc, #736]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d100      	bne.n	80011fa <HAL_RCC_OscConfig+0x56>
 80011f8:	e070      	b.n	80012dc <HAL_RCC_OscConfig+0x138>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d000      	beq.n	8001204 <HAL_RCC_OscConfig+0x60>
 8001202:	e06b      	b.n	80012dc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e2d8      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d107      	bne.n	8001220 <HAL_RCC_OscConfig+0x7c>
 8001210:	4baf      	ldr	r3, [pc, #700]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	0249      	lsls	r1, r1, #9
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	e02f      	b.n	8001280 <HAL_RCC_OscConfig+0xdc>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x9e>
 8001228:	4ba9      	ldr	r3, [pc, #676]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4ba8      	ldr	r3, [pc, #672]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800122e:	49a9      	ldr	r1, [pc, #676]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
 8001230:	400a      	ands	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	4ba6      	ldr	r3, [pc, #664]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4ba5      	ldr	r3, [pc, #660]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800123a:	49a7      	ldr	r1, [pc, #668]	; (80014d8 <HAL_RCC_OscConfig+0x334>)
 800123c:	400a      	ands	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e01e      	b.n	8001280 <HAL_RCC_OscConfig+0xdc>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b05      	cmp	r3, #5
 8001248:	d10e      	bne.n	8001268 <HAL_RCC_OscConfig+0xc4>
 800124a:	4ba1      	ldr	r3, [pc, #644]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4ba0      	ldr	r3, [pc, #640]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	02c9      	lsls	r1, r1, #11
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	4b9d      	ldr	r3, [pc, #628]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b9c      	ldr	r3, [pc, #624]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0249      	lsls	r1, r1, #9
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xdc>
 8001268:	4b99      	ldr	r3, [pc, #612]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b98      	ldr	r3, [pc, #608]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800126e:	4999      	ldr	r1, [pc, #612]	; (80014d4 <HAL_RCC_OscConfig+0x330>)
 8001270:	400a      	ands	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b95      	ldr	r3, [pc, #596]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800127a:	4997      	ldr	r1, [pc, #604]	; (80014d8 <HAL_RCC_OscConfig+0x334>)
 800127c:	400a      	ands	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d014      	beq.n	80012b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fd02 	bl	8000c90 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001292:	f7ff fcfd 	bl	8000c90 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b64      	cmp	r3, #100	; 0x64
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e28a      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a4:	4b8a      	ldr	r3, [pc, #552]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	4013      	ands	r3, r2
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0xee>
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b2:	f7ff fced 	bl	8000c90 <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fce8 	bl	8000c90 <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e275      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	2380      	movs	r3, #128	; 0x80
 80012d4:	029b      	lsls	r3, r3, #10
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x118>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x146>
 80012e8:	e069      	b.n	80013be <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	220c      	movs	r2, #12
 80012f0:	4013      	ands	r3, r2
 80012f2:	d00b      	beq.n	800130c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012f4:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d11c      	bne.n	800133a <HAL_RCC_OscConfig+0x196>
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	4013      	ands	r3, r2
 800130a:	d116      	bne.n	800133a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2202      	movs	r2, #2
 8001312:	4013      	ands	r3, r2
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x17e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e24b      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	22f8      	movs	r2, #248	; 0xf8
 8001328:	4393      	bics	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00da      	lsls	r2, r3, #3
 8001332:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001338:	e041      	b.n	80013be <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d024      	beq.n	800138c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b62      	ldr	r3, [pc, #392]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001348:	2101      	movs	r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc9f 	bl	8000c90 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc9a 	bl	8000c90 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e227      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d0f1      	beq.n	8001358 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	22f8      	movs	r2, #248	; 0xf8
 800137a:	4393      	bics	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e018      	b.n	80013be <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc7a 	bl	8000c90 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc75 	bl	8000c90 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e202      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b4:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f1      	bne.n	80013a2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2208      	movs	r2, #8
 80013c4:	4013      	ands	r3, r2
 80013c6:	d036      	beq.n	8001436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d019      	beq.n	8001404 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d0:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d4:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fc58 	bl	8000c90 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fc53 	bl	8000c90 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1e0      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f1      	beq.n	80013e6 <HAL_RCC_OscConfig+0x242>
 8001402:	e018      	b.n	8001436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001410:	f7ff fc3e 	bl	8000c90 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fc39 	bl	8000c90 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1c6      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001430:	2202      	movs	r2, #2
 8001432:	4013      	ands	r3, r2
 8001434:	d1f1      	bne.n	800141a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2204      	movs	r2, #4
 800143c:	4013      	ands	r3, r2
 800143e:	d100      	bne.n	8001442 <HAL_RCC_OscConfig+0x29e>
 8001440:	e0b4      	b.n	80015ac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	201f      	movs	r0, #31
 8001444:	183b      	adds	r3, r7, r0
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	055b      	lsls	r3, r3, #21
 8001452:	4013      	ands	r3, r2
 8001454:	d110      	bne.n	8001478 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0549      	lsls	r1, r1, #21
 8001460:	430a      	orrs	r2, r1
 8001462:	61da      	str	r2, [r3, #28]
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_OscConfig+0x338>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4013      	ands	r3, r2
 8001482:	d11a      	bne.n	80014ba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_RCC_OscConfig+0x338>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0049      	lsls	r1, r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fbfd 	bl	8000c90 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149c:	f7ff fbf8 	bl	8000c90 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e185      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_OscConfig+0x338>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10e      	bne.n	80014e0 <HAL_RCC_OscConfig+0x33c>
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	621a      	str	r2, [r3, #32]
 80014ce:	e035      	b.n	800153c <HAL_RCC_OscConfig+0x398>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	fffeffff 	.word	0xfffeffff
 80014d8:	fffbffff 	.word	0xfffbffff
 80014dc:	40007000 	.word	0x40007000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10c      	bne.n	8001502 <HAL_RCC_OscConfig+0x35e>
 80014e8:	4bb6      	ldr	r3, [pc, #728]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4bb5      	ldr	r3, [pc, #724]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	621a      	str	r2, [r3, #32]
 80014f4:	4bb3      	ldr	r3, [pc, #716]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4bb2      	ldr	r3, [pc, #712]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
 8001500:	e01c      	b.n	800153c <HAL_RCC_OscConfig+0x398>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b05      	cmp	r3, #5
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x380>
 800150a:	4bae      	ldr	r3, [pc, #696]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4bad      	ldr	r3, [pc, #692]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001510:	2104      	movs	r1, #4
 8001512:	430a      	orrs	r2, r1
 8001514:	621a      	str	r2, [r3, #32]
 8001516:	4bab      	ldr	r3, [pc, #684]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	4baa      	ldr	r3, [pc, #680]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0x398>
 8001524:	4ba7      	ldr	r3, [pc, #668]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	4ba6      	ldr	r3, [pc, #664]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	621a      	str	r2, [r3, #32]
 8001530:	4ba4      	ldr	r3, [pc, #656]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4ba3      	ldr	r3, [pc, #652]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001536:	2104      	movs	r1, #4
 8001538:	438a      	bics	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d014      	beq.n	800156e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fba4 	bl	8000c90 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e009      	b.n	8001562 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb9f 	bl	8000c90 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a9b      	ldr	r2, [pc, #620]	; (80017c8 <HAL_RCC_OscConfig+0x624>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e12b      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	4b98      	ldr	r3, [pc, #608]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x3aa>
 800156c:	e013      	b.n	8001596 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb8f 	bl	8000c90 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb8a 	bl	8000c90 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a91      	ldr	r2, [pc, #580]	; (80017c8 <HAL_RCC_OscConfig+0x624>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e116      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b8d      	ldr	r3, [pc, #564]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	2202      	movs	r2, #2
 8001592:	4013      	ands	r3, r2
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001596:	231f      	movs	r3, #31
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a0:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015a2:	69da      	ldr	r2, [r3, #28]
 80015a4:	4b87      	ldr	r3, [pc, #540]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015a6:	4989      	ldr	r1, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x628>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2210      	movs	r2, #16
 80015b2:	4013      	ands	r3, r2
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d12a      	bne.n	8001614 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015be:	4b81      	ldr	r3, [pc, #516]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015c4:	2104      	movs	r1, #4
 80015c6:	430a      	orrs	r2, r1
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ce:	4b7d      	ldr	r3, [pc, #500]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fb5b 	bl	8000c90 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e0:	f7ff fb56 	bl	8000c90 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e0e3      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015f2:	4b74      	ldr	r3, [pc, #464]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f1      	beq.n	80015e0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015fc:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	22f8      	movs	r2, #248	; 0xf8
 8001602:	4393      	bics	r3, r2
 8001604:	0019      	movs	r1, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	00da      	lsls	r2, r3, #3
 800160c:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	e034      	b.n	800167e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	3305      	adds	r3, #5
 800161a:	d111      	bne.n	8001640 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800161e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001622:	2104      	movs	r1, #4
 8001624:	438a      	bics	r2, r1
 8001626:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	22f8      	movs	r2, #248	; 0xf8
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	00da      	lsls	r2, r3, #3
 8001638:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800163a:	430a      	orrs	r2, r1
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
 800163e:	e01e      	b.n	800167e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001640:	4b60      	ldr	r3, [pc, #384]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001644:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001646:	2104      	movs	r1, #4
 8001648:	430a      	orrs	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800164c:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001652:	2101      	movs	r1, #1
 8001654:	438a      	bics	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fb1a 	bl	8000c90 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001662:	f7ff fb15 	bl	8000c90 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0a2      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d1f1      	bne.n	8001662 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <HAL_RCC_OscConfig+0x4e4>
 8001686:	e097      	b.n	80017b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	220c      	movs	r2, #12
 800168e:	4013      	ands	r3, r2
 8001690:	2b08      	cmp	r3, #8
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x4f2>
 8001694:	e06b      	b.n	800176e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d14c      	bne.n	8001738 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b49      	ldr	r3, [pc, #292]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016a4:	494a      	ldr	r1, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x62c>)
 80016a6:	400a      	ands	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff faf1 	bl	8000c90 <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff faec 	bl	8000c90 <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e079      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	049b      	lsls	r3, r3, #18
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d2:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	220f      	movs	r2, #15
 80016d8:	4393      	bics	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e6:	4b37      	ldr	r3, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4a3a      	ldr	r2, [pc, #232]	; (80017d4 <HAL_RCC_OscConfig+0x630>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	431a      	orrs	r2, r3
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001700:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0449      	lsls	r1, r1, #17
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fabf 	bl	8000c90 <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff faba 	bl	8000c90 <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e047      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	049b      	lsls	r3, r3, #18
 8001732:	4013      	ands	r3, r2
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x574>
 8001736:	e03f      	b.n	80017b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800173e:	4924      	ldr	r1, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x62c>)
 8001740:	400a      	ands	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff faa4 	bl	8000c90 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fa9f 	bl	8000c90 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e02c      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	049b      	lsls	r3, r3, #18
 8001768:	4013      	ands	r3, r2
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x5aa>
 800176c:	e024      	b.n	80017b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e01f      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	025b      	lsls	r3, r3, #9
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	429a      	cmp	r2, r3
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	220f      	movs	r2, #15
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	23f0      	movs	r3, #240	; 0xf0
 80017a8:	039b      	lsls	r3, r3, #14
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b008      	add	sp, #32
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40021000 	.word	0x40021000
 80017c8:	00001388 	.word	0x00001388
 80017cc:	efffffff 	.word	0xefffffff
 80017d0:	feffffff 	.word	0xfeffffff
 80017d4:	ffc2ffff 	.word	0xffc2ffff

080017d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b3      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b5b      	ldr	r3, [pc, #364]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d911      	bls.n	800181e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b58      	ldr	r3, [pc, #352]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	4393      	bics	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	4b55      	ldr	r3, [pc, #340]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d001      	beq.n	800181e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e09a      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2202      	movs	r2, #2
 8001824:	4013      	ands	r3, r2
 8001826:	d015      	beq.n	8001854 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	d006      	beq.n	8001840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001838:	21e0      	movs	r1, #224	; 0xe0
 800183a:	00c9      	lsls	r1, r1, #3
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	22f0      	movs	r2, #240	; 0xf0
 8001846:	4393      	bics	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2201      	movs	r2, #1
 800185a:	4013      	ands	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d114      	bne.n	800189c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06e      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b38      	ldr	r3, [pc, #224]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d108      	bne.n	800189c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e062      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e05b      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4393      	bics	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff f9ee 	bl	8000c90 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b8:	e009      	b.n	80018ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ba:	f7ff f9e9 	bl	8000c90 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_RCC_ClockConfig+0x18c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e042      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	220c      	movs	r2, #12
 80018d4:	401a      	ands	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1ec      	bne.n	80018ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	4013      	ands	r3, r2
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d211      	bcs.n	8001912 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4393      	bics	r3, r2
 80018f6:	0019      	movs	r1, r3
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_RCC_ClockConfig+0x184>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e020      	b.n	8001954 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2204      	movs	r2, #4
 8001918:	4013      	ands	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_RCC_ClockConfig+0x190>)
 8001922:	4013      	ands	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001930:	f000 f820 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001934:	0001      	movs	r1, r0
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_ClockConfig+0x188>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	220f      	movs	r2, #15
 800193e:	4013      	ands	r3, r2
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x194>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	000a      	movs	r2, r1
 8001946:	40da      	lsrs	r2, r3
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x198>)
 800194a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff f959 	bl	8000c04 <HAL_InitTick>
  
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40022000 	.word	0x40022000
 8001960:	40021000 	.word	0x40021000
 8001964:	00001388 	.word	0x00001388
 8001968:	fffff8ff 	.word	0xfffff8ff
 800196c:	08002e88 	.word	0x08002e88
 8001970:	20000014 	.word	0x20000014

08001974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b08f      	sub	sp, #60	; 0x3c
 8001978:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800197a:	2314      	movs	r3, #20
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001980:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001982:	c313      	stmia	r3!, {r0, r1, r4}
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 800198c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800198e:	c313      	stmia	r3!, {r0, r1, r4}
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	220c      	movs	r2, #12
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d002      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x4a>
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d003      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x50>
 80019bc:	e02d      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019c2:	e02d      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	220f      	movs	r2, #15
 80019ca:	4013      	ands	r3, r2
 80019cc:	2214      	movs	r2, #20
 80019ce:	18ba      	adds	r2, r7, r2
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	220f      	movs	r2, #15
 80019da:	4013      	ands	r3, r2
 80019dc:	1d3a      	adds	r2, r7, #4
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	4013      	ands	r3, r2
 80019ea:	d009      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ee:	4812      	ldr	r0, [pc, #72]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019f0:	f7fe fb94 	bl	800011c <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	001a      	movs	r2, r3
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	4353      	muls	r3, r2
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
 80019fe:	e009      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a02:	000a      	movs	r2, r1
 8001a04:	0152      	lsls	r2, r2, #5
 8001a06:	1a52      	subs	r2, r2, r1
 8001a08:	0193      	lsls	r3, r2, #6
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	185b      	adds	r3, r3, r1
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a18:	e002      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00f      	add	sp, #60	; 0x3c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	08002e5c 	.word	0x08002e5c
 8001a30:	08002e6c 	.word	0x08002e6c
 8001a34:	40021000 	.word	0x40021000
 8001a38:	007a1200 	.word	0x007a1200

08001a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e042      	b.n	8001ad4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	223d      	movs	r2, #61	; 0x3d
 8001a52:	5c9b      	ldrb	r3, [r3, r2]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223c      	movs	r2, #60	; 0x3c
 8001a5e:	2100      	movs	r1, #0
 8001a60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe ff49 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223d      	movs	r2, #61	; 0x3d
 8001a6e:	2102      	movs	r1, #2
 8001a70:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	f000 fbd7 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2246      	movs	r2, #70	; 0x46
 8001a86:	2101      	movs	r1, #1
 8001a88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	223e      	movs	r2, #62	; 0x3e
 8001a8e:	2101      	movs	r1, #1
 8001a90:	5499      	strb	r1, [r3, r2]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	223f      	movs	r2, #63	; 0x3f
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2241      	movs	r2, #65	; 0x41
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2242      	movs	r2, #66	; 0x42
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2243      	movs	r2, #67	; 0x43
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2244      	movs	r2, #68	; 0x44
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2245      	movs	r2, #69	; 0x45
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	223d      	movs	r2, #61	; 0x3d
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	223d      	movs	r2, #61	; 0x3d
 8001ae8:	5c9b      	ldrb	r3, [r3, r2]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d001      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e036      	b.n	8001b62 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	223d      	movs	r2, #61	; 0x3d
 8001af8:	2102      	movs	r1, #2
 8001afa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <HAL_TIM_Base_Start_IT+0x90>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00a      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0x50>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d004      	beq.n	8001b2c <HAL_TIM_Base_Start_IT+0x50>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_TIM_Base_Start_IT+0x94>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d111      	bne.n	8001b50 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2207      	movs	r2, #7
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d010      	beq.n	8001b60 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	e007      	b.n	8001b60 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40000400 	.word	0x40000400

08001b74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e090      	b.n	8001caa <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	223d      	movs	r2, #61	; 0x3d
 8001b8c:	5c9b      	ldrb	r3, [r3, r2]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d107      	bne.n	8001ba4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	223c      	movs	r2, #60	; 0x3c
 8001b98:	2100      	movs	r1, #0
 8001b9a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7fe fed0 	bl	8000944 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	223d      	movs	r2, #61	; 0x3d
 8001ba8:	2102      	movs	r1, #2
 8001baa:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	493f      	ldr	r1, [pc, #252]	; (8001cb4 <HAL_TIM_Encoder_Init+0x140>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	0010      	movs	r0, r2
 8001bc8:	f000 fb32 	bl	8002230 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_TIM_Encoder_Init+0x144>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	4313      	orrs	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <HAL_TIM_Encoder_Init+0x148>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_TIM_Encoder_Init+0x14c>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	4313      	orrs	r3, r2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	011a      	lsls	r2, r3, #4
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	031b      	lsls	r3, r3, #12
 8001c36:	4313      	orrs	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2222      	movs	r2, #34	; 0x22
 8001c42:	4393      	bics	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2288      	movs	r2, #136	; 0x88
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2246      	movs	r2, #70	; 0x46
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	223e      	movs	r2, #62	; 0x3e
 8001c84:	2101      	movs	r1, #1
 8001c86:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	223f      	movs	r2, #63	; 0x3f
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2242      	movs	r2, #66	; 0x42
 8001c94:	2101      	movs	r1, #1
 8001c96:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2243      	movs	r2, #67	; 0x43
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	223d      	movs	r2, #61	; 0x3d
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	ffffbff8 	.word	0xffffbff8
 8001cb8:	fffffcfc 	.word	0xfffffcfc
 8001cbc:	fffff3f3 	.word	0xfffff3f3
 8001cc0:	ffff0f0f 	.word	0xffff0f0f

08001cc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001cce:	200f      	movs	r0, #15
 8001cd0:	183b      	adds	r3, r7, r0
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	213e      	movs	r1, #62	; 0x3e
 8001cd6:	5c52      	ldrb	r2, [r2, r1]
 8001cd8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001cda:	230e      	movs	r3, #14
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	213f      	movs	r1, #63	; 0x3f
 8001ce2:	5c52      	ldrb	r2, [r2, r1]
 8001ce4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001ce6:	240d      	movs	r4, #13
 8001ce8:	193b      	adds	r3, r7, r4
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	2142      	movs	r1, #66	; 0x42
 8001cee:	5c52      	ldrb	r2, [r2, r1]
 8001cf0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	2143      	movs	r1, #67	; 0x43
 8001cfa:	5c52      	ldrb	r2, [r2, r1]
 8001cfc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d112      	bne.n	8001d2a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d103      	bne.n	8001d14 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d001      	beq.n	8001d18 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e075      	b.n	8001e04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	223e      	movs	r2, #62	; 0x3e
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2242      	movs	r2, #66	; 0x42
 8001d24:	2102      	movs	r1, #2
 8001d26:	5499      	strb	r1, [r3, r2]
 8001d28:	e03d      	b.n	8001da6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d114      	bne.n	8001d5a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d30:	230e      	movs	r3, #14
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d104      	bne.n	8001d44 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d001      	beq.n	8001d48 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e05d      	b.n	8001e04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	223f      	movs	r2, #63	; 0x3f
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2243      	movs	r2, #67	; 0x43
 8001d54:	2102      	movs	r1, #2
 8001d56:	5499      	strb	r1, [r3, r2]
 8001d58:	e025      	b.n	8001da6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d10e      	bne.n	8001d82 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d64:	230e      	movs	r3, #14
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d109      	bne.n	8001d82 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001d6e:	230d      	movs	r3, #13
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d104      	bne.n	8001d82 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001d78:	230c      	movs	r3, #12
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e03e      	b.n	8001e04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223e      	movs	r2, #62	; 0x3e
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	223f      	movs	r2, #63	; 0x3f
 8001d92:	2102      	movs	r1, #2
 8001d94:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2242      	movs	r2, #66	; 0x42
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2243      	movs	r2, #67	; 0x43
 8001da2:	2102      	movs	r1, #2
 8001da4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_TIM_Encoder_Start+0xf0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d008      	beq.n	8001dc4 <HAL_TIM_Encoder_Start+0x100>
 8001db2:	e00f      	b.n	8001dd4 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	2100      	movs	r1, #0
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fb47 	bl	8002450 <TIM_CCxChannelCmd>
      break;
 8001dc2:	e016      	b.n	8001df2 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2104      	movs	r1, #4
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 fb3f 	bl	8002450 <TIM_CCxChannelCmd>
      break;
 8001dd2:	e00e      	b.n	8001df2 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2100      	movs	r1, #0
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 fb37 	bl	8002450 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	2104      	movs	r1, #4
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fb30 	bl	8002450 <TIM_CCxChannelCmd>
      break;
 8001df0:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b005      	add	sp, #20
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d124      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d11d      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2203      	movs	r2, #3
 8001e36:	4252      	negs	r2, r2
 8001e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2203      	movs	r2, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f9d6 	bl	8002200 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e007      	b.n	8001e66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 f9c9 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 f9d5 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2204      	movs	r2, #4
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d125      	bne.n	8001ec6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2204      	movs	r2, #4
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d11e      	bne.n	8001ec6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2205      	movs	r2, #5
 8001e8e:	4252      	negs	r2, r2
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 f9a9 	bl	8002200 <HAL_TIM_IC_CaptureCallback>
 8001eae:	e007      	b.n	8001ec0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f99c 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f9a8 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d124      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2208      	movs	r2, #8
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d11d      	bne.n	8001f1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2209      	movs	r2, #9
 8001ee8:	4252      	negs	r2, r2
 8001eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2204      	movs	r2, #4
 8001ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f97d 	bl	8002200 <HAL_TIM_IC_CaptureCallback>
 8001f06:	e007      	b.n	8001f18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f000 f970 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 f97c 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d125      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2210      	movs	r2, #16
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d11e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2211      	movs	r2, #17
 8001f40:	4252      	negs	r2, r2
 8001f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2208      	movs	r2, #8
 8001f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	23c0      	movs	r3, #192	; 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f950 	bl	8002200 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e007      	b.n	8001f72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f943 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 f94f 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10f      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	4252      	negs	r2, r2
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f91d 	bl	80021e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b80      	cmp	r3, #128	; 0x80
 8001fc0:	d108      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2281      	movs	r2, #129	; 0x81
 8001fc8:	4252      	negs	r2, r2
 8001fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fac2 	bl	8002558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b40      	cmp	r3, #64	; 0x40
 8001fe0:	d10f      	bne.n	8002002 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b40      	cmp	r3, #64	; 0x40
 8001fee:	d108      	bne.n	8002002 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2241      	movs	r2, #65	; 0x41
 8001ff6:	4252      	negs	r2, r2
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 f90f 	bl	8002220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2220      	movs	r2, #32
 800200a:	4013      	ands	r3, r2
 800200c:	2b20      	cmp	r3, #32
 800200e:	d10f      	bne.n	8002030 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	4013      	ands	r3, r2
 800201a:	2b20      	cmp	r3, #32
 800201c:	d108      	bne.n	8002030 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2221      	movs	r2, #33	; 0x21
 8002024:	4252      	negs	r2, r2
 8002026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0018      	movs	r0, r3
 800202c:	f000 fa8c 	bl	8002548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b002      	add	sp, #8
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002042:	230f      	movs	r3, #15
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	223c      	movs	r2, #60	; 0x3c
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_TIM_ConfigClockSource+0x20>
 8002054:	2302      	movs	r3, #2
 8002056:	e0bc      	b.n	80021d2 <HAL_TIM_ConfigClockSource+0x19a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	223c      	movs	r2, #60	; 0x3c
 800205c:	2101      	movs	r1, #1
 800205e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	223d      	movs	r2, #61	; 0x3d
 8002064:	2102      	movs	r1, #2
 8002066:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2277      	movs	r2, #119	; 0x77
 8002074:	4393      	bics	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_TIM_ConfigClockSource+0x1a4>)
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0192      	lsls	r2, r2, #6
 8002090:	4293      	cmp	r3, r2
 8002092:	d040      	beq.n	8002116 <HAL_TIM_ConfigClockSource+0xde>
 8002094:	2280      	movs	r2, #128	; 0x80
 8002096:	0192      	lsls	r2, r2, #6
 8002098:	4293      	cmp	r3, r2
 800209a:	d900      	bls.n	800209e <HAL_TIM_ConfigClockSource+0x66>
 800209c:	e088      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	0152      	lsls	r2, r2, #5
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d100      	bne.n	80020a8 <HAL_TIM_ConfigClockSource+0x70>
 80020a6:	e088      	b.n	80021ba <HAL_TIM_ConfigClockSource+0x182>
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	0152      	lsls	r2, r2, #5
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d900      	bls.n	80020b2 <HAL_TIM_ConfigClockSource+0x7a>
 80020b0:	e07e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020b2:	2b70      	cmp	r3, #112	; 0x70
 80020b4:	d018      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0xb0>
 80020b6:	d900      	bls.n	80020ba <HAL_TIM_ConfigClockSource+0x82>
 80020b8:	e07a      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020ba:	2b60      	cmp	r3, #96	; 0x60
 80020bc:	d04f      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x126>
 80020be:	d900      	bls.n	80020c2 <HAL_TIM_ConfigClockSource+0x8a>
 80020c0:	e076      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020c2:	2b50      	cmp	r3, #80	; 0x50
 80020c4:	d03b      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x106>
 80020c6:	d900      	bls.n	80020ca <HAL_TIM_ConfigClockSource+0x92>
 80020c8:	e072      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020ca:	2b40      	cmp	r3, #64	; 0x40
 80020cc:	d057      	beq.n	800217e <HAL_TIM_ConfigClockSource+0x146>
 80020ce:	d900      	bls.n	80020d2 <HAL_TIM_ConfigClockSource+0x9a>
 80020d0:	e06e      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020d2:	2b30      	cmp	r3, #48	; 0x30
 80020d4:	d063      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x166>
 80020d6:	d86b      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d060      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x166>
 80020dc:	d868      	bhi.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d05d      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x166>
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d05b      	beq.n	800219e <HAL_TIM_ConfigClockSource+0x166>
 80020e6:	e063      	b.n	80021b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f000 f98a 	bl	8002410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2277      	movs	r2, #119	; 0x77
 8002108:	4313      	orrs	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	609a      	str	r2, [r3, #8]
      break;
 8002114:	e052      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6899      	ldr	r1, [r3, #8]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f000 f973 	bl	8002410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	01c9      	lsls	r1, r1, #7
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
      break;
 800213c:	e03e      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	001a      	movs	r2, r3
 800214c:	f000 f8e6 	bl	800231c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2150      	movs	r1, #80	; 0x50
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f940 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 800215c:	e02e      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	001a      	movs	r2, r3
 800216c:	f000 f904 	bl	8002378 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2160      	movs	r1, #96	; 0x60
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f930 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 800217c:	e01e      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	001a      	movs	r2, r3
 800218c:	f000 f8c6 	bl	800231c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f920 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 800219c:	e00e      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0019      	movs	r1, r3
 80021a8:	0010      	movs	r0, r2
 80021aa:	f000 f917 	bl	80023dc <TIM_ITRx_SetConfig>
      break;
 80021ae:	e005      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021b0:	230f      	movs	r3, #15
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
      break;
 80021b8:	e000      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021ba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	223d      	movs	r2, #61	; 0x3d
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	223c      	movs	r2, #60	; 0x3c
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

  return status;
 80021cc:	230f      	movs	r3, #15
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	ffff00ff 	.word	0xffff00ff

080021e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b002      	add	sp, #8
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a30      	ldr	r2, [pc, #192]	; (8002304 <TIM_Base_SetConfig+0xd4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d008      	beq.n	800225a <TIM_Base_SetConfig+0x2a>
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	05db      	lsls	r3, r3, #23
 800224e:	429a      	cmp	r2, r3
 8002250:	d003      	beq.n	800225a <TIM_Base_SetConfig+0x2a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <TIM_Base_SetConfig+0xd8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d108      	bne.n	800226c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2270      	movs	r2, #112	; 0x70
 800225e:	4393      	bics	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <TIM_Base_SetConfig+0xd4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d014      	beq.n	800229e <TIM_Base_SetConfig+0x6e>
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	05db      	lsls	r3, r3, #23
 800227a:	429a      	cmp	r2, r3
 800227c:	d00f      	beq.n	800229e <TIM_Base_SetConfig+0x6e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <TIM_Base_SetConfig+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00b      	beq.n	800229e <TIM_Base_SetConfig+0x6e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <TIM_Base_SetConfig+0xdc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <TIM_Base_SetConfig+0x6e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <TIM_Base_SetConfig+0xe0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d003      	beq.n	800229e <TIM_Base_SetConfig+0x6e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <TIM_Base_SetConfig+0xe4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d108      	bne.n	80022b0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <TIM_Base_SetConfig+0xe8>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2280      	movs	r2, #128	; 0x80
 80022b4:	4393      	bics	r3, r2
 80022b6:	001a      	movs	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <TIM_Base_SetConfig+0xd4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <TIM_Base_SetConfig+0xbe>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <TIM_Base_SetConfig+0xe0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d003      	beq.n	80022ee <TIM_Base_SetConfig+0xbe>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <TIM_Base_SetConfig+0xe4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d103      	bne.n	80022f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	615a      	str	r2, [r3, #20]
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40000400 	.word	0x40000400
 800230c:	40002000 	.word	0x40002000
 8002310:	40014400 	.word	0x40014400
 8002314:	40014800 	.word	0x40014800
 8002318:	fffffcff 	.word	0xfffffcff

0800231c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2201      	movs	r2, #1
 8002334:	4393      	bics	r3, r2
 8002336:	001a      	movs	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	22f0      	movs	r2, #240	; 0xf0
 8002346:	4393      	bics	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	220a      	movs	r2, #10
 8002358:	4393      	bics	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	621a      	str	r2, [r3, #32]
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b006      	add	sp, #24
 8002376:	bd80      	pop	{r7, pc}

08002378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	2210      	movs	r2, #16
 800238a:	4393      	bics	r3, r2
 800238c:	001a      	movs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <TIM_TI2_ConfigInputStage+0x60>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	031b      	lsls	r3, r3, #12
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	22a0      	movs	r2, #160	; 0xa0
 80023b4:	4393      	bics	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b006      	add	sp, #24
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	ffff0fff 	.word	0xffff0fff

080023dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2270      	movs	r2, #112	; 0x70
 80023f0:	4393      	bics	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	2207      	movs	r2, #7
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	609a      	str	r2, [r3, #8]
}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	46bd      	mov	sp, r7
 800240a:	b004      	add	sp, #16
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <TIM_ETR_SetConfig+0x3c>)
 8002428:	4013      	ands	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	021a      	lsls	r2, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	431a      	orrs	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	4313      	orrs	r3, r2
 800243c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	ffff00ff 	.word	0xffff00ff

08002450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	221f      	movs	r2, #31
 8002460:	4013      	ands	r3, r2
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	0013      	movs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1a      	ldr	r2, [r3, #32]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	211f      	movs	r1, #31
 8002480:	400b      	ands	r3, r1
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4099      	lsls	r1, r3
 8002486:	000b      	movs	r3, r1
 8002488:	431a      	orrs	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223c      	movs	r2, #60	; 0x3c
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e042      	b.n	8002536 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	223c      	movs	r2, #60	; 0x3c
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223d      	movs	r2, #61	; 0x3d
 80024bc:	2102      	movs	r1, #2
 80024be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2270      	movs	r2, #112	; 0x70
 80024d4:	4393      	bics	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00a      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	2380      	movs	r3, #128	; 0x80
 80024fa:	05db      	lsls	r3, r3, #23
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d004      	beq.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10c      	bne.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	4393      	bics	r3, r2
 8002510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	223d      	movs	r2, #61	; 0x3d
 8002528:	2101      	movs	r1, #1
 800252a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	223c      	movs	r2, #60	; 0x3c
 8002530:	2100      	movs	r1, #0
 8002532:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400

08002548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <__errno>:
 8002568:	4b01      	ldr	r3, [pc, #4]	; (8002570 <__errno+0x8>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	4770      	bx	lr
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	20000020 	.word	0x20000020

08002574 <__libc_init_array>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	2600      	movs	r6, #0
 8002578:	4d0c      	ldr	r5, [pc, #48]	; (80025ac <__libc_init_array+0x38>)
 800257a:	4c0d      	ldr	r4, [pc, #52]	; (80025b0 <__libc_init_array+0x3c>)
 800257c:	1b64      	subs	r4, r4, r5
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	42a6      	cmp	r6, r4
 8002582:	d109      	bne.n	8002598 <__libc_init_array+0x24>
 8002584:	2600      	movs	r6, #0
 8002586:	f000 fc5b 	bl	8002e40 <_init>
 800258a:	4d0a      	ldr	r5, [pc, #40]	; (80025b4 <__libc_init_array+0x40>)
 800258c:	4c0a      	ldr	r4, [pc, #40]	; (80025b8 <__libc_init_array+0x44>)
 800258e:	1b64      	subs	r4, r4, r5
 8002590:	10a4      	asrs	r4, r4, #2
 8002592:	42a6      	cmp	r6, r4
 8002594:	d105      	bne.n	80025a2 <__libc_init_array+0x2e>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	00b3      	lsls	r3, r6, #2
 800259a:	58eb      	ldr	r3, [r5, r3]
 800259c:	4798      	blx	r3
 800259e:	3601      	adds	r6, #1
 80025a0:	e7ee      	b.n	8002580 <__libc_init_array+0xc>
 80025a2:	00b3      	lsls	r3, r6, #2
 80025a4:	58eb      	ldr	r3, [r5, r3]
 80025a6:	4798      	blx	r3
 80025a8:	3601      	adds	r6, #1
 80025aa:	e7f2      	b.n	8002592 <__libc_init_array+0x1e>
 80025ac:	08002ecc 	.word	0x08002ecc
 80025b0:	08002ecc 	.word	0x08002ecc
 80025b4:	08002ecc 	.word	0x08002ecc
 80025b8:	08002ed0 	.word	0x08002ed0

080025bc <memset>:
 80025bc:	0003      	movs	r3, r0
 80025be:	1882      	adds	r2, r0, r2
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <memset+0xa>
 80025c4:	4770      	bx	lr
 80025c6:	7019      	strb	r1, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e7f9      	b.n	80025c0 <memset+0x4>

080025cc <sniprintf>:
 80025cc:	b40c      	push	{r2, r3}
 80025ce:	b530      	push	{r4, r5, lr}
 80025d0:	4b17      	ldr	r3, [pc, #92]	; (8002630 <sniprintf+0x64>)
 80025d2:	000c      	movs	r4, r1
 80025d4:	681d      	ldr	r5, [r3, #0]
 80025d6:	b09d      	sub	sp, #116	; 0x74
 80025d8:	2900      	cmp	r1, #0
 80025da:	da08      	bge.n	80025ee <sniprintf+0x22>
 80025dc:	238b      	movs	r3, #139	; 0x8b
 80025de:	2001      	movs	r0, #1
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	4240      	negs	r0, r0
 80025e4:	b01d      	add	sp, #116	; 0x74
 80025e6:	bc30      	pop	{r4, r5}
 80025e8:	bc08      	pop	{r3}
 80025ea:	b002      	add	sp, #8
 80025ec:	4718      	bx	r3
 80025ee:	2382      	movs	r3, #130	; 0x82
 80025f0:	466a      	mov	r2, sp
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	8293      	strh	r3, [r2, #20]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9002      	str	r0, [sp, #8]
 80025fa:	9006      	str	r0, [sp, #24]
 80025fc:	4299      	cmp	r1, r3
 80025fe:	d000      	beq.n	8002602 <sniprintf+0x36>
 8002600:	1e4b      	subs	r3, r1, #1
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	9307      	str	r3, [sp, #28]
 8002606:	2301      	movs	r3, #1
 8002608:	466a      	mov	r2, sp
 800260a:	425b      	negs	r3, r3
 800260c:	82d3      	strh	r3, [r2, #22]
 800260e:	0028      	movs	r0, r5
 8002610:	ab21      	add	r3, sp, #132	; 0x84
 8002612:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002614:	a902      	add	r1, sp, #8
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	f000 f86e 	bl	80026f8 <_svfiprintf_r>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	da01      	bge.n	8002624 <sniprintf+0x58>
 8002620:	238b      	movs	r3, #139	; 0x8b
 8002622:	602b      	str	r3, [r5, #0]
 8002624:	2c00      	cmp	r4, #0
 8002626:	d0dd      	beq.n	80025e4 <sniprintf+0x18>
 8002628:	2300      	movs	r3, #0
 800262a:	9a02      	ldr	r2, [sp, #8]
 800262c:	7013      	strb	r3, [r2, #0]
 800262e:	e7d9      	b.n	80025e4 <sniprintf+0x18>
 8002630:	20000020 	.word	0x20000020

08002634 <__ssputs_r>:
 8002634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002636:	688e      	ldr	r6, [r1, #8]
 8002638:	b085      	sub	sp, #20
 800263a:	0007      	movs	r7, r0
 800263c:	000c      	movs	r4, r1
 800263e:	9203      	str	r2, [sp, #12]
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	429e      	cmp	r6, r3
 8002644:	d83c      	bhi.n	80026c0 <__ssputs_r+0x8c>
 8002646:	2390      	movs	r3, #144	; 0x90
 8002648:	898a      	ldrh	r2, [r1, #12]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	421a      	tst	r2, r3
 800264e:	d034      	beq.n	80026ba <__ssputs_r+0x86>
 8002650:	2503      	movs	r5, #3
 8002652:	6909      	ldr	r1, [r1, #16]
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	1a5b      	subs	r3, r3, r1
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	6963      	ldr	r3, [r4, #20]
 800265c:	9802      	ldr	r0, [sp, #8]
 800265e:	435d      	muls	r5, r3
 8002660:	0feb      	lsrs	r3, r5, #31
 8002662:	195d      	adds	r5, r3, r5
 8002664:	9b01      	ldr	r3, [sp, #4]
 8002666:	106d      	asrs	r5, r5, #1
 8002668:	3301      	adds	r3, #1
 800266a:	181b      	adds	r3, r3, r0
 800266c:	42ab      	cmp	r3, r5
 800266e:	d900      	bls.n	8002672 <__ssputs_r+0x3e>
 8002670:	001d      	movs	r5, r3
 8002672:	0553      	lsls	r3, r2, #21
 8002674:	d532      	bpl.n	80026dc <__ssputs_r+0xa8>
 8002676:	0029      	movs	r1, r5
 8002678:	0038      	movs	r0, r7
 800267a:	f000 fb31 	bl	8002ce0 <_malloc_r>
 800267e:	1e06      	subs	r6, r0, #0
 8002680:	d109      	bne.n	8002696 <__ssputs_r+0x62>
 8002682:	230c      	movs	r3, #12
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	2001      	movs	r0, #1
 800268a:	89a2      	ldrh	r2, [r4, #12]
 800268c:	4240      	negs	r0, r0
 800268e:	4313      	orrs	r3, r2
 8002690:	81a3      	strh	r3, [r4, #12]
 8002692:	b005      	add	sp, #20
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002696:	9a02      	ldr	r2, [sp, #8]
 8002698:	6921      	ldr	r1, [r4, #16]
 800269a:	f000 faba 	bl	8002c12 <memcpy>
 800269e:	89a3      	ldrh	r3, [r4, #12]
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <__ssputs_r+0xc0>)
 80026a2:	401a      	ands	r2, r3
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	4313      	orrs	r3, r2
 80026a8:	81a3      	strh	r3, [r4, #12]
 80026aa:	9b02      	ldr	r3, [sp, #8]
 80026ac:	6126      	str	r6, [r4, #16]
 80026ae:	18f6      	adds	r6, r6, r3
 80026b0:	6026      	str	r6, [r4, #0]
 80026b2:	6165      	str	r5, [r4, #20]
 80026b4:	9e01      	ldr	r6, [sp, #4]
 80026b6:	1aed      	subs	r5, r5, r3
 80026b8:	60a5      	str	r5, [r4, #8]
 80026ba:	9b01      	ldr	r3, [sp, #4]
 80026bc:	429e      	cmp	r6, r3
 80026be:	d900      	bls.n	80026c2 <__ssputs_r+0x8e>
 80026c0:	9e01      	ldr	r6, [sp, #4]
 80026c2:	0032      	movs	r2, r6
 80026c4:	9903      	ldr	r1, [sp, #12]
 80026c6:	6820      	ldr	r0, [r4, #0]
 80026c8:	f000 faac 	bl	8002c24 <memmove>
 80026cc:	68a3      	ldr	r3, [r4, #8]
 80026ce:	2000      	movs	r0, #0
 80026d0:	1b9b      	subs	r3, r3, r6
 80026d2:	60a3      	str	r3, [r4, #8]
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	199e      	adds	r6, r3, r6
 80026d8:	6026      	str	r6, [r4, #0]
 80026da:	e7da      	b.n	8002692 <__ssputs_r+0x5e>
 80026dc:	002a      	movs	r2, r5
 80026de:	0038      	movs	r0, r7
 80026e0:	f000 fb5c 	bl	8002d9c <_realloc_r>
 80026e4:	1e06      	subs	r6, r0, #0
 80026e6:	d1e0      	bne.n	80026aa <__ssputs_r+0x76>
 80026e8:	0038      	movs	r0, r7
 80026ea:	6921      	ldr	r1, [r4, #16]
 80026ec:	f000 faae 	bl	8002c4c <_free_r>
 80026f0:	e7c7      	b.n	8002682 <__ssputs_r+0x4e>
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	fffffb7f 	.word	0xfffffb7f

080026f8 <_svfiprintf_r>:
 80026f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fa:	b0a1      	sub	sp, #132	; 0x84
 80026fc:	9003      	str	r0, [sp, #12]
 80026fe:	001d      	movs	r5, r3
 8002700:	898b      	ldrh	r3, [r1, #12]
 8002702:	000f      	movs	r7, r1
 8002704:	0016      	movs	r6, r2
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	d511      	bpl.n	800272e <_svfiprintf_r+0x36>
 800270a:	690b      	ldr	r3, [r1, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10e      	bne.n	800272e <_svfiprintf_r+0x36>
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	f000 fae5 	bl	8002ce0 <_malloc_r>
 8002716:	6038      	str	r0, [r7, #0]
 8002718:	6138      	str	r0, [r7, #16]
 800271a:	2800      	cmp	r0, #0
 800271c:	d105      	bne.n	800272a <_svfiprintf_r+0x32>
 800271e:	230c      	movs	r3, #12
 8002720:	9a03      	ldr	r2, [sp, #12]
 8002722:	3801      	subs	r0, #1
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	b021      	add	sp, #132	; 0x84
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272a:	2340      	movs	r3, #64	; 0x40
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	2300      	movs	r3, #0
 8002730:	ac08      	add	r4, sp, #32
 8002732:	6163      	str	r3, [r4, #20]
 8002734:	3320      	adds	r3, #32
 8002736:	7663      	strb	r3, [r4, #25]
 8002738:	3310      	adds	r3, #16
 800273a:	76a3      	strb	r3, [r4, #26]
 800273c:	9507      	str	r5, [sp, #28]
 800273e:	0035      	movs	r5, r6
 8002740:	782b      	ldrb	r3, [r5, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <_svfiprintf_r+0x52>
 8002746:	2b25      	cmp	r3, #37	; 0x25
 8002748:	d147      	bne.n	80027da <_svfiprintf_r+0xe2>
 800274a:	1bab      	subs	r3, r5, r6
 800274c:	9305      	str	r3, [sp, #20]
 800274e:	42b5      	cmp	r5, r6
 8002750:	d00c      	beq.n	800276c <_svfiprintf_r+0x74>
 8002752:	0032      	movs	r2, r6
 8002754:	0039      	movs	r1, r7
 8002756:	9803      	ldr	r0, [sp, #12]
 8002758:	f7ff ff6c 	bl	8002634 <__ssputs_r>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d100      	bne.n	8002762 <_svfiprintf_r+0x6a>
 8002760:	e0ae      	b.n	80028c0 <_svfiprintf_r+0x1c8>
 8002762:	6962      	ldr	r2, [r4, #20]
 8002764:	9b05      	ldr	r3, [sp, #20]
 8002766:	4694      	mov	ip, r2
 8002768:	4463      	add	r3, ip
 800276a:	6163      	str	r3, [r4, #20]
 800276c:	782b      	ldrb	r3, [r5, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d100      	bne.n	8002774 <_svfiprintf_r+0x7c>
 8002772:	e0a5      	b.n	80028c0 <_svfiprintf_r+0x1c8>
 8002774:	2201      	movs	r2, #1
 8002776:	2300      	movs	r3, #0
 8002778:	4252      	negs	r2, r2
 800277a:	6062      	str	r2, [r4, #4]
 800277c:	a904      	add	r1, sp, #16
 800277e:	3254      	adds	r2, #84	; 0x54
 8002780:	1852      	adds	r2, r2, r1
 8002782:	1c6e      	adds	r6, r5, #1
 8002784:	6023      	str	r3, [r4, #0]
 8002786:	60e3      	str	r3, [r4, #12]
 8002788:	60a3      	str	r3, [r4, #8]
 800278a:	7013      	strb	r3, [r2, #0]
 800278c:	65a3      	str	r3, [r4, #88]	; 0x58
 800278e:	2205      	movs	r2, #5
 8002790:	7831      	ldrb	r1, [r6, #0]
 8002792:	4854      	ldr	r0, [pc, #336]	; (80028e4 <_svfiprintf_r+0x1ec>)
 8002794:	f000 fa32 	bl	8002bfc <memchr>
 8002798:	1c75      	adds	r5, r6, #1
 800279a:	2800      	cmp	r0, #0
 800279c:	d11f      	bne.n	80027de <_svfiprintf_r+0xe6>
 800279e:	6822      	ldr	r2, [r4, #0]
 80027a0:	06d3      	lsls	r3, r2, #27
 80027a2:	d504      	bpl.n	80027ae <_svfiprintf_r+0xb6>
 80027a4:	2353      	movs	r3, #83	; 0x53
 80027a6:	a904      	add	r1, sp, #16
 80027a8:	185b      	adds	r3, r3, r1
 80027aa:	2120      	movs	r1, #32
 80027ac:	7019      	strb	r1, [r3, #0]
 80027ae:	0713      	lsls	r3, r2, #28
 80027b0:	d504      	bpl.n	80027bc <_svfiprintf_r+0xc4>
 80027b2:	2353      	movs	r3, #83	; 0x53
 80027b4:	a904      	add	r1, sp, #16
 80027b6:	185b      	adds	r3, r3, r1
 80027b8:	212b      	movs	r1, #43	; 0x2b
 80027ba:	7019      	strb	r1, [r3, #0]
 80027bc:	7833      	ldrb	r3, [r6, #0]
 80027be:	2b2a      	cmp	r3, #42	; 0x2a
 80027c0:	d016      	beq.n	80027f0 <_svfiprintf_r+0xf8>
 80027c2:	0035      	movs	r5, r6
 80027c4:	2100      	movs	r1, #0
 80027c6:	200a      	movs	r0, #10
 80027c8:	68e3      	ldr	r3, [r4, #12]
 80027ca:	782a      	ldrb	r2, [r5, #0]
 80027cc:	1c6e      	adds	r6, r5, #1
 80027ce:	3a30      	subs	r2, #48	; 0x30
 80027d0:	2a09      	cmp	r2, #9
 80027d2:	d94e      	bls.n	8002872 <_svfiprintf_r+0x17a>
 80027d4:	2900      	cmp	r1, #0
 80027d6:	d111      	bne.n	80027fc <_svfiprintf_r+0x104>
 80027d8:	e017      	b.n	800280a <_svfiprintf_r+0x112>
 80027da:	3501      	adds	r5, #1
 80027dc:	e7b0      	b.n	8002740 <_svfiprintf_r+0x48>
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <_svfiprintf_r+0x1ec>)
 80027e0:	6822      	ldr	r2, [r4, #0]
 80027e2:	1ac0      	subs	r0, r0, r3
 80027e4:	2301      	movs	r3, #1
 80027e6:	4083      	lsls	r3, r0
 80027e8:	4313      	orrs	r3, r2
 80027ea:	002e      	movs	r6, r5
 80027ec:	6023      	str	r3, [r4, #0]
 80027ee:	e7ce      	b.n	800278e <_svfiprintf_r+0x96>
 80027f0:	9b07      	ldr	r3, [sp, #28]
 80027f2:	1d19      	adds	r1, r3, #4
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	9107      	str	r1, [sp, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db01      	blt.n	8002800 <_svfiprintf_r+0x108>
 80027fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80027fe:	e004      	b.n	800280a <_svfiprintf_r+0x112>
 8002800:	425b      	negs	r3, r3
 8002802:	60e3      	str	r3, [r4, #12]
 8002804:	2302      	movs	r3, #2
 8002806:	4313      	orrs	r3, r2
 8002808:	6023      	str	r3, [r4, #0]
 800280a:	782b      	ldrb	r3, [r5, #0]
 800280c:	2b2e      	cmp	r3, #46	; 0x2e
 800280e:	d10a      	bne.n	8002826 <_svfiprintf_r+0x12e>
 8002810:	786b      	ldrb	r3, [r5, #1]
 8002812:	2b2a      	cmp	r3, #42	; 0x2a
 8002814:	d135      	bne.n	8002882 <_svfiprintf_r+0x18a>
 8002816:	9b07      	ldr	r3, [sp, #28]
 8002818:	3502      	adds	r5, #2
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	9207      	str	r2, [sp, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db2b      	blt.n	800287c <_svfiprintf_r+0x184>
 8002824:	9309      	str	r3, [sp, #36]	; 0x24
 8002826:	4e30      	ldr	r6, [pc, #192]	; (80028e8 <_svfiprintf_r+0x1f0>)
 8002828:	2203      	movs	r2, #3
 800282a:	0030      	movs	r0, r6
 800282c:	7829      	ldrb	r1, [r5, #0]
 800282e:	f000 f9e5 	bl	8002bfc <memchr>
 8002832:	2800      	cmp	r0, #0
 8002834:	d006      	beq.n	8002844 <_svfiprintf_r+0x14c>
 8002836:	2340      	movs	r3, #64	; 0x40
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	4083      	lsls	r3, r0
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	3501      	adds	r5, #1
 8002840:	4313      	orrs	r3, r2
 8002842:	6023      	str	r3, [r4, #0]
 8002844:	7829      	ldrb	r1, [r5, #0]
 8002846:	2206      	movs	r2, #6
 8002848:	4828      	ldr	r0, [pc, #160]	; (80028ec <_svfiprintf_r+0x1f4>)
 800284a:	1c6e      	adds	r6, r5, #1
 800284c:	7621      	strb	r1, [r4, #24]
 800284e:	f000 f9d5 	bl	8002bfc <memchr>
 8002852:	2800      	cmp	r0, #0
 8002854:	d03c      	beq.n	80028d0 <_svfiprintf_r+0x1d8>
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <_svfiprintf_r+0x1f8>)
 8002858:	2b00      	cmp	r3, #0
 800285a:	d125      	bne.n	80028a8 <_svfiprintf_r+0x1b0>
 800285c:	2207      	movs	r2, #7
 800285e:	9b07      	ldr	r3, [sp, #28]
 8002860:	3307      	adds	r3, #7
 8002862:	4393      	bics	r3, r2
 8002864:	3308      	adds	r3, #8
 8002866:	9307      	str	r3, [sp, #28]
 8002868:	6963      	ldr	r3, [r4, #20]
 800286a:	9a04      	ldr	r2, [sp, #16]
 800286c:	189b      	adds	r3, r3, r2
 800286e:	6163      	str	r3, [r4, #20]
 8002870:	e765      	b.n	800273e <_svfiprintf_r+0x46>
 8002872:	4343      	muls	r3, r0
 8002874:	0035      	movs	r5, r6
 8002876:	2101      	movs	r1, #1
 8002878:	189b      	adds	r3, r3, r2
 800287a:	e7a6      	b.n	80027ca <_svfiprintf_r+0xd2>
 800287c:	2301      	movs	r3, #1
 800287e:	425b      	negs	r3, r3
 8002880:	e7d0      	b.n	8002824 <_svfiprintf_r+0x12c>
 8002882:	2300      	movs	r3, #0
 8002884:	200a      	movs	r0, #10
 8002886:	001a      	movs	r2, r3
 8002888:	3501      	adds	r5, #1
 800288a:	6063      	str	r3, [r4, #4]
 800288c:	7829      	ldrb	r1, [r5, #0]
 800288e:	1c6e      	adds	r6, r5, #1
 8002890:	3930      	subs	r1, #48	; 0x30
 8002892:	2909      	cmp	r1, #9
 8002894:	d903      	bls.n	800289e <_svfiprintf_r+0x1a6>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0c5      	beq.n	8002826 <_svfiprintf_r+0x12e>
 800289a:	9209      	str	r2, [sp, #36]	; 0x24
 800289c:	e7c3      	b.n	8002826 <_svfiprintf_r+0x12e>
 800289e:	4342      	muls	r2, r0
 80028a0:	0035      	movs	r5, r6
 80028a2:	2301      	movs	r3, #1
 80028a4:	1852      	adds	r2, r2, r1
 80028a6:	e7f1      	b.n	800288c <_svfiprintf_r+0x194>
 80028a8:	ab07      	add	r3, sp, #28
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	003a      	movs	r2, r7
 80028ae:	0021      	movs	r1, r4
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_svfiprintf_r+0x1fc>)
 80028b2:	9803      	ldr	r0, [sp, #12]
 80028b4:	e000      	b.n	80028b8 <_svfiprintf_r+0x1c0>
 80028b6:	bf00      	nop
 80028b8:	9004      	str	r0, [sp, #16]
 80028ba:	9b04      	ldr	r3, [sp, #16]
 80028bc:	3301      	adds	r3, #1
 80028be:	d1d3      	bne.n	8002868 <_svfiprintf_r+0x170>
 80028c0:	89bb      	ldrh	r3, [r7, #12]
 80028c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80028c4:	065b      	lsls	r3, r3, #25
 80028c6:	d400      	bmi.n	80028ca <_svfiprintf_r+0x1d2>
 80028c8:	e72d      	b.n	8002726 <_svfiprintf_r+0x2e>
 80028ca:	2001      	movs	r0, #1
 80028cc:	4240      	negs	r0, r0
 80028ce:	e72a      	b.n	8002726 <_svfiprintf_r+0x2e>
 80028d0:	ab07      	add	r3, sp, #28
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	003a      	movs	r2, r7
 80028d6:	0021      	movs	r1, r4
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <_svfiprintf_r+0x1fc>)
 80028da:	9803      	ldr	r0, [sp, #12]
 80028dc:	f000 f87c 	bl	80029d8 <_printf_i>
 80028e0:	e7ea      	b.n	80028b8 <_svfiprintf_r+0x1c0>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	08002e98 	.word	0x08002e98
 80028e8:	08002e9e 	.word	0x08002e9e
 80028ec:	08002ea2 	.word	0x08002ea2
 80028f0:	00000000 	.word	0x00000000
 80028f4:	08002635 	.word	0x08002635

080028f8 <_printf_common>:
 80028f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028fa:	0015      	movs	r5, r2
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	688a      	ldr	r2, [r1, #8]
 8002900:	690b      	ldr	r3, [r1, #16]
 8002902:	000c      	movs	r4, r1
 8002904:	9000      	str	r0, [sp, #0]
 8002906:	4293      	cmp	r3, r2
 8002908:	da00      	bge.n	800290c <_printf_common+0x14>
 800290a:	0013      	movs	r3, r2
 800290c:	0022      	movs	r2, r4
 800290e:	602b      	str	r3, [r5, #0]
 8002910:	3243      	adds	r2, #67	; 0x43
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	2a00      	cmp	r2, #0
 8002916:	d001      	beq.n	800291c <_printf_common+0x24>
 8002918:	3301      	adds	r3, #1
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	069b      	lsls	r3, r3, #26
 8002920:	d502      	bpl.n	8002928 <_printf_common+0x30>
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	3302      	adds	r3, #2
 8002926:	602b      	str	r3, [r5, #0]
 8002928:	6822      	ldr	r2, [r4, #0]
 800292a:	2306      	movs	r3, #6
 800292c:	0017      	movs	r7, r2
 800292e:	401f      	ands	r7, r3
 8002930:	421a      	tst	r2, r3
 8002932:	d027      	beq.n	8002984 <_printf_common+0x8c>
 8002934:	0023      	movs	r3, r4
 8002936:	3343      	adds	r3, #67	; 0x43
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	4193      	sbcs	r3, r2
 800293e:	6822      	ldr	r2, [r4, #0]
 8002940:	0692      	lsls	r2, r2, #26
 8002942:	d430      	bmi.n	80029a6 <_printf_common+0xae>
 8002944:	0022      	movs	r2, r4
 8002946:	9901      	ldr	r1, [sp, #4]
 8002948:	9800      	ldr	r0, [sp, #0]
 800294a:	9e08      	ldr	r6, [sp, #32]
 800294c:	3243      	adds	r2, #67	; 0x43
 800294e:	47b0      	blx	r6
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d025      	beq.n	80029a0 <_printf_common+0xa8>
 8002954:	2306      	movs	r3, #6
 8002956:	6820      	ldr	r0, [r4, #0]
 8002958:	682a      	ldr	r2, [r5, #0]
 800295a:	68e1      	ldr	r1, [r4, #12]
 800295c:	2500      	movs	r5, #0
 800295e:	4003      	ands	r3, r0
 8002960:	2b04      	cmp	r3, #4
 8002962:	d103      	bne.n	800296c <_printf_common+0x74>
 8002964:	1a8d      	subs	r5, r1, r2
 8002966:	43eb      	mvns	r3, r5
 8002968:	17db      	asrs	r3, r3, #31
 800296a:	401d      	ands	r5, r3
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	6922      	ldr	r2, [r4, #16]
 8002970:	4293      	cmp	r3, r2
 8002972:	dd01      	ble.n	8002978 <_printf_common+0x80>
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	18ed      	adds	r5, r5, r3
 8002978:	2700      	movs	r7, #0
 800297a:	42bd      	cmp	r5, r7
 800297c:	d120      	bne.n	80029c0 <_printf_common+0xc8>
 800297e:	2000      	movs	r0, #0
 8002980:	e010      	b.n	80029a4 <_printf_common+0xac>
 8002982:	3701      	adds	r7, #1
 8002984:	68e3      	ldr	r3, [r4, #12]
 8002986:	682a      	ldr	r2, [r5, #0]
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	42bb      	cmp	r3, r7
 800298c:	ddd2      	ble.n	8002934 <_printf_common+0x3c>
 800298e:	0022      	movs	r2, r4
 8002990:	2301      	movs	r3, #1
 8002992:	9901      	ldr	r1, [sp, #4]
 8002994:	9800      	ldr	r0, [sp, #0]
 8002996:	9e08      	ldr	r6, [sp, #32]
 8002998:	3219      	adds	r2, #25
 800299a:	47b0      	blx	r6
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d1f0      	bne.n	8002982 <_printf_common+0x8a>
 80029a0:	2001      	movs	r0, #1
 80029a2:	4240      	negs	r0, r0
 80029a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80029a6:	2030      	movs	r0, #48	; 0x30
 80029a8:	18e1      	adds	r1, r4, r3
 80029aa:	3143      	adds	r1, #67	; 0x43
 80029ac:	7008      	strb	r0, [r1, #0]
 80029ae:	0021      	movs	r1, r4
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	3145      	adds	r1, #69	; 0x45
 80029b4:	7809      	ldrb	r1, [r1, #0]
 80029b6:	18a2      	adds	r2, r4, r2
 80029b8:	3243      	adds	r2, #67	; 0x43
 80029ba:	3302      	adds	r3, #2
 80029bc:	7011      	strb	r1, [r2, #0]
 80029be:	e7c1      	b.n	8002944 <_printf_common+0x4c>
 80029c0:	0022      	movs	r2, r4
 80029c2:	2301      	movs	r3, #1
 80029c4:	9901      	ldr	r1, [sp, #4]
 80029c6:	9800      	ldr	r0, [sp, #0]
 80029c8:	9e08      	ldr	r6, [sp, #32]
 80029ca:	321a      	adds	r2, #26
 80029cc:	47b0      	blx	r6
 80029ce:	1c43      	adds	r3, r0, #1
 80029d0:	d0e6      	beq.n	80029a0 <_printf_common+0xa8>
 80029d2:	3701      	adds	r7, #1
 80029d4:	e7d1      	b.n	800297a <_printf_common+0x82>
	...

080029d8 <_printf_i>:
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	b08b      	sub	sp, #44	; 0x2c
 80029dc:	9206      	str	r2, [sp, #24]
 80029de:	000a      	movs	r2, r1
 80029e0:	3243      	adds	r2, #67	; 0x43
 80029e2:	9307      	str	r3, [sp, #28]
 80029e4:	9005      	str	r0, [sp, #20]
 80029e6:	9204      	str	r2, [sp, #16]
 80029e8:	7e0a      	ldrb	r2, [r1, #24]
 80029ea:	000c      	movs	r4, r1
 80029ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029ee:	2a78      	cmp	r2, #120	; 0x78
 80029f0:	d806      	bhi.n	8002a00 <_printf_i+0x28>
 80029f2:	2a62      	cmp	r2, #98	; 0x62
 80029f4:	d808      	bhi.n	8002a08 <_printf_i+0x30>
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	d100      	bne.n	80029fc <_printf_i+0x24>
 80029fa:	e0c0      	b.n	8002b7e <_printf_i+0x1a6>
 80029fc:	2a58      	cmp	r2, #88	; 0x58
 80029fe:	d052      	beq.n	8002aa6 <_printf_i+0xce>
 8002a00:	0026      	movs	r6, r4
 8002a02:	3642      	adds	r6, #66	; 0x42
 8002a04:	7032      	strb	r2, [r6, #0]
 8002a06:	e022      	b.n	8002a4e <_printf_i+0x76>
 8002a08:	0010      	movs	r0, r2
 8002a0a:	3863      	subs	r0, #99	; 0x63
 8002a0c:	2815      	cmp	r0, #21
 8002a0e:	d8f7      	bhi.n	8002a00 <_printf_i+0x28>
 8002a10:	f7fd fb7a 	bl	8000108 <__gnu_thumb1_case_shi>
 8002a14:	001f0016 	.word	0x001f0016
 8002a18:	fff6fff6 	.word	0xfff6fff6
 8002a1c:	fff6fff6 	.word	0xfff6fff6
 8002a20:	fff6001f 	.word	0xfff6001f
 8002a24:	fff6fff6 	.word	0xfff6fff6
 8002a28:	00a8fff6 	.word	0x00a8fff6
 8002a2c:	009a0036 	.word	0x009a0036
 8002a30:	fff6fff6 	.word	0xfff6fff6
 8002a34:	fff600b9 	.word	0xfff600b9
 8002a38:	fff60036 	.word	0xfff60036
 8002a3c:	009efff6 	.word	0x009efff6
 8002a40:	0026      	movs	r6, r4
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	3642      	adds	r6, #66	; 0x42
 8002a46:	1d11      	adds	r1, r2, #4
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	6813      	ldr	r3, [r2, #0]
 8002a4c:	7033      	strb	r3, [r6, #0]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0a7      	b.n	8002ba2 <_printf_i+0x1ca>
 8002a52:	6808      	ldr	r0, [r1, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	1d0a      	adds	r2, r1, #4
 8002a58:	0605      	lsls	r5, r0, #24
 8002a5a:	d50b      	bpl.n	8002a74 <_printf_i+0x9c>
 8002a5c:	680d      	ldr	r5, [r1, #0]
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	da03      	bge.n	8002a6c <_printf_i+0x94>
 8002a64:	232d      	movs	r3, #45	; 0x2d
 8002a66:	9a04      	ldr	r2, [sp, #16]
 8002a68:	426d      	negs	r5, r5
 8002a6a:	7013      	strb	r3, [r2, #0]
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <_printf_i+0x21c>)
 8002a6e:	270a      	movs	r7, #10
 8002a70:	9303      	str	r3, [sp, #12]
 8002a72:	e032      	b.n	8002ada <_printf_i+0x102>
 8002a74:	680d      	ldr	r5, [r1, #0]
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	0641      	lsls	r1, r0, #25
 8002a7a:	d5f1      	bpl.n	8002a60 <_printf_i+0x88>
 8002a7c:	b22d      	sxth	r5, r5
 8002a7e:	e7ef      	b.n	8002a60 <_printf_i+0x88>
 8002a80:	680d      	ldr	r5, [r1, #0]
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	1d08      	adds	r0, r1, #4
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	062e      	lsls	r6, r5, #24
 8002a8a:	d501      	bpl.n	8002a90 <_printf_i+0xb8>
 8002a8c:	680d      	ldr	r5, [r1, #0]
 8002a8e:	e003      	b.n	8002a98 <_printf_i+0xc0>
 8002a90:	066d      	lsls	r5, r5, #25
 8002a92:	d5fb      	bpl.n	8002a8c <_printf_i+0xb4>
 8002a94:	680d      	ldr	r5, [r1, #0]
 8002a96:	b2ad      	uxth	r5, r5
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <_printf_i+0x21c>)
 8002a9a:	270a      	movs	r7, #10
 8002a9c:	9303      	str	r3, [sp, #12]
 8002a9e:	2a6f      	cmp	r2, #111	; 0x6f
 8002aa0:	d117      	bne.n	8002ad2 <_printf_i+0xfa>
 8002aa2:	2708      	movs	r7, #8
 8002aa4:	e015      	b.n	8002ad2 <_printf_i+0xfa>
 8002aa6:	3145      	adds	r1, #69	; 0x45
 8002aa8:	700a      	strb	r2, [r1, #0]
 8002aaa:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <_printf_i+0x21c>)
 8002aac:	9203      	str	r2, [sp, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	6821      	ldr	r1, [r4, #0]
 8002ab2:	ca20      	ldmia	r2!, {r5}
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	0608      	lsls	r0, r1, #24
 8002ab8:	d550      	bpl.n	8002b5c <_printf_i+0x184>
 8002aba:	07cb      	lsls	r3, r1, #31
 8002abc:	d502      	bpl.n	8002ac4 <_printf_i+0xec>
 8002abe:	2320      	movs	r3, #32
 8002ac0:	4319      	orrs	r1, r3
 8002ac2:	6021      	str	r1, [r4, #0]
 8002ac4:	2710      	movs	r7, #16
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	d103      	bne.n	8002ad2 <_printf_i+0xfa>
 8002aca:	2320      	movs	r3, #32
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	439a      	bics	r2, r3
 8002ad0:	6022      	str	r2, [r4, #0]
 8002ad2:	0023      	movs	r3, r4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	3343      	adds	r3, #67	; 0x43
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	6863      	ldr	r3, [r4, #4]
 8002adc:	60a3      	str	r3, [r4, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db03      	blt.n	8002aea <_printf_i+0x112>
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	6821      	ldr	r1, [r4, #0]
 8002ae6:	4391      	bics	r1, r2
 8002ae8:	6021      	str	r1, [r4, #0]
 8002aea:	2d00      	cmp	r5, #0
 8002aec:	d102      	bne.n	8002af4 <_printf_i+0x11c>
 8002aee:	9e04      	ldr	r6, [sp, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <_printf_i+0x136>
 8002af4:	9e04      	ldr	r6, [sp, #16]
 8002af6:	0028      	movs	r0, r5
 8002af8:	0039      	movs	r1, r7
 8002afa:	f7fd fb95 	bl	8000228 <__aeabi_uidivmod>
 8002afe:	9b03      	ldr	r3, [sp, #12]
 8002b00:	3e01      	subs	r6, #1
 8002b02:	5c5b      	ldrb	r3, [r3, r1]
 8002b04:	7033      	strb	r3, [r6, #0]
 8002b06:	002b      	movs	r3, r5
 8002b08:	0005      	movs	r5, r0
 8002b0a:	429f      	cmp	r7, r3
 8002b0c:	d9f3      	bls.n	8002af6 <_printf_i+0x11e>
 8002b0e:	2f08      	cmp	r7, #8
 8002b10:	d109      	bne.n	8002b26 <_printf_i+0x14e>
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	07db      	lsls	r3, r3, #31
 8002b16:	d506      	bpl.n	8002b26 <_printf_i+0x14e>
 8002b18:	6863      	ldr	r3, [r4, #4]
 8002b1a:	6922      	ldr	r2, [r4, #16]
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	dc02      	bgt.n	8002b26 <_printf_i+0x14e>
 8002b20:	2330      	movs	r3, #48	; 0x30
 8002b22:	3e01      	subs	r6, #1
 8002b24:	7033      	strb	r3, [r6, #0]
 8002b26:	9b04      	ldr	r3, [sp, #16]
 8002b28:	1b9b      	subs	r3, r3, r6
 8002b2a:	6123      	str	r3, [r4, #16]
 8002b2c:	9b07      	ldr	r3, [sp, #28]
 8002b2e:	0021      	movs	r1, r4
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	9805      	ldr	r0, [sp, #20]
 8002b34:	9b06      	ldr	r3, [sp, #24]
 8002b36:	aa09      	add	r2, sp, #36	; 0x24
 8002b38:	f7ff fede 	bl	80028f8 <_printf_common>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d135      	bne.n	8002bac <_printf_i+0x1d4>
 8002b40:	2001      	movs	r0, #1
 8002b42:	4240      	negs	r0, r0
 8002b44:	b00b      	add	sp, #44	; 0x2c
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b48:	2220      	movs	r2, #32
 8002b4a:	6809      	ldr	r1, [r1, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	6022      	str	r2, [r4, #0]
 8002b50:	0022      	movs	r2, r4
 8002b52:	2178      	movs	r1, #120	; 0x78
 8002b54:	3245      	adds	r2, #69	; 0x45
 8002b56:	7011      	strb	r1, [r2, #0]
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <_printf_i+0x220>)
 8002b5a:	e7a7      	b.n	8002aac <_printf_i+0xd4>
 8002b5c:	0648      	lsls	r0, r1, #25
 8002b5e:	d5ac      	bpl.n	8002aba <_printf_i+0xe2>
 8002b60:	b2ad      	uxth	r5, r5
 8002b62:	e7aa      	b.n	8002aba <_printf_i+0xe2>
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	680d      	ldr	r5, [r1, #0]
 8002b68:	1d10      	adds	r0, r2, #4
 8002b6a:	6949      	ldr	r1, [r1, #20]
 8002b6c:	6018      	str	r0, [r3, #0]
 8002b6e:	6813      	ldr	r3, [r2, #0]
 8002b70:	062e      	lsls	r6, r5, #24
 8002b72:	d501      	bpl.n	8002b78 <_printf_i+0x1a0>
 8002b74:	6019      	str	r1, [r3, #0]
 8002b76:	e002      	b.n	8002b7e <_printf_i+0x1a6>
 8002b78:	066d      	lsls	r5, r5, #25
 8002b7a:	d5fb      	bpl.n	8002b74 <_printf_i+0x19c>
 8002b7c:	8019      	strh	r1, [r3, #0]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9e04      	ldr	r6, [sp, #16]
 8002b82:	6123      	str	r3, [r4, #16]
 8002b84:	e7d2      	b.n	8002b2c <_printf_i+0x154>
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	1d11      	adds	r1, r2, #4
 8002b8a:	6019      	str	r1, [r3, #0]
 8002b8c:	6816      	ldr	r6, [r2, #0]
 8002b8e:	2100      	movs	r1, #0
 8002b90:	0030      	movs	r0, r6
 8002b92:	6862      	ldr	r2, [r4, #4]
 8002b94:	f000 f832 	bl	8002bfc <memchr>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d001      	beq.n	8002ba0 <_printf_i+0x1c8>
 8002b9c:	1b80      	subs	r0, r0, r6
 8002b9e:	6060      	str	r0, [r4, #4]
 8002ba0:	6863      	ldr	r3, [r4, #4]
 8002ba2:	6123      	str	r3, [r4, #16]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9a04      	ldr	r2, [sp, #16]
 8002ba8:	7013      	strb	r3, [r2, #0]
 8002baa:	e7bf      	b.n	8002b2c <_printf_i+0x154>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	0032      	movs	r2, r6
 8002bb0:	9906      	ldr	r1, [sp, #24]
 8002bb2:	9805      	ldr	r0, [sp, #20]
 8002bb4:	9d07      	ldr	r5, [sp, #28]
 8002bb6:	47a8      	blx	r5
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d0c1      	beq.n	8002b40 <_printf_i+0x168>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	079b      	lsls	r3, r3, #30
 8002bc0:	d415      	bmi.n	8002bee <_printf_i+0x216>
 8002bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc4:	68e0      	ldr	r0, [r4, #12]
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	dabc      	bge.n	8002b44 <_printf_i+0x16c>
 8002bca:	0018      	movs	r0, r3
 8002bcc:	e7ba      	b.n	8002b44 <_printf_i+0x16c>
 8002bce:	0022      	movs	r2, r4
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	9906      	ldr	r1, [sp, #24]
 8002bd4:	9805      	ldr	r0, [sp, #20]
 8002bd6:	9e07      	ldr	r6, [sp, #28]
 8002bd8:	3219      	adds	r2, #25
 8002bda:	47b0      	blx	r6
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d0af      	beq.n	8002b40 <_printf_i+0x168>
 8002be0:	3501      	adds	r5, #1
 8002be2:	68e3      	ldr	r3, [r4, #12]
 8002be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	dcf0      	bgt.n	8002bce <_printf_i+0x1f6>
 8002bec:	e7e9      	b.n	8002bc2 <_printf_i+0x1ea>
 8002bee:	2500      	movs	r5, #0
 8002bf0:	e7f7      	b.n	8002be2 <_printf_i+0x20a>
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	08002ea9 	.word	0x08002ea9
 8002bf8:	08002eba 	.word	0x08002eba

08002bfc <memchr>:
 8002bfc:	b2c9      	uxtb	r1, r1
 8002bfe:	1882      	adds	r2, r0, r2
 8002c00:	4290      	cmp	r0, r2
 8002c02:	d101      	bne.n	8002c08 <memchr+0xc>
 8002c04:	2000      	movs	r0, #0
 8002c06:	4770      	bx	lr
 8002c08:	7803      	ldrb	r3, [r0, #0]
 8002c0a:	428b      	cmp	r3, r1
 8002c0c:	d0fb      	beq.n	8002c06 <memchr+0xa>
 8002c0e:	3001      	adds	r0, #1
 8002c10:	e7f6      	b.n	8002c00 <memchr+0x4>

08002c12 <memcpy>:
 8002c12:	2300      	movs	r3, #0
 8002c14:	b510      	push	{r4, lr}
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d100      	bne.n	8002c1c <memcpy+0xa>
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	5ccc      	ldrb	r4, [r1, r3]
 8002c1e:	54c4      	strb	r4, [r0, r3]
 8002c20:	3301      	adds	r3, #1
 8002c22:	e7f8      	b.n	8002c16 <memcpy+0x4>

08002c24 <memmove>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4288      	cmp	r0, r1
 8002c28:	d902      	bls.n	8002c30 <memmove+0xc>
 8002c2a:	188b      	adds	r3, r1, r2
 8002c2c:	4298      	cmp	r0, r3
 8002c2e:	d303      	bcc.n	8002c38 <memmove+0x14>
 8002c30:	2300      	movs	r3, #0
 8002c32:	e007      	b.n	8002c44 <memmove+0x20>
 8002c34:	5c8b      	ldrb	r3, [r1, r2]
 8002c36:	5483      	strb	r3, [r0, r2]
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	d2fb      	bcs.n	8002c34 <memmove+0x10>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	5ccc      	ldrb	r4, [r1, r3]
 8002c40:	54c4      	strb	r4, [r0, r3]
 8002c42:	3301      	adds	r3, #1
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1fa      	bne.n	8002c3e <memmove+0x1a>
 8002c48:	e7f8      	b.n	8002c3c <memmove+0x18>
	...

08002c4c <_free_r>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	0005      	movs	r5, r0
 8002c50:	2900      	cmp	r1, #0
 8002c52:	d010      	beq.n	8002c76 <_free_r+0x2a>
 8002c54:	1f0c      	subs	r4, r1, #4
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	da00      	bge.n	8002c5e <_free_r+0x12>
 8002c5c:	18e4      	adds	r4, r4, r3
 8002c5e:	0028      	movs	r0, r5
 8002c60:	f000 f8d4 	bl	8002e0c <__malloc_lock>
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <_free_r+0x90>)
 8002c66:	6813      	ldr	r3, [r2, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <_free_r+0x2c>
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	6014      	str	r4, [r2, #0]
 8002c70:	0028      	movs	r0, r5
 8002c72:	f000 f8d3 	bl	8002e1c <__malloc_unlock>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	42a3      	cmp	r3, r4
 8002c7a:	d908      	bls.n	8002c8e <_free_r+0x42>
 8002c7c:	6821      	ldr	r1, [r4, #0]
 8002c7e:	1860      	adds	r0, r4, r1
 8002c80:	4283      	cmp	r3, r0
 8002c82:	d1f3      	bne.n	8002c6c <_free_r+0x20>
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	1841      	adds	r1, r0, r1
 8002c8a:	6021      	str	r1, [r4, #0]
 8002c8c:	e7ee      	b.n	8002c6c <_free_r+0x20>
 8002c8e:	001a      	movs	r2, r3
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <_free_r+0x4e>
 8002c96:	42a3      	cmp	r3, r4
 8002c98:	d9f9      	bls.n	8002c8e <_free_r+0x42>
 8002c9a:	6811      	ldr	r1, [r2, #0]
 8002c9c:	1850      	adds	r0, r2, r1
 8002c9e:	42a0      	cmp	r0, r4
 8002ca0:	d10b      	bne.n	8002cba <_free_r+0x6e>
 8002ca2:	6820      	ldr	r0, [r4, #0]
 8002ca4:	1809      	adds	r1, r1, r0
 8002ca6:	1850      	adds	r0, r2, r1
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	4283      	cmp	r3, r0
 8002cac:	d1e0      	bne.n	8002c70 <_free_r+0x24>
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	1841      	adds	r1, r0, r1
 8002cb4:	6011      	str	r1, [r2, #0]
 8002cb6:	6053      	str	r3, [r2, #4]
 8002cb8:	e7da      	b.n	8002c70 <_free_r+0x24>
 8002cba:	42a0      	cmp	r0, r4
 8002cbc:	d902      	bls.n	8002cc4 <_free_r+0x78>
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	602b      	str	r3, [r5, #0]
 8002cc2:	e7d5      	b.n	8002c70 <_free_r+0x24>
 8002cc4:	6821      	ldr	r1, [r4, #0]
 8002cc6:	1860      	adds	r0, r4, r1
 8002cc8:	4283      	cmp	r3, r0
 8002cca:	d103      	bne.n	8002cd4 <_free_r+0x88>
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	1841      	adds	r1, r0, r1
 8002cd2:	6021      	str	r1, [r4, #0]
 8002cd4:	6063      	str	r3, [r4, #4]
 8002cd6:	6054      	str	r4, [r2, #4]
 8002cd8:	e7ca      	b.n	8002c70 <_free_r+0x24>
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	200000b8 	.word	0x200000b8

08002ce0 <_malloc_r>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	1ccd      	adds	r5, r1, #3
 8002ce6:	439d      	bics	r5, r3
 8002ce8:	3508      	adds	r5, #8
 8002cea:	0006      	movs	r6, r0
 8002cec:	2d0c      	cmp	r5, #12
 8002cee:	d21f      	bcs.n	8002d30 <_malloc_r+0x50>
 8002cf0:	250c      	movs	r5, #12
 8002cf2:	42a9      	cmp	r1, r5
 8002cf4:	d81e      	bhi.n	8002d34 <_malloc_r+0x54>
 8002cf6:	0030      	movs	r0, r6
 8002cf8:	f000 f888 	bl	8002e0c <__malloc_lock>
 8002cfc:	4925      	ldr	r1, [pc, #148]	; (8002d94 <_malloc_r+0xb4>)
 8002cfe:	680a      	ldr	r2, [r1, #0]
 8002d00:	0014      	movs	r4, r2
 8002d02:	2c00      	cmp	r4, #0
 8002d04:	d11a      	bne.n	8002d3c <_malloc_r+0x5c>
 8002d06:	4f24      	ldr	r7, [pc, #144]	; (8002d98 <_malloc_r+0xb8>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <_malloc_r+0x38>
 8002d0e:	0021      	movs	r1, r4
 8002d10:	0030      	movs	r0, r6
 8002d12:	f000 f869 	bl	8002de8 <_sbrk_r>
 8002d16:	6038      	str	r0, [r7, #0]
 8002d18:	0029      	movs	r1, r5
 8002d1a:	0030      	movs	r0, r6
 8002d1c:	f000 f864 	bl	8002de8 <_sbrk_r>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d12b      	bne.n	8002d7c <_malloc_r+0x9c>
 8002d24:	230c      	movs	r3, #12
 8002d26:	0030      	movs	r0, r6
 8002d28:	6033      	str	r3, [r6, #0]
 8002d2a:	f000 f877 	bl	8002e1c <__malloc_unlock>
 8002d2e:	e003      	b.n	8002d38 <_malloc_r+0x58>
 8002d30:	2d00      	cmp	r5, #0
 8002d32:	dade      	bge.n	8002cf2 <_malloc_r+0x12>
 8002d34:	230c      	movs	r3, #12
 8002d36:	6033      	str	r3, [r6, #0]
 8002d38:	2000      	movs	r0, #0
 8002d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	1b5b      	subs	r3, r3, r5
 8002d40:	d419      	bmi.n	8002d76 <_malloc_r+0x96>
 8002d42:	2b0b      	cmp	r3, #11
 8002d44:	d903      	bls.n	8002d4e <_malloc_r+0x6e>
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	18e4      	adds	r4, r4, r3
 8002d4a:	6025      	str	r5, [r4, #0]
 8002d4c:	e003      	b.n	8002d56 <_malloc_r+0x76>
 8002d4e:	6863      	ldr	r3, [r4, #4]
 8002d50:	42a2      	cmp	r2, r4
 8002d52:	d10e      	bne.n	8002d72 <_malloc_r+0x92>
 8002d54:	600b      	str	r3, [r1, #0]
 8002d56:	0030      	movs	r0, r6
 8002d58:	f000 f860 	bl	8002e1c <__malloc_unlock>
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	2207      	movs	r2, #7
 8002d60:	300b      	adds	r0, #11
 8002d62:	1d23      	adds	r3, r4, #4
 8002d64:	4390      	bics	r0, r2
 8002d66:	1ac2      	subs	r2, r0, r3
 8002d68:	4298      	cmp	r0, r3
 8002d6a:	d0e6      	beq.n	8002d3a <_malloc_r+0x5a>
 8002d6c:	1a1b      	subs	r3, r3, r0
 8002d6e:	50a3      	str	r3, [r4, r2]
 8002d70:	e7e3      	b.n	8002d3a <_malloc_r+0x5a>
 8002d72:	6053      	str	r3, [r2, #4]
 8002d74:	e7ef      	b.n	8002d56 <_malloc_r+0x76>
 8002d76:	0022      	movs	r2, r4
 8002d78:	6864      	ldr	r4, [r4, #4]
 8002d7a:	e7c2      	b.n	8002d02 <_malloc_r+0x22>
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	1cc4      	adds	r4, r0, #3
 8002d80:	439c      	bics	r4, r3
 8002d82:	42a0      	cmp	r0, r4
 8002d84:	d0e1      	beq.n	8002d4a <_malloc_r+0x6a>
 8002d86:	1a21      	subs	r1, r4, r0
 8002d88:	0030      	movs	r0, r6
 8002d8a:	f000 f82d 	bl	8002de8 <_sbrk_r>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d1db      	bne.n	8002d4a <_malloc_r+0x6a>
 8002d92:	e7c7      	b.n	8002d24 <_malloc_r+0x44>
 8002d94:	200000b8 	.word	0x200000b8
 8002d98:	200000bc 	.word	0x200000bc

08002d9c <_realloc_r>:
 8002d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9e:	0007      	movs	r7, r0
 8002da0:	000d      	movs	r5, r1
 8002da2:	0016      	movs	r6, r2
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d105      	bne.n	8002db4 <_realloc_r+0x18>
 8002da8:	0011      	movs	r1, r2
 8002daa:	f7ff ff99 	bl	8002ce0 <_malloc_r>
 8002dae:	0004      	movs	r4, r0
 8002db0:	0020      	movs	r0, r4
 8002db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	d103      	bne.n	8002dc0 <_realloc_r+0x24>
 8002db8:	f7ff ff48 	bl	8002c4c <_free_r>
 8002dbc:	0034      	movs	r4, r6
 8002dbe:	e7f7      	b.n	8002db0 <_realloc_r+0x14>
 8002dc0:	f000 f834 	bl	8002e2c <_malloc_usable_size_r>
 8002dc4:	002c      	movs	r4, r5
 8002dc6:	42b0      	cmp	r0, r6
 8002dc8:	d2f2      	bcs.n	8002db0 <_realloc_r+0x14>
 8002dca:	0031      	movs	r1, r6
 8002dcc:	0038      	movs	r0, r7
 8002dce:	f7ff ff87 	bl	8002ce0 <_malloc_r>
 8002dd2:	1e04      	subs	r4, r0, #0
 8002dd4:	d0ec      	beq.n	8002db0 <_realloc_r+0x14>
 8002dd6:	0029      	movs	r1, r5
 8002dd8:	0032      	movs	r2, r6
 8002dda:	f7ff ff1a 	bl	8002c12 <memcpy>
 8002dde:	0029      	movs	r1, r5
 8002de0:	0038      	movs	r0, r7
 8002de2:	f7ff ff33 	bl	8002c4c <_free_r>
 8002de6:	e7e3      	b.n	8002db0 <_realloc_r+0x14>

08002de8 <_sbrk_r>:
 8002de8:	2300      	movs	r3, #0
 8002dea:	b570      	push	{r4, r5, r6, lr}
 8002dec:	4d06      	ldr	r5, [pc, #24]	; (8002e08 <_sbrk_r+0x20>)
 8002dee:	0004      	movs	r4, r0
 8002df0:	0008      	movs	r0, r1
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	f7fd fe8c 	bl	8000b10 <_sbrk>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d103      	bne.n	8002e04 <_sbrk_r+0x1c>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d000      	beq.n	8002e04 <_sbrk_r+0x1c>
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	bd70      	pop	{r4, r5, r6, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20000158 	.word	0x20000158

08002e0c <__malloc_lock>:
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	4802      	ldr	r0, [pc, #8]	; (8002e18 <__malloc_lock+0xc>)
 8002e10:	f000 f814 	bl	8002e3c <__retarget_lock_acquire_recursive>
 8002e14:	bd10      	pop	{r4, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	20000160 	.word	0x20000160

08002e1c <__malloc_unlock>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <__malloc_unlock+0xc>)
 8002e20:	f000 f80d 	bl	8002e3e <__retarget_lock_release_recursive>
 8002e24:	bd10      	pop	{r4, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	20000160 	.word	0x20000160

08002e2c <_malloc_usable_size_r>:
 8002e2c:	1f0b      	subs	r3, r1, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1f18      	subs	r0, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da01      	bge.n	8002e3a <_malloc_usable_size_r+0xe>
 8002e36:	580b      	ldr	r3, [r1, r0]
 8002e38:	18c0      	adds	r0, r0, r3
 8002e3a:	4770      	bx	lr

08002e3c <__retarget_lock_acquire_recursive>:
 8002e3c:	4770      	bx	lr

08002e3e <__retarget_lock_release_recursive>:
 8002e3e:	4770      	bx	lr

08002e40 <_init>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

08002e4c <_fini>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr
